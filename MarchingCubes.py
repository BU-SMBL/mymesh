# -*- coding: utf-8 -*-
"""
Created on Sat Jan 22 09:18:20 2022

@author: toj
"""
#%%
import time
import sys
from . import MeshUtils
import numpy as np
import scipy
import copy, warnings
try:
    from joblib import Parallel, delayed
except:
    warnings.warn('Optional dependencies not found - some functions may not work properly')


#      7_______6              *__10___*
#     /|      /|             /|      /|
#    / |     / |           11 7     9 6
#   /  |    /  |           /  |    /  |
#  4___|___5   |          *___|_8_*   |
#  |   3___|___2          |   *__2|___*
#  |  /    |  /           4  /    5  /  
#  | /     | /            | 3     | 1  
#  |/      |/             |/      |/   
#  0_______1              *___0___*    
#

# 3___6___2
# |       |
# 7       5
# |       |
# 0___4___1

def MarchingSquaresImage(I, h=1, threshold=0, z=0, interpolation='linear', method='triangle', flip=False, edgemode='constant', cleanup=True):
    # edgemode is for handling edges when interpolation is greater than linear (see np.pad for options)
    # Image data is assumed to be voxel data and will be interpolated to vertices to get the corners of each 'square'
    
    assert len(I.shape) == 2, 'I must be a 2D numpy array of image data. For 3D, use MarchingCubesImage.'
    I = I - threshold  
    if method == 'triangle':
        LookupTable = np.array([
            [[]],               # 0-0000
            [[7,6,3]],          # 1-0001
            [[5,2,6]],          # 2-0010
            [[7,5,2],[2,3,7]],  # 3-0011
            [[4,1,5]],          # 4-0100
            [[4,1,5],[5,6,4],[4,6,7],[7,6,3]], # 5-0101
            [[4,1,2],[2,6,4]],  # 6-0110
            [[1,2,3],[3,4,1],[4,3,7]], # 7-0111
            [[0,4,7]],          # 8-1000
            [[0,4,6],[6,3,0]],  # 9-1001
            [[0,4,7],[4,5,7],[7,5,6],[6,5,2]], # 10-1010
            [[0,2,3],[0,4,5],[5,2,0]], # 11-1011
            [[0,1,5],[5,7,0]], # 12-1100
            [[0,1,3],[1,5,6],[6,3,1]], # 13-1101
            [[0,1,2],[0,2,6],[6,7,0]], # 14-1110
            [[0,1,2],[2,3,0]]   # 15-1111
        ],dtype=object)
    elif method == 'edge':
        LookupTable = np.array([
            [[]],           # 0-0000
            [[6,7]],        # 1-0001
            [[5,6]],        # 2-0010
            [[5,7]],        # 3-0011
            [[4,5]],        # 4-0100
            [[7,4],[5,6]],  # 5-0101
            [[4,6]],        # 6-0110
            [[4,7]],        # 7-0111
            [[7,4]],        # 8-1000
            [[6,4]],        # 9-1001
            [[4,5],[6,7]],  # 10-1010
            [[5,4]],        # 11-1011
            [[7,5]],        # 12-1100
            [[6,5]],        # 13-1101
            [[7,6]], # 14-1110
            [[]]   # 15-1111
        ],dtype=object)
    else:
        raise Exception('Invalid method. Must be "triangle" or "edge".')
    if flip: 
        I = -I
    if isinstance(h, (int, float, np.number)):
        h = (h,h)
    
    Padding = 0
    if interpolation == "cubic":
        # I = np.pad(I,1,mode=edgemode)
        Padding = 1
    
    x1 = np.arange(0,I.shape[1]*h[0],h[0]) + h[0]/2
    y1 = np.arange(0,I.shape[0]*h[1],h[1]) + h[1]/2
    
    X = np.repeat(np.atleast_2d(x1),I.shape[0],axis=0) - Padding*h[0]
    Y = np.repeat(np.atleast_2d(y1).T,I.shape[1],axis=1) - Padding*h[1]
    Z = np.zeros(X.shape)
    
    
    Xv = np.repeat(np.atleast_2d(np.arange(-Padding,I.shape[1]+(1+Padding),1)),  I.shape[0]+1+2*Padding,axis=0) * h[0]
    Yv = np.repeat(np.atleast_2d(np.arange(-Padding,I.shape[0]+(1+Padding),1)).T,I.shape[1]+1+2*Padding,axis=1) * h[1]
    
    # TODO: This is major bottleneck for cubic
    interp = scipy.interpolate.RegularGridInterpolator((y1,x1),I,fill_value=None,method='linear',bounds_error=False)
    Iv = interp((Xv.flatten(),Yv.flatten())).reshape(Xv.shape)
    
    X = Xv; Y = Yv; I = Iv; Z = np.zeros(Xv.shape)
    
    edgeLookup = np.array([
        [0, 0],  # Corner 0
        [1, 1],  # Corner 1
        [2, 2],  # Corner 2
        [3, 3],  # Corner 3
        [0, 1],  # Edge 0
        [1, 2],  # Edge 1
        [2, 3],  # Edge 2
        [3, 0],  # Edge 3
        ])
    iidx = np.repeat(np.arange(X.shape[0]-1-2*Padding),X.shape[1]-1-2*Padding)+Padding
    jidx = np.tile(np.arange(X.shape[1]-1-2*Padding),X.shape[0]-1-2*Padding)+Padding
    
    isquares = np.vstack([iidx,iidx+1,iidx+1,iidx]).T
    jsquares = np.vstack([jidx,jidx,jidx+1,jidx+1]).T
    
    vals = I[isquares,jsquares]
    inside = (vals <= 0).astype(int)
    tableIdx = np.dot(inside, 2**np.arange(inside.shape[1] - 1, -1, -1))
    
    edgeList =  LookupTable[tableIdx]
    edgeConnections = np.array([x for y in edgeList for x in y if len(x) != 0])
    numbering = np.array([j for j,y in enumerate(edgeList) for i,x in enumerate(y) if len(x) != 0])
    
    
    i_indices = isquares[numbering][np.arange(len(numbering))[:, np.newaxis,np.newaxis], edgeLookup[edgeConnections]]
    j_indices = jsquares[numbering][np.arange(len(numbering))[:, np.newaxis,np.newaxis], edgeLookup[edgeConnections]]
    
    
    if interpolation == "cubic":
        NewCoords = []
        ishiftdir = i_indices[:,:,1] - i_indices[:,:,0]
        jshiftdir = j_indices[:,:,1] - j_indices[:,:,0]
        
        i_interp = np.stack([i_indices[:,:,0]-1*ishiftdir, i_indices[:,:,0], i_indices[:,:,1], i_indices[:,:,1]+1*ishiftdir],axis=2)
        j_interp = np.stack([j_indices[:,:,0]-1*jshiftdir, j_indices[:,:,0], j_indices[:,:,1], j_indices[:,:,1]+1*jshiftdir],axis=2)
        
        X_interp = X[i_interp,j_interp]
        Y_interp = Y[i_interp,j_interp]
        I_interp = I[i_interp,j_interp]
        
        
        x = X_interp.reshape(I_interp.shape[0]*I_interp.shape[1],I_interp.shape[2],order='F')
        y = Y_interp.reshape(I_interp.shape[0]*I_interp.shape[1],I_interp.shape[2],order='F')
        v = I_interp.reshape(I_interp.shape[0]*I_interp.shape[1],I_interp.shape[2],order='F')
        
        # Build coefficients for cubic polynomials
        xbool = x[:,1]!=x[:,2] # Only interpolate in x if on an x edge
        ybool = y[:,1]!=y[:,2] # Only interpolate in y if on an y edge
        
        xsort = np.argsort(x[xbool],axis=1)
        ysort = np.argsort(y[ybool],axis=1)
        x[xbool,:] = np.take_along_axis(x[xbool], xsort, axis=1)
        y[ybool,:] = np.take_along_axis(y[ybool], ysort, axis=1)
        v[xbool,:] = np.take_along_axis(v[xbool], xsort, axis=1)
        v[ybool,:] = np.take_along_axis(v [ybool], ysort, axis=1)
        
        xAs = np.stack([x[xbool]**3, x[xbool]**2, x[xbool]**1, x[xbool]**0],axis=2)
        yAs = np.stack([y[ybool]**3, y[ybool]**2, y[ybool]**1, y[ybool]**0],axis=2)
        xCoeff = np.linalg.solve(xAs,v[xbool,:])
        yCoeff = np.linalg.solve(yAs,v[ybool,:])
        
        # cf. https://en.wikipedia.org/wiki/Cubic_equation#General_cubic_formula
        Roots = []
        for coeff in [xCoeff, yCoeff]:
            a = coeff[:,0]
            b = coeff[:,1]
            c = coeff[:,2]
            d = coeff[:,3]
            
            delta0 = b**2 - 3*a*c
            delta1 = 2*b**3 - 9*a*b*c + 27*a**2*d
            
            C = ((delta1 + np.sqrt(delta1**2+0J - 4*delta0**3))/2)**(1/3)
            C[C==0] = ((delta1[C==0] - np.sqrt(delta1[C==0]**2 - 4*delta0[C==0]**3))/2)**(1/3)
            
            zeta = (-1 + np.sqrt(-3+0J))/2
            roots = np.vstack([-1/(3*a) * ( b + zeta**k*C + delta0/(zeta**k*C) ) for k in [0, 1, 2]]).T
            realcheck = np.isclose(np.imag(roots), 0)
            roots[realcheck]  = np.real(roots[realcheck])
            
            # overwrite with quadratic for a ~ 0
            near0 = np.isclose(a,0)
            roots[near0] = np.vstack([(-c[near0] + np.sqrt(c[near0]**2 - 4*b[near0]*d[near0]))/(2*b[near0]), 
                                       (-c[near0] - np.sqrt(c[near0]**2 - 4*b[near0]*d[near0]))/(2*b[near0]),
                                        np.repeat(np.nan,len(b[near0]))]).T
            Roots.append(roots)
        xRoots = Roots[0]
        yRoots = Roots[1]
        
        NewCoords = np.nan*np.ones((v.shape[0],3))
        
        NewCoords[xbool,0] = xRoots[(x[xbool,1,None] <= xRoots) & (x[xbool,2,None] >= xRoots) & np.isreal(xRoots)]
        NewCoords[xbool,1] = y[xbool,1]
        
        NewCoords[ybool,0] = x[ybool,1]
        NewCoords[ybool,1] = yRoots[(y[ybool,1,None] <= yRoots) & (y[ybool,2,None] >= yRoots) & np.isreal(yRoots)]
        
        NewCoords[:,2] = z
        
    elif interpolation == "linear" or interpolation == "midpoint":
        ishiftdir = i_indices[:,:,1] - i_indices[:,:,0]
        jshiftdir = j_indices[:,:,1] - j_indices[:,:,0]
        
        i_interp = i_indices
        j_interp = j_indices
        
        X_interp = X[i_interp,j_interp]
        Y_interp = Y[i_interp,j_interp]
        I_interp = I[i_interp,j_interp]
        
        x = X_interp.reshape(I_interp.shape[0]*I_interp.shape[1],I_interp.shape[2],order='F')
        y = Y_interp.reshape(I_interp.shape[0]*I_interp.shape[1],I_interp.shape[2],order='F')
        v = I_interp.reshape(I_interp.shape[0]*I_interp.shape[1],I_interp.shape[2],order='F')
        
        if interpolation == "linear":
            with np.errstate(divide='ignore', invalid='ignore'):
                NewCoords = np.vstack([
                     x[:,0] + np.nan_to_num((0-v[:,0])*(x[:,1]-x[:,0])/(v[:,1]-v[:,0])),
                     y[:,0]  + np.nan_to_num((0-v[:,0])*(y[:,1]-y[:,0])/(v[:,1]-v[:,0])),
                     np.repeat(z,len(x))
                    ]).T
        else:
            NewCoords = np.vstack([
                 (x[:,0] + x[:,1])/2,
                 (y[:,0] + y[:,1])/2,
                 np.repeat(z,len(x))
                ]).T
    else:
        raise Exception('Invalid input "{:s}" for interpolation. Must be one of "midpoint", "linear", or "cubic".'.format(interpolation))
            
    NewConn = np.arange(len(NewCoords)).reshape(edgeConnections.shape,order='F')
    if cleanup:
        NewCoords,NewConn,_,Idx = MeshUtils.DeleteDuplicateNodes(NewCoords,NewConn,return_idx=True)
        if (interpolation=='linear' or interpolation=='cubic') and method=='triangle':
            NewCoords,NewConn = MeshUtils.DeleteDegenerateElements(NewCoords,NewConn,strict=True)
            
    return NewCoords, NewConn

def MarchingSquares(NodeCoords, NodeConn, NodeValues, threshold=0, interpolation='linear', method='triangle', flip=False, return_anchors=False, cleanup=True):
    NewCoords = []
    NewConn = []
    Anchors = []
    AnchorAxis = []
    AnchorDir = []
    NodeValues = np.array([v-threshold for v in NodeValues]).astype('float64')
    if flip:
        NodeValues = -1*NodeValues
    MarchingSquaresLookup_Edge.LookupTable = [
        [[]],           # 0-0000
        [[6,7]],        # 1-0001
        [[5,6]],        # 2-0010
        [[5,7]],        # 3-0011
        [[4,5]],        # 4-0100
        [[7,4],[5,6]],  # 5-0101
        [[4,6]],        # 6-0110
        [[4,7]],        # 7-0111
        [[7,4]],        # 8-1000
        [[6,4]],        # 9-1001
        [[4,5],[6,7]],  # 10-1010
        [[5,4]],        # 11-1011
        [[7,5]],        # 12-1100
        [[6,5]],        # 13-1101
        [[7,6]], # 14-1110
        [[]]   # 15-1111
    ]
    MarchingSquaresLookup_Tri.LookupTable = [
        [[]],               # 0-0000
        [[7,6,3]],          # 1-0001
        [[5,2,6]],          # 2-0010
        [[7,5,2],[2,3,7]],  # 3-0011
        [[4,1,5]],          # 4-0100
        [[4,1,5],[5,6,4],[4,6,7],[7,6,3]], # 5-0101
        [[4,1,2],[2,6,4]],  # 6-0110
        [[1,2,3],[3,4,1],[4,3,7]], # 7-0111
        [[0,4,7]],          # 8-1000
        [[0,4,6],[6,3,0]],  # 9-1001
        [[0,4,7],[4,5,7],[7,5,6],[6,5,2]], # 10-1010
        [[0,2,3],[0,4,5],[5,2,0]], # 11-1011
        [[0,1,5],[5,7,0]], # 12-1100
        [[0,1,3],[1,5,6],[6,3,1]], # 13-1101
        [[0,1,2],[0,2,6],[6,7,0]], # 14-1110
        [[0,1,2],[2,3,0]]   # 15-1111
    ]
    edgeLookup = [
        [0, 0],  # Corner 0
        [1, 1],  # Corner 1
        [2, 2],  # Corner 2
        [3, 3],  # Corner 3
        [0, 1],  # Edge 0
        [1, 2],  # Edge 1
        [2, 3],  # Edge 2
        [3, 0],  # Edge 3
        ]
    
    # arrayCoords = np.array(NodeCoords)
    for e in range(len(NodeConn)):
        vals = np.array([NodeValues[node] for node in NodeConn[e]])
        inside = [1 if v <= 0 else 0 for v in vals]
        i = int("".join(str(j) for j in inside), 2)
        if method == 'triangle':
            NewElems = MarchingSquaresLookup_Tri(i)
        elif method == 'edge':
            NewElems = MarchingSquaresLookup_Edge(i)
        else:
            raise Exception('Invalid method. Must be "triangle" or "edge".')
    
        if len(NewElems) > 0:
            for t in NewElems:
                elem = []
                for n in t:
                    node1 = NodeConn[e][edgeLookup[n][0]]
                    node2 = NodeConn[e][edgeLookup[n][1]]
                    coords1 = NodeCoords[node1]
                    coords2 = NodeCoords[node2]
                    v1 = NodeValues[node1]
                    v2 = NodeValues[node2]
                    if interpolation == 'midpoint' or v1 == v2:
                        newNode = [
                            (coords1[0] + coords2[0])/2,
                            (coords1[1] + coords2[1])/2,
                            (coords1[2] + coords2[2])/2
                            ]
                        elem.append(len(NewCoords))
                        NewCoords.append(newNode)
                    elif interpolation == 'linear':
                        newNode = [
                            coords1[0] + (0-v1)*(coords2[0]-coords1[0])/(v2-v1),
                            coords1[1] + (0-v1)*(coords2[1]-coords1[1])/(v2-v1),
                            coords1[2] + (0-v1)*(coords2[2]-coords1[2])/(v2-v1)
                            ]
                        if np.sign(v2) == np.sign(v1):
                            print('Marching squares fuckup')
                            print(str(e) + str(np.sign(vals)) + str(edgeLookup[n]))
                        elem.append(len(NewCoords))
                        NewCoords.append(newNode)                            
                    else:
                        raise Exception('Invalid interpolation method')
                    if return_anchors:
                        if flip:
                            anchor = [node1,node2][np.argmax([v1,v2])] # Pick the point in positive domain
                        else:
                            anchor = [node1,node2][np.argmin([v1,v2])] # Pick the point in negative domain
                        Anchors.append(anchor)

                        # if (edgeLookup[n][0] == 0 and edgeLookup[n][1] == 1) or (edgeLookup[n][0] == 2 and edgeLookup[n][1] == 3):
                        #     AnchorAxis.append(0)
                        # elif (edgeLookup[n][0] == 1 and edgeLookup[n][1] == 2) or (edgeLookup[n][0] == 3 and edgeLookup[n][1] == 0):
                        #     AnchorAxis.append(1)
                        # else:
                        #     AnchorAxis.append(-1)

                        if n == 4 or n == 6:
                            AnchorAxis.append(0)
                        elif n == 5 or n == 7: 
                            AnchorAxis.append(1)
                        else:
                            AnchorAxis.append(-1)

                        mid = np.array([
                            (coords1[0] + coords2[0])/2,
                            (coords1[1] + coords2[1])/2,
                            (coords1[2] + coords2[2])/2
                            ])
                        if np.all(mid-NodeCoords[anchor] >= 0):
                            AnchorDir.append(1)
                        else:
                            AnchorDir.append(-1)

                    
                if len(elem) > 0:
                    NewConn.append(elem)  
    if cleanup:                  
        NewCoords,NewConn,_,Idx = MeshUtils.DeleteDuplicateNodes(NewCoords,NewConn,return_idx=True)
        if interpolation=='linear' and method=='triangle':
            NewCoords,NewConn = MeshUtils.DeleteDegenerateElements(NewCoords,NewConn,strict=True)
    else:
        Idx = np.arange(len(NewCoords),dtype=int)
    if return_anchors:
        Anchors = np.array(Anchors)
        AnchorAxis = np.array(AnchorAxis)
        AnchorDir = np.array(AnchorDir)
        return NewCoords, NewConn, Anchors[Idx], AnchorAxis[Idx], AnchorDir[Idx]
    return NewCoords, NewConn

def MarchingSquaresLookup_Tri(i):
    assert i < 16, 'There are only 16 possible states of the square, i must be less than 16'
    TriElems = MarchingSquaresLookup_Tri.LookupTable[i]
    return TriElems
def MarchingSquaresLookup_Edge(i):
    assert i < 16, 'There are only 16 possible states of the square, i must be less than 16'
    TriElems = MarchingSquaresLookup_Edge.LookupTable[i]
    return TriElems

def MarchingCubes(VoxelNodeCoords,VoxelNodeConn,NodeValues,threshold=0,interpolation='linear',method='33',flip=False, return_anchors=False):
# TODO: add option to invert (-NodeValues, -threshold)
    # method: 'original', '33'
    TriNodeCoords = []
    TriNodeConn = []
    Anchors = []
    AnchorAxis = []
    AnchorDir = []
    NodeValues = np.array([v-threshold for v in NodeValues]).astype('float64')
    if flip:
        NodeValues = -1*NodeValues
    if method == '33':
        MarchingCubes33Lookup.LookupTable = [[[[]]],
         [[[7, 10, 11]]],
         [[[9, 10, 6]]],
         [[[6, 9, 7], [7, 9, 11]]],
         [[[8, 9, 5]]],
         [[[5, 8, 9], [7, 10, 11]], [[5, 7, 9], [5, 8, 7], [8, 11, 7], [7, 10, 9]]],
         [[[5, 8, 6], [6, 8, 10]]],
         [[[5, 7, 6], [5, 8, 11], [5, 11, 7]]],
         [[[11, 8, 4]]],
         [[[8, 4, 10], [10, 4, 7]]],
         [[[4, 11, 8], [6, 9, 10]], [[4, 6, 8], [4, 11, 6], [11, 10, 6], [6, 9, 8]]],
         [[[6, 4, 7], [6, 9, 8], [6, 8, 4]]],
         [[[4, 11, 5], [5, 11, 9]]],
         [[[7, 5, 4], [7, 10, 9], [7, 9, 5]]],
         [[[4, 6, 5], [4, 11, 10], [4, 10, 6]]],
         [[[4, 6, 5], [4, 7, 6]]],
         [[[7, 3, 2]]],
         [[[10, 11, 2], [2, 11, 3]]],
         [[[3, 2, 7], [9, 10, 6]], [[3, 9, 7], [3, 2, 9], [2, 6, 9], [9, 10, 7]]],
         [[[3, 9, 11], [3, 2, 6], [3, 6, 9]]],
         [[[2, 7, 3], [5, 8, 9]],
          [[7, 8, 9], [8, 7, 3], [3, 5, 8], [5, 3, 2], [2, 9, 5], [9, 7, 2]]],
         [[[8, 9, 5], [3, 2, 11], [11, 2, 10]],
          [[11, 8, 9],
           [11, 9, 10],
           [10, 9, 2],
           [2, 9, 5],
           [2, 5, 3],
           [8, 3, 5],
           [8, 11, 3]],
          [[5, 3, 2], [5, 2, 9], [9, 2, 10], [8, 3, 5], [3, 8, 11]]],
         [[[2, 7, 3], [5, 8, 6], [6, 8, 10]],
          [[6, 2, 7],
           [6, 7, 10],
           [10, 7, 8],
           [8, 7, 3],
           [8, 3, 5],
           [2, 5, 3],
           [2, 6, 5]],
          [[3, 5, 8], [3, 8, 7], [7, 8, 10], [2, 5, 3], [5, 2, 6]]],
         [[[3, 2, 6], [8, 3, 6], [8, 6, 5], [11, 3, 8]]],
         [[[2, 7, 3], [8, 4, 11]], [[2, 8, 3], [2, 7, 8], [7, 11, 8], [8, 4, 3]]],
         [[[8, 2, 10], [8, 4, 3], [8, 3, 2]]],
         [[[2, 7, 3], [4, 11, 8], [6, 9, 10]],
          [[3, 2, 6], [3, 6, 9], [3, 9, 10], [3, 10, 7], [4, 11, 8]],
          [[2, 4, 3], [2, 8, 4], [2, 11, 8], [2, 7, 11], [6, 9, 10]],
          [[6, 9, 8], [6, 8, 4], [6, 4, 10], [4, 11, 10], [2, 7, 3]],
          [[6, 12, 10],
           [10, 12, 11],
           [11, 12, 7],
           [7, 12, 2],
           [2, 12, 3],
           [3, 12, 4],
           [4, 12, 8],
           [8, 12, 9],
           [9, 12, 6]],
          [[10, 12, 11],
           [11, 12, 4],
           [4, 12, 8],
           [8, 12, 9],
           [9, 12, 6],
           [6, 12, 2],
           [2, 12, 3],
           [3, 12, 7],
           [7, 12, 10]],
          [[8, 12, 11],
           [11, 12, 7],
           [7, 12, 10],
           [10, 12, 9],
           [9, 12, 6],
           [6, 12, 2],
           [2, 12, 3],
           [3, 12, 4],
           [4, 12, 8]],
          [[7, 11, 10], [2, 6, 9], [2, 9, 4], [2, 4, 3], [4, 9, 8]],
          [[10, 8, 11],
           [10, 9, 8],
           [6, 9, 10],
           [6, 10, 7],
           [6, 7, 2],
           [2, 7, 3],
           [7, 4, 3],
           [7, 11, 4],
           [11, 8, 4]]],
         [[[3, 2, 4], [4, 2, 8], [2, 6, 8], [8, 6, 9]]],
         [[[7, 3, 2], [9, 5, 11], [11, 5, 4]],
          [[11, 7, 3],
           [11, 3, 4],
           [4, 3, 5],
           [5, 3, 2],
           [5, 2, 9],
           [7, 9, 2],
           [7, 11, 9]],
          [[2, 9, 5], [2, 5, 3], [3, 5, 4], [7, 9, 2], [9, 7, 11]]],
         [[[4, 3, 2], [9, 4, 2], [9, 2, 10], [9, 5, 4]]],
         [[[7, 3, 2], [11, 10, 4], [6, 4, 10], [4, 6, 5]],
          [[7, 11, 10], [3, 2, 4], [6, 4, 2], [4, 6, 5]],
          [[7, 10, 2],
           [6, 2, 10],
           [2, 6, 5],
           [2, 5, 3],
           [4, 3, 5],
           [3, 4, 11],
           [3, 11, 7],
           [10, 7, 11]],
          [[12, 10, 7],
           [12, 7, 3],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 5],
           [12, 5, 4],
           [12, 4, 11],
           [12, 11, 10]],
          [[12, 6, 5],
           [12, 5, 4],
           [12, 4, 3],
           [12, 3, 2],
           [12, 2, 7],
           [12, 7, 11],
           [12, 11, 10],
           [12, 10, 6]]],
         [[[5, 4, 6], [3, 2, 6], [4, 3, 6]]],
         [[[2, 1, 6]]],
         [[[1, 6, 2], [11, 7, 10]], [[1, 11, 2], [1, 6, 11], [6, 10, 11], [11, 7, 2]]],
         [[[9, 10, 1], [1, 10, 2]]],
         [[[11, 1, 9], [11, 7, 2], [11, 2, 1]]],
         [[[8, 9, 5], [2, 1, 6]], [[8, 2, 5], [8, 9, 2], [9, 6, 2], [2, 1, 5]]],
         [[[7, 10, 11], [8, 9, 5], [2, 1, 6]],
          [[11, 7, 2], [11, 2, 1], [11, 1, 6], [11, 6, 10], [8, 9, 5]],
          [[7, 8, 11], [7, 5, 8], [7, 9, 5], [7, 10, 9], [2, 1, 6]],
          [[2, 1, 5], [2, 5, 8], [2, 8, 6], [8, 9, 6], [7, 10, 11]],
          [[2, 12, 6],
           [6, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 11],
           [11, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 2]],
          [[6, 12, 9],
           [9, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 10],
           [10, 12, 6]],
          [[5, 12, 9],
           [9, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 8],
           [8, 12, 5]],
          [[10, 9, 6], [7, 2, 1], [7, 1, 8], [7, 8, 11], [8, 1, 5]],
          [[6, 5, 9],
           [6, 1, 5],
           [2, 1, 6],
           [2, 6, 10],
           [2, 10, 7],
           [7, 10, 11],
           [10, 8, 11],
           [10, 9, 8],
           [9, 5, 8]]],
         [[[2, 8, 10], [2, 1, 5], [2, 5, 8]]],
         [[[2, 1, 7], [7, 1, 11], [1, 5, 11], [11, 5, 8]]],
         [[[2, 1, 6], [11, 8, 4]],
          [[1, 8, 4], [8, 1, 6], [6, 11, 8], [11, 6, 2], [2, 4, 11], [4, 1, 2]]],
         [[[6, 2, 1], [8, 4, 10], [10, 4, 7]],
          [[10, 6, 2],
           [10, 2, 7],
           [7, 2, 4],
           [4, 2, 1],
           [4, 1, 8],
           [6, 8, 1],
           [6, 10, 8]],
          [[1, 8, 4], [1, 4, 2], [2, 4, 7], [6, 8, 1], [8, 6, 10]]],
         [[[11, 8, 4], [2, 1, 10], [10, 1, 9]],
          [[10, 11, 8],
           [10, 8, 9],
           [9, 8, 1],
           [1, 8, 4],
           [1, 4, 2],
           [11, 2, 4],
           [11, 10, 2]],
          [[4, 2, 1], [4, 1, 8], [8, 1, 9], [11, 2, 4], [2, 11, 10]]],
         [[[7, 2, 1], [8, 7, 1], [8, 1, 9], [8, 4, 7]]],
         [[[1, 6, 2], [4, 11, 5], [5, 11, 9]],
          [[5, 1, 6],
           [5, 6, 9],
           [9, 6, 11],
           [11, 6, 2],
           [11, 2, 4],
           [1, 4, 2],
           [1, 5, 4]],
          [[2, 4, 11], [2, 11, 6], [6, 11, 9], [1, 4, 2], [4, 1, 5]]],
         [[[6, 2, 1], [10, 9, 7], [5, 7, 9], [7, 5, 4]],
          [[6, 10, 9], [2, 1, 7], [5, 7, 1], [7, 5, 4]],
          [[6, 9, 1],
           [5, 1, 9],
           [1, 5, 4],
           [1, 4, 2],
           [7, 2, 4],
           [2, 7, 10],
           [2, 10, 6],
           [9, 6, 10]],
          [[12, 9, 6],
           [12, 6, 2],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 4],
           [12, 4, 7],
           [12, 7, 10],
           [12, 10, 9]],
          [[12, 5, 4],
           [12, 4, 7],
           [12, 7, 2],
           [12, 2, 1],
           [12, 1, 6],
           [12, 6, 10],
           [12, 10, 9],
           [12, 9, 5]]],
         [[[2, 1, 5], [11, 2, 5], [11, 5, 4], [10, 2, 11]]],
         [[[4, 7, 5], [2, 1, 5], [7, 2, 5]]],
         [[[1, 6, 3], [3, 6, 7]]],
         [[[1, 11, 3], [1, 6, 10], [1, 10, 11]]],
         [[[9, 3, 1], [9, 10, 7], [9, 7, 3]]],
         [[[11, 1, 9], [11, 3, 1]]],
         [[[9, 5, 8], [7, 3, 6], [6, 3, 1]],
          [[6, 9, 5],
           [6, 5, 1],
           [1, 5, 3],
           [3, 5, 8],
           [3, 8, 7],
           [9, 7, 8],
           [9, 6, 7]],
          [[8, 7, 3], [8, 3, 5], [5, 3, 1], [9, 7, 8], [7, 9, 6]]],
         [[[9, 5, 8], [6, 10, 1], [11, 1, 10], [1, 11, 3]],
          [[9, 6, 10], [5, 8, 1], [11, 1, 8], [1, 11, 3]],
          [[9, 10, 8],
           [11, 8, 10],
           [8, 11, 3],
           [8, 3, 5],
           [1, 5, 3],
           [5, 1, 6],
           [5, 6, 9],
           [10, 9, 6]],
          [[12, 10, 9],
           [12, 9, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 3],
           [12, 3, 1],
           [12, 1, 6],
           [12, 6, 10]],
          [[12, 11, 3],
           [12, 3, 1],
           [12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 10],
           [12, 10, 11]]],
         [[[1, 5, 8], [7, 1, 8], [7, 8, 10], [7, 3, 1]]],
         [[[3, 1, 11], [5, 8, 11], [1, 5, 11]]],
         [[[4, 11, 8], [1, 6, 3], [3, 6, 7]],
          [[3, 4, 11],
           [3, 11, 7],
           [7, 11, 6],
           [6, 11, 8],
           [6, 8, 1],
           [4, 1, 8],
           [4, 3, 1]],
          [[8, 1, 6], [8, 6, 11], [11, 6, 7], [4, 1, 8], [1, 4, 3]]],
         [[[8, 4, 3], [6, 8, 3], [6, 3, 1], [10, 8, 6]]],
         [[[11, 8, 4], [10, 7, 9], [3, 9, 7], [9, 3, 1]],
          [[11, 10, 7], [8, 4, 9], [3, 9, 4], [9, 3, 1]],
          [[11, 7, 4],
           [3, 4, 7],
           [4, 3, 1],
           [4, 1, 8],
           [9, 8, 1],
           [8, 9, 10],
           [8, 10, 11],
           [7, 11, 10]],
          [[12, 7, 11],
           [12, 11, 8],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 1],
           [12, 1, 9],
           [12, 9, 10],
           [12, 10, 7]],
          [[12, 3, 1],
           [12, 1, 9],
           [12, 9, 8],
           [12, 8, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 7],
           [12, 7, 3]]],
         [[[1, 9, 3], [8, 4, 3], [9, 8, 3]]],
         [[[3, 6, 7], [3, 1, 6], [11, 9, 5], [11, 5, 4]],
          [[3, 5, 4], [3, 1, 5], [7, 9, 6], [7, 11, 9]],
          [[3, 1, 4],
           [4, 1, 5],
           [3, 4, 7],
           [7, 4, 11],
           [7, 11, 6],
           [11, 9, 6],
           [1, 6, 5],
           [6, 9, 5]],
          [[5, 12, 1],
           [1, 12, 3],
           [3, 12, 7],
           [7, 12, 6],
           [6, 12, 9],
           [9, 12, 11],
           [11, 12, 4],
           [4, 12, 5]],
          [[6, 12, 1],
           [7, 12, 6],
           [11, 12, 7],
           [9, 12, 11],
           [5, 12, 9],
           [4, 12, 5],
           [3, 12, 4],
           [1, 12, 3]]],
         [[[10, 9, 6], [1, 4, 3], [5, 4, 1]],
          [[9, 6, 1],
           [5, 9, 1],
           [4, 9, 5],
           [10, 9, 4],
           [3, 10, 4],
           [10, 3, 6],
           [3, 1, 6]],
          [[4, 3, 10], [9, 4, 10], [5, 4, 9], [10, 3, 6], [1, 6, 3]]],
         [[[10, 7, 11], [4, 1, 5], [3, 1, 4]],
          [[7, 11, 4],
           [3, 7, 4],
           [1, 7, 3],
           [10, 7, 1],
           [5, 10, 1],
           [10, 5, 11],
           [5, 4, 11]],
          [[1, 5, 10], [7, 1, 10], [3, 1, 7], [10, 5, 11], [4, 11, 5]]],
         [[[1, 4, 3], [5, 4, 1]]],
         [[[0, 5, 1]]],
         [[[7, 10, 11], [0, 5, 1]],
          [[10, 5, 1], [5, 10, 11], [11, 0, 5], [0, 11, 7], [7, 1, 0], [1, 10, 7]]],
         [[[10, 6, 9], [0, 5, 1]], [[10, 0, 9], [10, 6, 0], [6, 1, 0], [0, 5, 9]]],
         [[[5, 1, 0], [11, 7, 9], [9, 7, 6]],
          [[9, 5, 1],
           [9, 1, 6],
           [6, 1, 7],
           [7, 1, 0],
           [7, 0, 11],
           [5, 11, 0],
           [5, 9, 11]],
          [[0, 11, 7], [0, 7, 1], [1, 7, 6], [5, 11, 0], [11, 5, 9]]],
         [[[1, 0, 9], [9, 0, 8]]],
         [[[10, 11, 7], [1, 0, 9], [9, 0, 8]],
          [[9, 10, 11],
           [9, 11, 8],
           [8, 11, 0],
           [0, 11, 7],
           [0, 7, 1],
           [10, 1, 7],
           [10, 9, 1]],
          [[7, 1, 0], [7, 0, 11], [11, 0, 8], [10, 1, 7], [1, 10, 9]]],
         [[[10, 0, 8], [10, 6, 1], [10, 1, 0]]],
         [[[8, 11, 7], [1, 8, 7], [1, 7, 6], [1, 0, 8]]],
         [[[11, 8, 4], [1, 0, 5]], [[11, 1, 4], [11, 8, 1], [8, 5, 1], [1, 0, 4]]],
         [[[0, 5, 1], [7, 10, 4], [4, 10, 8]],
          [[4, 0, 5],
           [4, 5, 8],
           [8, 5, 10],
           [10, 5, 1],
           [10, 1, 7],
           [0, 7, 1],
           [0, 4, 7]],
          [[1, 7, 10], [1, 10, 5], [5, 10, 8], [0, 7, 1], [7, 0, 4]]],
         [[[0, 5, 1], [6, 9, 10], [4, 11, 8]],
          [[1, 0, 4], [1, 4, 11], [1, 11, 8], [1, 8, 5], [6, 9, 10]],
          [[0, 6, 1], [0, 10, 6], [0, 9, 10], [0, 5, 9], [4, 11, 8]],
          [[4, 11, 10], [4, 10, 6], [4, 6, 8], [6, 9, 8], [0, 5, 1]],
          [[4, 12, 8],
           [8, 12, 9],
           [9, 12, 5],
           [5, 12, 0],
           [0, 12, 1],
           [1, 12, 6],
           [6, 12, 10],
           [10, 12, 11],
           [11, 12, 4]],
          [[8, 12, 9],
           [9, 12, 6],
           [6, 12, 10],
           [10, 12, 11],
           [11, 12, 4],
           [4, 12, 0],
           [0, 12, 1],
           [1, 12, 5],
           [5, 12, 8]],
          [[10, 12, 9],
           [9, 12, 5],
           [5, 12, 8],
           [8, 12, 11],
           [11, 12, 4],
           [4, 12, 0],
           [0, 12, 1],
           [1, 12, 6],
           [6, 12, 10]],
          [[5, 9, 8], [0, 4, 11], [0, 11, 6], [0, 6, 1], [6, 11, 10]],
          [[8, 10, 9],
           [8, 11, 10],
           [4, 11, 8],
           [4, 8, 5],
           [4, 5, 0],
           [0, 5, 1],
           [5, 6, 1],
           [5, 9, 6],
           [9, 10, 6]]],
         [[[5, 1, 0], [9, 8, 6], [4, 6, 8], [6, 4, 7]],
          [[5, 9, 8], [1, 0, 6], [4, 6, 0], [6, 4, 7]],
          [[5, 8, 0],
           [4, 0, 8],
           [0, 4, 7],
           [0, 7, 1],
           [6, 1, 7],
           [1, 6, 9],
           [1, 9, 5],
           [8, 5, 9]],
          [[12, 8, 5],
           [12, 5, 1],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 7],
           [12, 7, 6],
           [12, 6, 9],
           [12, 9, 8]],
          [[12, 4, 7],
           [12, 7, 6],
           [12, 6, 1],
           [12, 1, 0],
           [12, 0, 5],
           [12, 5, 9],
           [12, 9, 8],
           [12, 8, 4]]],
         [[[1, 11, 9], [1, 0, 4], [1, 4, 11]]],
         [[[7, 10, 9], [0, 7, 9], [0, 9, 1], [4, 7, 0]]],
         [[[4, 11, 0], [0, 11, 1], [11, 10, 1], [1, 10, 6]]],
         [[[7, 6, 4], [1, 0, 4], [6, 1, 4]]],
         [[[7, 3, 2], [5, 1, 0]], [[7, 5, 2], [7, 3, 5], [3, 0, 5], [5, 1, 2]]],
         [[[1, 0, 5], [10, 11, 2], [2, 11, 3]],
          [[2, 1, 0],
           [2, 0, 3],
           [3, 0, 11],
           [11, 0, 5],
           [11, 5, 10],
           [1, 10, 5],
           [1, 2, 10]],
          [[5, 10, 11], [5, 11, 0], [0, 11, 3], [1, 10, 5], [10, 1, 2]]],
         [[[10, 6, 9], [5, 1, 0], [7, 3, 2]],
          [[9, 10, 7], [9, 7, 3], [9, 3, 2], [9, 2, 6], [5, 1, 0]],
          [[10, 5, 9], [10, 0, 5], [10, 1, 0], [10, 6, 1], [7, 3, 2]],
          [[7, 3, 0], [7, 0, 5], [7, 5, 2], [5, 1, 2], [10, 6, 9]],
          [[7, 12, 2],
           [2, 12, 1],
           [1, 12, 6],
           [6, 12, 10],
           [10, 12, 9],
           [9, 12, 5],
           [5, 12, 0],
           [0, 12, 3],
           [3, 12, 7]],
          [[2, 12, 1],
           [1, 12, 5],
           [5, 12, 0],
           [0, 12, 3],
           [3, 12, 7],
           [7, 12, 10],
           [10, 12, 9],
           [9, 12, 6],
           [6, 12, 2]],
          [[0, 12, 1],
           [1, 12, 6],
           [6, 12, 2],
           [2, 12, 3],
           [3, 12, 7],
           [7, 12, 10],
           [10, 12, 9],
           [9, 12, 5],
           [5, 12, 0]],
          [[6, 1, 2], [10, 7, 3], [10, 3, 5], [10, 5, 9], [5, 3, 0]],
          [[2, 0, 1],
           [2, 3, 0],
           [7, 3, 2],
           [7, 2, 6],
           [7, 6, 10],
           [10, 6, 9],
           [6, 5, 9],
           [6, 1, 5],
           [1, 0, 5]]],
         [[[1, 0, 5], [2, 6, 3], [9, 3, 6], [3, 9, 11]],
          [[1, 2, 6], [0, 5, 3], [9, 3, 5], [3, 9, 11]],
          [[1, 6, 5],
           [9, 5, 6],
           [5, 9, 11],
           [5, 11, 0],
           [3, 0, 11],
           [0, 3, 2],
           [0, 2, 1],
           [6, 1, 2]],
          [[12, 6, 1],
           [12, 1, 0],
           [12, 0, 5],
           [12, 5, 9],
           [12, 9, 11],
           [12, 11, 3],
           [12, 3, 2],
           [12, 2, 6]],
          [[12, 9, 11],
           [12, 11, 3],
           [12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 6],
           [12, 6, 9]]],
         [[[3, 2, 7], [8, 9, 0], [0, 9, 1]],
          [[0, 3, 2],
           [0, 2, 1],
           [1, 2, 9],
           [9, 2, 7],
           [9, 7, 8],
           [3, 8, 7],
           [3, 0, 8]],
          [[7, 8, 9], [7, 9, 2], [2, 9, 1], [3, 8, 7], [8, 3, 0]]],
         [[[0, 9, 1], [0, 8, 9], [2, 10, 11], [2, 11, 3]],
          [[0, 11, 3], [0, 8, 11], [1, 10, 9], [1, 2, 10]],
          [[0, 8, 3],
           [3, 8, 11],
           [0, 3, 1],
           [1, 3, 2],
           [1, 2, 9],
           [2, 10, 9],
           [8, 9, 11],
           [9, 10, 11]],
          [[11, 12, 8],
           [8, 12, 0],
           [0, 12, 1],
           [1, 12, 9],
           [9, 12, 10],
           [10, 12, 2],
           [2, 12, 3],
           [3, 12, 11]],
          [[9, 12, 8],
           [1, 12, 9],
           [2, 12, 1],
           [10, 12, 2],
           [11, 12, 10],
           [3, 12, 11],
           [0, 12, 3],
           [8, 12, 0]]],
         [[[2, 7, 3], [6, 1, 10], [0, 10, 1], [10, 0, 8]],
          [[2, 6, 1], [7, 3, 10], [0, 10, 3], [10, 0, 8]],
          [[2, 1, 3],
           [0, 3, 1],
           [3, 0, 8],
           [3, 8, 7],
           [10, 7, 8],
           [7, 10, 6],
           [7, 6, 2],
           [1, 2, 6]],
          [[12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 8],
           [12, 8, 10],
           [12, 10, 6],
           [12, 6, 1]],
          [[12, 0, 8],
           [12, 8, 10],
           [12, 10, 7],
           [12, 7, 3],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 1],
           [12, 1, 0]]],
         [[[6, 1, 2], [3, 8, 11], [0, 8, 3]],
          [[1, 2, 3],
           [0, 1, 3],
           [8, 1, 0],
           [6, 1, 8],
           [11, 6, 8],
           [6, 11, 2],
           [11, 3, 2]],
          [[8, 11, 6], [1, 8, 6], [0, 8, 1], [6, 11, 2], [3, 2, 11]]],
         [[[8, 4, 11], [7, 3, 2], [5, 1, 0]],
          [[11, 8, 5], [11, 5, 1], [11, 1, 0], [11, 0, 4], [7, 3, 2]],
          [[8, 7, 11], [8, 2, 7], [8, 3, 2], [8, 4, 3], [5, 1, 0]],
          [[5, 1, 2], [5, 2, 7], [5, 7, 0], [7, 3, 0], [8, 4, 11]],
          [[5, 12, 0],
           [0, 12, 3],
           [3, 12, 4],
           [4, 12, 8],
           [8, 12, 11],
           [11, 12, 7],
           [7, 12, 2],
           [2, 12, 1],
           [1, 12, 5]],
          [[0, 12, 3],
           [3, 12, 7],
           [7, 12, 2],
           [2, 12, 1],
           [1, 12, 5],
           [5, 12, 8],
           [8, 12, 11],
           [11, 12, 4],
           [4, 12, 0]],
          [[2, 12, 3],
           [3, 12, 4],
           [4, 12, 0],
           [0, 12, 1],
           [1, 12, 5],
           [5, 12, 8],
           [8, 12, 11],
           [11, 12, 7],
           [7, 12, 2]],
          [[4, 3, 0], [8, 5, 1], [8, 1, 7], [8, 7, 11], [7, 1, 2]],
          [[0, 2, 3],
           [0, 1, 2],
           [5, 1, 0],
           [5, 0, 4],
           [5, 4, 8],
           [8, 4, 11],
           [4, 7, 11],
           [4, 3, 7],
           [3, 2, 7]]],
         [[[0, 5, 1], [4, 3, 8], [2, 8, 3], [8, 2, 10]],
          [[0, 4, 3], [5, 1, 8], [2, 8, 1], [8, 2, 10]],
          [[0, 3, 1],
           [2, 1, 3],
           [1, 2, 10],
           [1, 10, 5],
           [8, 5, 10],
           [5, 8, 4],
           [5, 4, 0],
           [3, 0, 4]],
          [[12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 10],
           [12, 10, 8],
           [12, 8, 4],
           [12, 4, 3]],
          [[12, 2, 10],
           [12, 10, 8],
           [12, 8, 5],
           [12, 5, 1],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 3],
           [12, 3, 2]]],
         [[[0, 5, 1], [9, 10, 6], [4, 11, 8], [2, 7, 3]],
          [[0, 5, 1], [2, 7, 3], [4, 11, 6], [6, 11, 10], [6, 8, 4], [6, 9, 8]],
          [[4, 11, 8], [2, 7, 3], [0, 5, 9], [0, 9, 10], [0, 6, 1], [0, 10, 6]],
          [[4, 11, 8], [9, 10, 6], [3, 5, 7], [0, 5, 3], [1, 2, 5], [2, 7, 5]],
          [[2, 7, 3], [9, 10, 6], [5, 11, 8], [1, 11, 5], [0, 4, 11], [0, 11, 1]],
          [[6, 9, 10], [0, 5, 1], [2, 11, 8], [2, 7, 11], [2, 8, 4], [2, 4, 3]],
          [[0, 5, 1], [4, 11, 8], [9, 7, 3], [9, 10, 7], [9, 3, 2], [9, 2, 6]],
          [[11, 8, 4],
           [7, 3, 12],
           [10, 7, 12],
           [9, 10, 12],
           [5, 9, 12],
           [0, 5, 12],
           [1, 0, 12],
           [6, 1, 12],
           [2, 6, 12],
           [3, 2, 12]],
          [[7, 3, 2],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 9],
           [12, 9, 10]],
          [[11, 8, 4],
           [9, 10, 12],
           [5, 9, 12],
           [0, 5, 12],
           [3, 0, 12],
           [7, 3, 12],
           [2, 7, 12],
           [1, 2, 12],
           [6, 1, 12],
           [10, 6, 12]],
          [[7, 3, 2],
           [1, 0, 12],
           [6, 1, 12],
           [10, 6, 12],
           [11, 10, 12],
           [4, 11, 12],
           [8, 4, 12],
           [9, 8, 12],
           [5, 9, 12],
           [0, 5, 12]],
          [[5, 1, 0],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 11],
           [12, 11, 8]],
          [[11, 8, 4],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 6],
           [12, 6, 9]],
          [[1, 0, 5],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 7],
           [12, 7, 3]],
          [[6, 9, 10],
           [5, 1, 12],
           [8, 5, 12],
           [11, 8, 12],
           [7, 11, 12],
           [2, 7, 12],
           [3, 2, 12],
           [4, 3, 12],
           [0, 4, 12],
           [1, 0, 12]],
          [[6, 9, 10],
           [11, 8, 12],
           [7, 11, 12],
           [2, 7, 12],
           [1, 2, 12],
           [5, 1, 12],
           [0, 5, 12],
           [3, 0, 12],
           [4, 3, 12],
           [8, 4, 12]],
          [[1, 0, 5],
           [3, 2, 12],
           [4, 3, 12],
           [8, 4, 12],
           [9, 8, 12],
           [6, 9, 12],
           [10, 6, 12],
           [11, 10, 12],
           [7, 11, 12],
           [2, 7, 12]],
          [[6, 9, 10],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 4],
           [12, 4, 11]],
          [[7, 3, 2],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 5],
           [12, 5, 1]],
          [[7, 3, 12],
           [10, 7, 12],
           [11, 10, 12],
           [4, 11, 12],
           [8, 4, 12],
           [9, 8, 12],
           [5, 9, 12],
           [0, 5, 12],
           [1, 0, 12],
           [6, 1, 12],
           [2, 6, 12],
           [3, 2, 12]],
          [[12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 9],
           [12, 9, 10],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0]],
          [[12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 11],
           [12, 11, 8],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2]],
          [[5, 1, 12],
           [8, 5, 12],
           [9, 8, 12],
           [6, 9, 12],
           [10, 6, 12],
           [11, 10, 12],
           [7, 11, 12],
           [2, 7, 12],
           [3, 2, 12],
           [4, 3, 12],
           [0, 4, 12],
           [1, 0, 12]],
          [[4, 11, 8], [6, 1, 2], [3, 0, 7], [10, 7, 0], [5, 10, 0], [10, 5, 9]],
          [[7, 3, 2], [5, 9, 8], [4, 1, 0], [1, 4, 11], [1, 11, 6], [10, 6, 11]],
          [[5, 1, 0], [7, 11, 10], [6, 3, 2], [3, 6, 9], [3, 9, 4], [8, 4, 9]],
          [[6, 9, 10], [4, 3, 0], [1, 2, 5], [8, 5, 2], [7, 8, 2], [8, 7, 11]],
          [[6, 1, 2],
           [5, 9, 8],
           [0, 5, 8],
           [4, 0, 8],
           [0, 4, 3],
           [7, 3, 4],
           [11, 7, 4],
           [7, 11, 10],
           [8, 10, 11],
           [10, 8, 9]],
          [[5, 9, 8],
           [3, 0, 4],
           [3, 4, 11],
           [3, 11, 7],
           [10, 7, 11],
           [7, 10, 6],
           [7, 6, 2],
           [1, 2, 6],
           [2, 1, 3],
           [0, 3, 1]],
          [[7, 11, 10],
           [1, 2, 6],
           [1, 6, 9],
           [1, 9, 5],
           [8, 5, 9],
           [5, 8, 4],
           [5, 4, 0],
           [3, 0, 4],
           [0, 3, 1],
           [2, 1, 3]],
          [[4, 3, 0],
           [7, 11, 10],
           [2, 7, 10],
           [6, 2, 10],
           [2, 6, 1],
           [5, 1, 6],
           [9, 5, 6],
           [8, 5, 9],
           [10, 8, 9],
           [8, 10, 11]]],
         [[[8, 5, 9], [3, 0, 4], [1, 2, 6]],
          [[6, 9, 8], [2, 6, 8], [1, 2, 8], [5, 1, 8], [3, 0, 4]],
          [[8, 4, 9], [4, 3, 9], [3, 0, 9], [0, 5, 9], [1, 2, 6]],
          [[3, 2, 6], [4, 3, 6], [1, 4, 6], [1, 0, 4], [8, 5, 9]],
          [[1, 12, 6],
           [0, 12, 1],
           [5, 12, 0],
           [9, 12, 5],
           [8, 12, 9],
           [4, 12, 8],
           [3, 12, 4],
           [2, 12, 3],
           [6, 12, 2]],
          [[0, 12, 1],
           [4, 12, 0],
           [3, 12, 4],
           [2, 12, 3],
           [6, 12, 2],
           [9, 12, 6],
           [8, 12, 9],
           [5, 12, 8],
           [1, 12, 5]],
          [[0, 12, 3],
           [5, 12, 0],
           [1, 12, 5],
           [2, 12, 1],
           [6, 12, 2],
           [9, 12, 6],
           [8, 12, 9],
           [4, 12, 8],
           [3, 12, 4]],
          [[1, 0, 5], [2, 6, 9], [4, 2, 9], [8, 4, 9], [3, 2, 4]],
          [[0, 3, 1],
           [3, 2, 1],
           [1, 2, 6],
           [5, 1, 6],
           [9, 5, 6],
           [8, 5, 9],
           [8, 4, 5],
           [4, 0, 5],
           [4, 3, 0]]],
         [[[3, 2, 7], [0, 4, 1], [11, 1, 4], [1, 11, 9]],
          [[3, 0, 4], [2, 7, 1], [11, 1, 7], [1, 11, 9]],
          [[3, 4, 7],
           [11, 7, 4],
           [7, 11, 9],
           [7, 9, 2],
           [1, 2, 9],
           [2, 1, 0],
           [2, 0, 3],
           [4, 3, 0]],
          [[12, 4, 3],
           [12, 3, 2],
           [12, 2, 7],
           [12, 7, 11],
           [12, 11, 9],
           [12, 9, 1],
           [12, 1, 0],
           [12, 0, 4]],
          [[12, 11, 9],
           [12, 9, 1],
           [12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 4],
           [12, 4, 11]]],
         [[[4, 3, 0], [1, 10, 9], [2, 10, 1]],
          [[3, 0, 1],
           [2, 3, 1],
           [10, 3, 2],
           [4, 3, 10],
           [9, 4, 10],
           [4, 9, 0],
           [9, 1, 0]],
          [[10, 9, 4], [3, 10, 4], [2, 10, 3], [4, 9, 0], [1, 0, 9]]],
         [[[4, 3, 0], [10, 7, 11], [2, 6, 1]],
          [[1, 0, 4], [6, 1, 4], [2, 6, 4], [3, 2, 4], [10, 7, 11]],
          [[4, 11, 0], [11, 10, 0], [10, 7, 0], [7, 3, 0], [2, 6, 1]],
          [[10, 6, 1], [11, 10, 1], [2, 11, 1], [2, 7, 11], [4, 3, 0]],
          [[2, 12, 1],
           [7, 12, 2],
           [3, 12, 7],
           [0, 12, 3],
           [4, 12, 0],
           [11, 12, 4],
           [10, 12, 11],
           [6, 12, 10],
           [1, 12, 6]],
          [[7, 12, 2],
           [11, 12, 7],
           [10, 12, 11],
           [6, 12, 10],
           [1, 12, 6],
           [0, 12, 1],
           [4, 12, 0],
           [3, 12, 4],
           [2, 12, 3]],
          [[7, 12, 10],
           [3, 12, 7],
           [2, 12, 3],
           [6, 12, 2],
           [1, 12, 6],
           [0, 12, 1],
           [4, 12, 0],
           [11, 12, 4],
           [10, 12, 11]],
          [[2, 7, 3], [6, 1, 0], [11, 6, 0], [4, 11, 0], [10, 6, 11]],
          [[7, 10, 2],
           [10, 6, 2],
           [2, 6, 1],
           [3, 2, 1],
           [0, 3, 1],
           [4, 3, 0],
           [4, 11, 3],
           [11, 7, 3],
           [11, 10, 7]]],
         [[[3, 0, 4], [1, 2, 6]], [[3, 6, 4], [6, 0, 4], [6, 1, 0], [3, 2, 6]]],
         [[[6, 2, 5], [5, 2, 0]]],
         [[[7, 10, 11], [0, 5, 2], [2, 5, 6]],
          [[2, 7, 10],
           [2, 10, 6],
           [6, 10, 5],
           [5, 10, 11],
           [5, 11, 0],
           [7, 0, 11],
           [7, 2, 0]],
          [[11, 0, 5], [11, 5, 10], [10, 5, 6], [7, 0, 11], [0, 7, 2]]],
         [[[0, 10, 2], [0, 5, 9], [0, 9, 10]]],
         [[[11, 7, 2], [5, 11, 2], [5, 2, 0], [9, 11, 5]]],
         [[[8, 2, 0], [8, 9, 6], [8, 6, 2]]],
         [[[10, 11, 7], [9, 6, 8], [2, 8, 6], [8, 2, 0]],
          [[10, 9, 6], [11, 7, 8], [2, 8, 7], [8, 2, 0]],
          [[10, 6, 7],
           [2, 7, 6],
           [7, 2, 0],
           [7, 0, 11],
           [8, 11, 0],
           [11, 8, 9],
           [11, 9, 10],
           [6, 10, 9]],
          [[12, 6, 10],
           [12, 10, 11],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 0],
           [12, 0, 8],
           [12, 8, 9],
           [12, 9, 6]],
          [[12, 2, 0],
           [12, 0, 8],
           [12, 8, 11],
           [12, 11, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 6],
           [12, 6, 2]]],
         [[[8, 2, 0], [8, 10, 2]]],
         [[[0, 8, 2], [11, 7, 2], [8, 11, 2]]],
         [[[8, 4, 11], [6, 2, 5], [5, 2, 0]],
          [[5, 8, 4],
           [5, 4, 0],
           [0, 4, 2],
           [2, 4, 11],
           [2, 11, 6],
           [8, 6, 11],
           [8, 5, 6]],
          [[11, 6, 2], [11, 2, 4], [4, 2, 0], [8, 6, 11], [6, 8, 5]]],
         [[[10, 4, 7], [10, 8, 4], [2, 0, 5], [2, 5, 6]],
          [[10, 5, 6], [10, 8, 5], [7, 0, 4], [7, 2, 0]],
          [[10, 8, 6],
           [6, 8, 5],
           [10, 6, 7],
           [7, 6, 2],
           [7, 2, 4],
           [2, 0, 4],
           [8, 4, 5],
           [4, 0, 5]],
          [[5, 12, 8],
           [8, 12, 10],
           [10, 12, 7],
           [7, 12, 4],
           [4, 12, 0],
           [0, 12, 2],
           [2, 12, 6],
           [6, 12, 5]],
          [[4, 12, 8],
           [7, 12, 4],
           [2, 12, 7],
           [0, 12, 2],
           [5, 12, 0],
           [6, 12, 5],
           [10, 12, 6],
           [8, 12, 10]]],
         [[[8, 4, 11], [5, 9, 0], [10, 0, 9], [0, 10, 2]],
          [[8, 5, 9], [4, 11, 0], [10, 0, 11], [0, 10, 2]],
          [[8, 9, 11],
           [10, 11, 9],
           [11, 10, 2],
           [11, 2, 4],
           [0, 4, 2],
           [4, 0, 5],
           [4, 5, 8],
           [9, 8, 5]],
          [[12, 9, 8],
           [12, 8, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 2],
           [12, 2, 0],
           [12, 0, 5],
           [12, 5, 9]],
          [[12, 10, 2],
           [12, 2, 0],
           [12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 9],
           [12, 9, 10]]],
         [[[9, 8, 5], [0, 7, 2], [4, 7, 0]],
          [[8, 5, 0],
           [4, 8, 0],
           [7, 8, 4],
           [9, 8, 7],
           [2, 9, 7],
           [9, 2, 5],
           [2, 0, 5]],
          [[7, 2, 9], [8, 7, 9], [4, 7, 8], [9, 2, 5], [0, 5, 2]]],
         [[[9, 6, 2], [4, 9, 2], [4, 2, 0], [4, 11, 9]]],
         [[[9, 6, 10], [7, 0, 4], [2, 0, 7]],
          [[6, 10, 7],
           [2, 6, 7],
           [0, 6, 2],
           [9, 6, 0],
           [4, 9, 0],
           [9, 4, 10],
           [4, 7, 10]],
          [[0, 4, 9], [6, 0, 9], [2, 0, 6], [9, 4, 10], [7, 10, 4]]],
         [[[0, 10, 2], [0, 4, 11], [0, 11, 10]]],
         [[[7, 2, 4], [4, 2, 0]]],
         [[[7, 5, 6], [7, 3, 0], [7, 0, 5]]],
         [[[6, 10, 11], [0, 6, 11], [0, 11, 3], [0, 5, 6]]],
         [[[0, 5, 3], [3, 5, 7], [5, 9, 7], [7, 9, 10]]],
         [[[11, 3, 9], [0, 5, 9], [3, 0, 9]]],
         [[[8, 9, 6], [3, 8, 6], [3, 6, 7], [0, 8, 3]]],
         [[[6, 10, 9], [8, 3, 0], [11, 3, 8]],
          [[10, 9, 8],
           [11, 10, 8],
           [3, 10, 11],
           [6, 10, 3],
           [0, 6, 3],
           [6, 0, 9],
           [0, 8, 9]],
          [[3, 0, 6], [10, 3, 6], [11, 3, 10], [6, 0, 9], [8, 9, 0]]],
         [[[8, 10, 0], [7, 3, 0], [10, 7, 0]]],
         [[[3, 0, 11], [11, 0, 8]]],
         [[[4, 11, 8], [3, 0, 7], [5, 7, 0], [7, 5, 6]],
          [[4, 3, 0], [11, 8, 7], [5, 7, 8], [7, 5, 6]],
          [[4, 0, 8],
           [5, 8, 0],
           [8, 5, 6],
           [8, 6, 11],
           [7, 11, 6],
           [11, 7, 3],
           [11, 3, 4],
           [0, 4, 3]],
          [[12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 6],
           [12, 6, 7],
           [12, 7, 3],
           [12, 3, 0]],
          [[12, 5, 6],
           [12, 6, 7],
           [12, 7, 11],
           [12, 11, 8],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 0],
           [12, 0, 5]]],
         [[[3, 0, 4], [8, 6, 10], [5, 6, 8]],
          [[0, 4, 8],
           [5, 0, 8],
           [6, 0, 5],
           [3, 0, 6],
           [10, 3, 6],
           [3, 10, 4],
           [10, 8, 4]],
          [[6, 10, 3], [0, 6, 3], [5, 6, 0], [3, 10, 4], [8, 4, 10]]],
         [[[0, 4, 3], [9, 8, 5], [11, 10, 7]],
          [[7, 3, 0], [10, 7, 0], [11, 10, 0], [4, 11, 0], [9, 8, 5]],
          [[0, 5, 3], [5, 9, 3], [9, 8, 3], [8, 4, 3], [11, 10, 7]],
          [[9, 10, 7], [5, 9, 7], [11, 5, 7], [11, 8, 5], [0, 4, 3]],
          [[11, 12, 7],
           [8, 12, 11],
           [4, 12, 8],
           [3, 12, 4],
           [0, 12, 3],
           [5, 12, 0],
           [9, 12, 5],
           [10, 12, 9],
           [7, 12, 10]],
          [[8, 12, 11],
           [5, 12, 8],
           [9, 12, 5],
           [10, 12, 9],
           [7, 12, 10],
           [3, 12, 7],
           [0, 12, 3],
           [4, 12, 0],
           [11, 12, 4]],
          [[8, 12, 9],
           [4, 12, 8],
           [11, 12, 4],
           [10, 12, 11],
           [7, 12, 10],
           [3, 12, 7],
           [0, 12, 3],
           [5, 12, 0],
           [9, 12, 5]],
          [[11, 8, 4], [10, 7, 3], [5, 10, 3], [0, 5, 3], [9, 10, 5]],
          [[8, 9, 11],
           [9, 10, 11],
           [11, 10, 7],
           [4, 11, 7],
           [3, 4, 7],
           [0, 4, 3],
           [0, 5, 4],
           [5, 8, 4],
           [5, 9, 8]]],
         [[[8, 5, 9], [0, 4, 3]], [[8, 3, 9], [3, 5, 9], [3, 0, 5], [8, 4, 3]]],
         [[[0, 4, 3], [7, 9, 6], [11, 9, 7]],
          [[4, 3, 7],
           [11, 4, 7],
           [9, 4, 11],
           [0, 4, 9],
           [6, 0, 9],
           [0, 6, 3],
           [6, 7, 3]],
          [[9, 6, 0], [4, 9, 0], [11, 9, 4], [0, 6, 3], [7, 3, 6]]],
         [[[6, 10, 9], [4, 3, 0]],
          [[4, 3, 10], [6, 10, 3], [3, 0, 6], [9, 6, 0], [0, 4, 9], [9, 10, 4]]],
         [[[0, 4, 3], [10, 7, 11]], [[0, 10, 3], [0, 4, 10], [4, 11, 10], [10, 7, 3]]],
         [[[3, 0, 4]]],
         [[[4, 0, 3]]],
         [[[0, 3, 4], [10, 11, 7]], [[0, 10, 4], [0, 3, 10], [3, 7, 10], [10, 11, 4]]],
         [[[4, 0, 3], [10, 6, 9]],
          [[0, 6, 9], [6, 0, 3], [3, 10, 6], [10, 3, 4], [4, 9, 10], [9, 0, 4]]],
         [[[3, 4, 0], [6, 9, 7], [7, 9, 11]],
          [[7, 3, 4],
           [7, 4, 11],
           [11, 4, 9],
           [9, 4, 0],
           [9, 0, 6],
           [3, 6, 0],
           [3, 7, 6]],
          [[0, 6, 9], [0, 9, 4], [4, 9, 11], [3, 6, 0], [6, 3, 7]]],
         [[[3, 4, 0], [9, 5, 8]], [[3, 9, 0], [3, 4, 9], [4, 8, 9], [9, 5, 0]]],
         [[[3, 4, 0], [5, 8, 9], [7, 10, 11]],
          [[0, 3, 7], [0, 7, 10], [0, 10, 11], [0, 11, 4], [5, 8, 9]],
          [[3, 5, 0], [3, 9, 5], [3, 8, 9], [3, 4, 8], [7, 10, 11]],
          [[7, 10, 9], [7, 9, 5], [7, 5, 11], [5, 8, 11], [3, 4, 0]],
          [[7, 12, 11],
           [11, 12, 8],
           [8, 12, 4],
           [4, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 7]],
          [[11, 12, 8],
           [8, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 4],
           [4, 12, 11]],
          [[9, 12, 8],
           [8, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 9]],
          [[4, 8, 11], [3, 7, 10], [3, 10, 5], [3, 5, 0], [5, 10, 9]],
          [[11, 9, 8],
           [11, 10, 9],
           [7, 10, 11],
           [7, 11, 4],
           [7, 4, 3],
           [3, 4, 0],
           [4, 5, 0],
           [4, 8, 5],
           [8, 9, 5]]],
         [[[4, 0, 3], [10, 6, 8], [8, 6, 5]],
          [[8, 4, 0],
           [8, 0, 5],
           [5, 0, 6],
           [6, 0, 3],
           [6, 3, 10],
           [4, 10, 3],
           [4, 8, 10]],
          [[3, 10, 6], [3, 6, 0], [0, 6, 5], [4, 10, 3], [10, 4, 8]]],
         [[[4, 0, 3], [8, 11, 5], [7, 5, 11], [5, 7, 6]],
          [[4, 8, 11], [0, 3, 5], [7, 5, 3], [5, 7, 6]],
          [[4, 11, 3],
           [7, 3, 11],
           [3, 7, 6],
           [3, 6, 0],
           [5, 0, 6],
           [0, 5, 8],
           [0, 8, 4],
           [11, 4, 8]],
          [[12, 11, 4],
           [12, 4, 0],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 6],
           [12, 6, 5],
           [12, 5, 8],
           [12, 8, 11]],
          [[12, 7, 6],
           [12, 6, 5],
           [12, 5, 0],
           [12, 0, 3],
           [12, 3, 4],
           [12, 4, 8],
           [12, 8, 11],
           [12, 11, 7]]],
         [[[0, 3, 8], [8, 3, 11]]],
         [[[0, 10, 8], [0, 3, 7], [0, 7, 10]]],
         [[[9, 10, 6], [0, 3, 8], [8, 3, 11]],
          [[8, 9, 10],
           [8, 10, 11],
           [11, 10, 3],
           [3, 10, 6],
           [3, 6, 0],
           [9, 0, 6],
           [9, 8, 0]],
          [[6, 0, 3], [6, 3, 10], [10, 3, 11], [9, 0, 6], [0, 9, 8]]],
         [[[6, 9, 8], [3, 6, 8], [3, 8, 0], [7, 6, 3]]],
         [[[9, 3, 11], [9, 5, 0], [9, 0, 3]]],
         [[[0, 3, 5], [5, 3, 9], [3, 7, 9], [9, 7, 10]]],
         [[[11, 10, 6], [0, 11, 6], [0, 6, 5], [0, 3, 11]]],
         [[[5, 7, 6], [5, 0, 3], [5, 3, 7]]],
         [[[2, 7, 0], [0, 7, 4]]],
         [[[10, 0, 2], [10, 11, 4], [10, 4, 0]]],
         [[[10, 6, 9], [4, 0, 7], [7, 0, 2]],
          [[7, 10, 6],
           [7, 6, 2],
           [2, 6, 0],
           [0, 6, 9],
           [0, 9, 4],
           [10, 4, 9],
           [10, 7, 4]],
          [[9, 4, 0], [9, 0, 6], [6, 0, 2], [10, 4, 9], [4, 10, 7]]],
         [[[11, 4, 0], [6, 11, 0], [6, 0, 2], [6, 9, 11]]],
         [[[5, 8, 9], [2, 7, 0], [0, 7, 4]],
          [[0, 5, 8],
           [0, 8, 4],
           [4, 8, 7],
           [7, 8, 9],
           [7, 9, 2],
           [5, 2, 9],
           [5, 0, 2]],
          [[9, 2, 7], [9, 7, 8], [8, 7, 4], [5, 2, 9], [2, 5, 0]]],
         [[[8, 9, 5], [11, 4, 10], [0, 10, 4], [10, 0, 2]],
          [[8, 11, 4], [9, 5, 10], [0, 10, 5], [10, 0, 2]],
          [[8, 4, 5],
           [0, 5, 4],
           [5, 0, 2],
           [5, 2, 9],
           [10, 9, 2],
           [9, 10, 11],
           [9, 11, 8],
           [4, 8, 11]],
          [[12, 4, 8],
           [12, 8, 9],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 2],
           [12, 2, 10],
           [12, 10, 11],
           [12, 11, 4]],
          [[12, 0, 2],
           [12, 2, 10],
           [12, 10, 9],
           [12, 9, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 4],
           [12, 4, 0]]],
         [[[6, 8, 10], [6, 5, 8], [7, 4, 0], [7, 0, 2]],
          [[6, 0, 2], [6, 5, 0], [10, 4, 8], [10, 7, 4]],
          [[6, 5, 2],
           [2, 5, 0],
           [6, 2, 10],
           [10, 2, 7],
           [10, 7, 8],
           [7, 4, 8],
           [5, 8, 0],
           [8, 4, 0]],
          [[0, 12, 5],
           [5, 12, 6],
           [6, 12, 10],
           [10, 12, 8],
           [8, 12, 4],
           [4, 12, 7],
           [7, 12, 2],
           [2, 12, 0]],
          [[8, 12, 5],
           [10, 12, 8],
           [7, 12, 10],
           [4, 12, 7],
           [0, 12, 4],
           [2, 12, 0],
           [6, 12, 2],
           [5, 12, 6]]],
         [[[11, 4, 8], [5, 2, 6], [0, 2, 5]],
          [[4, 8, 5],
           [0, 4, 5],
           [2, 4, 0],
           [11, 4, 2],
           [6, 11, 2],
           [11, 6, 8],
           [6, 5, 8]],
          [[2, 6, 11], [4, 2, 11], [0, 2, 4], [11, 6, 8], [5, 8, 6]]],
         [[[2, 8, 0], [2, 7, 11], [2, 11, 8]]],
         [[[10, 0, 2], [10, 8, 0]]],
         [[[10, 6, 9], [7, 11, 2], [8, 2, 11], [2, 8, 0]],
          [[10, 7, 11], [6, 9, 2], [8, 2, 9], [2, 8, 0]],
          [[10, 11, 9],
           [8, 9, 11],
           [9, 8, 0],
           [9, 0, 6],
           [2, 6, 0],
           [6, 2, 7],
           [6, 7, 10],
           [11, 10, 7]],
          [[12, 11, 10],
           [12, 10, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 0],
           [12, 0, 2],
           [12, 2, 7],
           [12, 7, 11]],
          [[12, 8, 0],
           [12, 0, 2],
           [12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 11],
           [12, 11, 8]]],
         [[[2, 8, 0], [2, 6, 9], [2, 9, 8]]],
         [[[9, 5, 0], [7, 9, 0], [7, 0, 2], [11, 9, 7]]],
         [[[2, 10, 0], [9, 5, 0], [10, 9, 0]]],
         [[[10, 7, 11], [5, 0, 6], [6, 0, 2]],
          [[6, 10, 7],
           [6, 7, 2],
           [2, 7, 0],
           [0, 7, 11],
           [0, 11, 5],
           [10, 5, 11],
           [10, 6, 5]],
          [[11, 5, 0], [11, 0, 7], [7, 0, 2], [10, 5, 11], [5, 10, 6]]],
         [[[2, 5, 0], [6, 5, 2]]],
         [[[6, 2, 1], [4, 0, 3]], [[6, 4, 1], [6, 2, 4], [2, 3, 4], [4, 0, 1]]],
         [[[11, 7, 10], [6, 2, 1], [4, 0, 3]],
          [[10, 11, 4], [10, 4, 0], [10, 0, 3], [10, 3, 7], [6, 2, 1]],
          [[11, 6, 10], [11, 1, 6], [11, 2, 1], [11, 7, 2], [4, 0, 3]],
          [[4, 0, 1], [4, 1, 6], [4, 6, 3], [6, 2, 3], [11, 7, 10]],
          [[4, 12, 3],
           [3, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 4]],
          [[3, 12, 2],
           [2, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 7],
           [7, 12, 3]],
          [[1, 12, 2],
           [2, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 6],
           [6, 12, 1]],
          [[7, 2, 3], [11, 4, 0], [11, 0, 6], [11, 6, 10], [6, 0, 1]],
          [[3, 1, 2],
           [3, 0, 1],
           [4, 0, 3],
           [4, 3, 7],
           [4, 7, 11],
           [11, 7, 10],
           [7, 6, 10],
           [7, 2, 6],
           [2, 1, 6]]],
         [[[0, 3, 4], [9, 10, 1], [1, 10, 2]],
          [[1, 0, 3],
           [1, 3, 2],
           [2, 3, 10],
           [10, 3, 4],
           [10, 4, 9],
           [0, 9, 4],
           [0, 1, 9]],
          [[4, 9, 10], [4, 10, 3], [3, 10, 2], [0, 9, 4], [9, 0, 1]]],
         [[[3, 4, 0], [7, 2, 11], [1, 11, 2], [11, 1, 9]],
          [[3, 7, 2], [4, 0, 11], [1, 11, 0], [11, 1, 9]],
          [[3, 2, 0],
           [1, 0, 2],
           [0, 1, 9],
           [0, 9, 4],
           [11, 4, 9],
           [4, 11, 7],
           [4, 7, 3],
           [2, 3, 7]],
          [[12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 9],
           [12, 9, 11],
           [12, 11, 7],
           [12, 7, 2]],
          [[12, 1, 9],
           [12, 9, 11],
           [12, 11, 4],
           [12, 4, 0],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 2],
           [12, 2, 1]]],
         [[[9, 5, 8], [4, 0, 3], [6, 2, 1]],
          [[8, 9, 6], [8, 6, 2], [8, 2, 1], [8, 1, 5], [4, 0, 3]],
          [[9, 4, 8], [9, 3, 4], [9, 0, 3], [9, 5, 0], [6, 2, 1]],
          [[6, 2, 3], [6, 3, 4], [6, 4, 1], [4, 0, 1], [9, 5, 8]],
          [[6, 12, 1],
           [1, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 8],
           [8, 12, 4],
           [4, 12, 3],
           [3, 12, 2],
           [2, 12, 6]],
          [[1, 12, 0],
           [0, 12, 4],
           [4, 12, 3],
           [3, 12, 2],
           [2, 12, 6],
           [6, 12, 9],
           [9, 12, 8],
           [8, 12, 5],
           [5, 12, 1]],
          [[3, 12, 0],
           [0, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 6],
           [6, 12, 9],
           [9, 12, 8],
           [8, 12, 4],
           [4, 12, 3]],
          [[5, 0, 1], [9, 6, 2], [9, 2, 4], [9, 4, 8], [4, 2, 3]],
          [[1, 3, 0],
           [1, 2, 3],
           [6, 2, 1],
           [6, 1, 5],
           [6, 5, 9],
           [9, 5, 8],
           [5, 4, 8],
           [5, 0, 4],
           [0, 3, 4]]],
         [[[3, 4, 0], [8, 9, 5], [7, 10, 11], [1, 6, 2]],
          [[3, 4, 0], [1, 6, 2], [7, 10, 5], [5, 10, 9], [5, 11, 7], [5, 8, 11]],
          [[7, 10, 11], [1, 6, 2], [3, 4, 8], [3, 8, 9], [3, 5, 0], [3, 9, 5]],
          [[7, 10, 11], [8, 9, 5], [2, 4, 6], [3, 4, 2], [0, 1, 4], [1, 6, 4]],
          [[1, 6, 2], [8, 9, 5], [4, 10, 11], [0, 10, 4], [3, 7, 10], [3, 10, 0]],
          [[5, 8, 9], [3, 4, 0], [1, 10, 11], [1, 6, 10], [1, 11, 7], [1, 7, 2]],
          [[3, 4, 0], [7, 10, 11], [8, 6, 2], [8, 9, 6], [8, 2, 1], [8, 1, 5]],
          [[10, 11, 7],
           [6, 2, 12],
           [9, 6, 12],
           [8, 9, 12],
           [4, 8, 12],
           [3, 4, 12],
           [0, 3, 12],
           [5, 0, 12],
           [1, 5, 12],
           [2, 1, 12]],
          [[6, 2, 1],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 8],
           [12, 8, 9]],
          [[10, 11, 7],
           [8, 9, 12],
           [4, 8, 12],
           [3, 4, 12],
           [2, 3, 12],
           [6, 2, 12],
           [1, 6, 12],
           [0, 1, 12],
           [5, 0, 12],
           [9, 5, 12]],
          [[6, 2, 1],
           [0, 3, 12],
           [5, 0, 12],
           [9, 5, 12],
           [10, 9, 12],
           [7, 10, 12],
           [11, 7, 12],
           [8, 11, 12],
           [4, 8, 12],
           [3, 4, 12]],
          [[4, 0, 3],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 10],
           [12, 10, 11]],
          [[10, 11, 7],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 5],
           [12, 5, 8]],
          [[0, 3, 4],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 6],
           [12, 6, 2]],
          [[5, 8, 9],
           [4, 0, 12],
           [11, 4, 12],
           [10, 11, 12],
           [6, 10, 12],
           [1, 6, 12],
           [2, 1, 12],
           [7, 2, 12],
           [3, 7, 12],
           [0, 3, 12]],
          [[5, 8, 9],
           [10, 11, 12],
           [6, 10, 12],
           [1, 6, 12],
           [0, 1, 12],
           [4, 0, 12],
           [3, 4, 12],
           [2, 3, 12],
           [7, 2, 12],
           [11, 7, 12]],
          [[0, 3, 4],
           [2, 1, 12],
           [7, 2, 12],
           [11, 7, 12],
           [8, 11, 12],
           [5, 8, 12],
           [9, 5, 12],
           [10, 9, 12],
           [6, 10, 12],
           [1, 6, 12]],
          [[5, 8, 9],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 7],
           [12, 7, 10]],
          [[6, 2, 1],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 4],
           [12, 4, 0]],
          [[6, 2, 12],
           [9, 6, 12],
           [10, 9, 12],
           [7, 10, 12],
           [11, 7, 12],
           [8, 11, 12],
           [4, 8, 12],
           [3, 4, 12],
           [0, 3, 12],
           [5, 0, 12],
           [1, 5, 12],
           [2, 1, 12]],
          [[12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 8],
           [12, 8, 9],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3]],
          [[12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 10],
           [12, 10, 11],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1]],
          [[4, 0, 12],
           [11, 4, 12],
           [8, 11, 12],
           [5, 8, 12],
           [9, 5, 12],
           [10, 9, 12],
           [6, 10, 12],
           [1, 6, 12],
           [2, 1, 12],
           [7, 2, 12],
           [3, 7, 12],
           [0, 3, 12]],
          [[7, 10, 11], [5, 0, 1], [2, 3, 6], [9, 6, 3], [4, 9, 3], [9, 4, 8]],
          [[6, 2, 1], [4, 8, 11], [7, 0, 3], [0, 7, 10], [0, 10, 5], [9, 5, 10]],
          [[4, 0, 3], [6, 10, 9], [5, 2, 1], [2, 5, 8], [2, 8, 7], [11, 7, 8]],
          [[5, 8, 9], [7, 2, 3], [0, 1, 4], [11, 4, 1], [6, 11, 1], [11, 6, 10]],
          [[5, 0, 1],
           [4, 8, 11],
           [3, 4, 11],
           [7, 3, 11],
           [3, 7, 2],
           [6, 2, 7],
           [10, 6, 7],
           [6, 10, 9],
           [11, 9, 10],
           [9, 11, 8]],
          [[4, 8, 11],
           [2, 3, 7],
           [2, 7, 10],
           [2, 10, 6],
           [9, 6, 10],
           [6, 9, 5],
           [6, 5, 1],
           [0, 1, 5],
           [1, 0, 2],
           [3, 2, 0]],
          [[6, 10, 9],
           [0, 1, 5],
           [0, 5, 8],
           [0, 8, 4],
           [11, 4, 8],
           [4, 11, 7],
           [4, 7, 3],
           [2, 3, 7],
           [3, 2, 0],
           [1, 0, 2]],
          [[7, 2, 3],
           [6, 10, 9],
           [1, 6, 9],
           [5, 1, 9],
           [1, 5, 0],
           [4, 0, 5],
           [8, 4, 5],
           [11, 4, 8],
           [9, 11, 8],
           [11, 9, 10]]],
         [[[0, 3, 4], [1, 5, 2], [8, 2, 5], [2, 8, 10]],
          [[0, 1, 5], [3, 4, 2], [8, 2, 4], [2, 8, 10]],
          [[0, 5, 4],
           [8, 4, 5],
           [4, 8, 10],
           [4, 10, 3],
           [2, 3, 10],
           [3, 2, 1],
           [3, 1, 0],
           [5, 0, 1]],
          [[12, 5, 0],
           [12, 0, 3],
           [12, 3, 4],
           [12, 4, 8],
           [12, 8, 10],
           [12, 10, 2],
           [12, 2, 1],
           [12, 1, 5]],
          [[12, 8, 10],
           [12, 10, 2],
           [12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 5],
           [12, 5, 8]]],
         [[[2, 3, 7], [11, 4, 8], [1, 5, 0]],
          [[7, 2, 1], [7, 1, 5], [7, 5, 0], [7, 0, 3], [11, 4, 8]],
          [[2, 11, 7], [2, 8, 11], [2, 4, 8], [2, 3, 4], [1, 5, 0]],
          [[1, 5, 8], [1, 8, 11], [1, 11, 0], [11, 4, 0], [2, 3, 7]],
          [[1, 12, 0],
           [0, 12, 4],
           [4, 12, 3],
           [3, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 8],
           [8, 12, 5],
           [5, 12, 1]],
          [[0, 12, 4],
           [4, 12, 11],
           [11, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 3],
           [3, 12, 0]],
          [[8, 12, 4],
           [4, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 8]],
          [[3, 4, 0], [2, 1, 5], [2, 5, 11], [2, 11, 7], [11, 5, 8]],
          [[0, 8, 4],
           [0, 5, 8],
           [1, 5, 0],
           [1, 0, 3],
           [1, 3, 2],
           [2, 3, 7],
           [3, 11, 7],
           [3, 4, 11],
           [4, 8, 11]]],
         [[[2, 1, 6], [11, 8, 3], [3, 8, 0]],
          [[3, 2, 1],
           [3, 1, 0],
           [0, 1, 8],
           [8, 1, 6],
           [8, 6, 11],
           [2, 11, 6],
           [2, 3, 11]],
          [[6, 11, 8], [6, 8, 1], [1, 8, 0], [2, 11, 6], [11, 2, 3]]],
         [[[2, 1, 6], [3, 7, 0], [10, 0, 7], [0, 10, 8]],
          [[2, 3, 7], [1, 6, 0], [10, 0, 6], [0, 10, 8]],
          [[2, 7, 6],
           [10, 6, 7],
           [6, 10, 8],
           [6, 8, 1],
           [0, 1, 8],
           [1, 0, 3],
           [1, 3, 2],
           [7, 2, 3]],
          [[12, 7, 2],
           [12, 2, 1],
           [12, 1, 6],
           [12, 6, 10],
           [12, 10, 8],
           [12, 8, 0],
           [12, 0, 3],
           [12, 3, 7]],
          [[12, 10, 8],
           [12, 8, 0],
           [12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 7],
           [12, 7, 10]]],
         [[[8, 3, 11], [8, 0, 3], [10, 2, 1], [10, 1, 9]],
          [[8, 1, 9], [8, 0, 1], [11, 2, 3], [11, 10, 2]],
          [[8, 0, 9],
           [9, 0, 1],
           [8, 9, 11],
           [11, 9, 10],
           [11, 10, 3],
           [10, 2, 3],
           [0, 3, 1],
           [3, 2, 1]],
          [[1, 12, 0],
           [0, 12, 8],
           [8, 12, 11],
           [11, 12, 3],
           [3, 12, 2],
           [2, 12, 10],
           [10, 12, 9],
           [9, 12, 1]],
          [[3, 12, 0],
           [11, 12, 3],
           [10, 12, 11],
           [2, 12, 10],
           [1, 12, 2],
           [9, 12, 1],
           [8, 12, 9],
           [0, 12, 8]]],
         [[[7, 2, 3], [0, 9, 8], [1, 9, 0]],
          [[2, 3, 0],
           [1, 2, 0],
           [9, 2, 1],
           [7, 2, 9],
           [8, 7, 9],
           [7, 8, 3],
           [8, 0, 3]],
          [[9, 8, 7], [2, 9, 7], [1, 9, 2], [7, 8, 3], [0, 3, 8]]],
         [[[1, 6, 2], [5, 0, 9], [3, 9, 0], [9, 3, 11]],
          [[1, 5, 0], [6, 2, 9], [3, 9, 2], [9, 3, 11]],
          [[1, 0, 2],
           [3, 2, 0],
           [2, 3, 11],
           [2, 11, 6],
           [9, 6, 11],
           [6, 9, 5],
           [6, 5, 1],
           [0, 1, 5]],
          [[12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 11],
           [12, 11, 9],
           [12, 9, 5],
           [12, 5, 0]],
          [[12, 3, 11],
           [12, 11, 9],
           [12, 9, 6],
           [12, 6, 2],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 0],
           [12, 0, 3]]],
         [[[7, 2, 3], [0, 1, 5], [10, 9, 6]],
          [[3, 7, 10], [3, 10, 9], [3, 9, 6], [3, 6, 2], [0, 1, 5]],
          [[7, 0, 3], [7, 5, 0], [7, 1, 5], [7, 2, 1], [10, 9, 6]],
          [[10, 9, 5], [10, 5, 0], [10, 0, 6], [0, 1, 6], [7, 2, 3]],
          [[10, 12, 6],
           [6, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 10]],
          [[6, 12, 1],
           [1, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 2],
           [2, 12, 6]],
          [[5, 12, 1],
           [1, 12, 2],
           [2, 12, 6],
           [6, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 5]],
          [[2, 1, 6], [7, 10, 9], [7, 9, 0], [7, 0, 3], [0, 9, 5]],
          [[6, 5, 1],
           [6, 9, 5],
           [10, 9, 6],
           [10, 6, 2],
           [10, 2, 7],
           [7, 2, 3],
           [2, 0, 3],
           [2, 1, 0],
           [1, 5, 0]]],
         [[[0, 1, 5], [11, 10, 3], [3, 10, 2]],
          [[3, 0, 1],
           [3, 1, 2],
           [2, 1, 10],
           [10, 1, 5],
           [10, 5, 11],
           [0, 11, 5],
           [0, 3, 11]],
          [[5, 11, 10], [5, 10, 1], [1, 10, 2], [0, 11, 5], [11, 0, 3]]],
         [[[0, 1, 5], [2, 3, 7]], [[0, 7, 5], [7, 1, 5], [7, 2, 1], [0, 3, 7]]],
         [[[4, 6, 7], [4, 0, 1], [4, 1, 6]]],
         [[[10, 11, 6], [6, 11, 1], [11, 4, 1], [1, 4, 0]]],
         [[[4, 0, 1], [10, 4, 1], [10, 1, 9], [7, 4, 10]]],
         [[[9, 11, 1], [4, 0, 1], [11, 4, 1]]],
         [[[5, 8, 9], [0, 1, 4], [6, 4, 1], [4, 6, 7]],
          [[5, 0, 1], [8, 9, 4], [6, 4, 9], [4, 6, 7]],
          [[5, 1, 9],
           [6, 9, 1],
           [9, 6, 7],
           [9, 7, 8],
           [4, 8, 7],
           [8, 4, 0],
           [8, 0, 5],
           [1, 5, 0]],
          [[12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 7],
           [12, 7, 4],
           [12, 4, 0],
           [12, 0, 1]],
          [[12, 6, 7],
           [12, 7, 4],
           [12, 4, 8],
           [12, 8, 9],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 1],
           [12, 1, 6]]],
         [[[1, 5, 0], [4, 8, 11], [6, 10, 9]],
          [[0, 1, 6], [0, 6, 10], [0, 10, 9], [0, 9, 5], [4, 8, 11]],
          [[1, 4, 0], [1, 11, 4], [1, 8, 11], [1, 5, 8], [6, 10, 9]],
          [[6, 10, 11], [6, 11, 4], [6, 4, 9], [4, 8, 9], [1, 5, 0]],
          [[6, 12, 9],
           [9, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 0],
           [0, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 6]],
          [[9, 12, 8],
           [8, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 5],
           [5, 12, 9]],
          [[11, 12, 8],
           [8, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 4],
           [4, 12, 11]],
          [[5, 8, 9], [1, 6, 10], [1, 10, 4], [1, 4, 0], [4, 10, 11]],
          [[9, 11, 8],
           [9, 10, 11],
           [6, 10, 9],
           [6, 9, 5],
           [6, 5, 1],
           [1, 5, 0],
           [5, 4, 0],
           [5, 8, 4],
           [8, 11, 4]]],
         [[[5, 0, 1], [10, 7, 8], [8, 7, 4]],
          [[8, 5, 0],
           [8, 0, 4],
           [4, 0, 7],
           [7, 0, 1],
           [7, 1, 10],
           [5, 10, 1],
           [5, 8, 10]],
          [[1, 10, 7], [1, 7, 0], [0, 7, 4], [5, 10, 1], [10, 5, 8]]],
         [[[11, 4, 8], [1, 5, 0]], [[11, 1, 8], [11, 4, 1], [4, 0, 1], [1, 5, 8]]],
         [[[7, 11, 8], [1, 7, 8], [1, 8, 0], [1, 6, 7]]],
         [[[8, 0, 10], [1, 6, 10], [0, 1, 10]]],
         [[[11, 10, 7], [0, 1, 8], [8, 1, 9]],
          [[8, 11, 10],
           [8, 10, 9],
           [9, 10, 1],
           [1, 10, 7],
           [1, 7, 0],
           [11, 0, 7],
           [11, 8, 0]],
          [[7, 0, 1], [7, 1, 10], [10, 1, 9], [11, 0, 7], [0, 11, 8]]],
         [[[0, 1, 8], [8, 1, 9]]],
         [[[0, 1, 5], [9, 7, 11], [6, 7, 9]],
          [[1, 5, 9],
           [6, 1, 9],
           [7, 1, 6],
           [0, 1, 7],
           [11, 0, 7],
           [0, 11, 5],
           [11, 9, 5]],
          [[7, 11, 0], [1, 7, 0], [6, 7, 1], [0, 11, 5], [9, 5, 11]]],
         [[[10, 9, 6], [0, 1, 5]], [[10, 0, 6], [10, 9, 0], [9, 5, 0], [0, 1, 6]]],
         [[[5, 0, 1], [10, 7, 11]],
          [[0, 7, 11], [7, 0, 1], [1, 10, 7], [10, 1, 5], [5, 11, 10], [11, 0, 5]]],
         [[[5, 0, 1]]],
         [[[3, 4, 1], [1, 4, 5]]],
         [[[11, 7, 10], [5, 1, 4], [4, 1, 3]],
          [[4, 11, 7],
           [4, 7, 3],
           [3, 7, 1],
           [1, 7, 10],
           [1, 10, 5],
           [11, 5, 10],
           [11, 4, 5]],
          [[10, 5, 1], [10, 1, 7], [7, 1, 3], [11, 5, 10], [5, 11, 4]]],
         [[[6, 9, 10], [3, 4, 1], [1, 4, 5]],
          [[1, 6, 9],
           [1, 9, 5],
           [5, 9, 4],
           [4, 9, 10],
           [4, 10, 3],
           [6, 3, 10],
           [6, 1, 3]],
          [[10, 3, 4], [10, 4, 9], [9, 4, 5], [6, 3, 10], [3, 6, 1]]],
         [[[7, 9, 11], [7, 6, 9], [4, 5, 1], [4, 1, 3]],
          [[7, 1, 3], [7, 6, 1], [11, 5, 9], [11, 4, 5]],
          [[7, 6, 3],
           [3, 6, 1],
           [7, 3, 11],
           [11, 3, 4],
           [11, 4, 9],
           [4, 5, 9],
           [6, 9, 1],
           [9, 5, 1]],
          [[1, 12, 6],
           [6, 12, 7],
           [7, 12, 11],
           [11, 12, 9],
           [9, 12, 5],
           [5, 12, 4],
           [4, 12, 3],
           [3, 12, 1]],
          [[9, 12, 6],
           [11, 12, 9],
           [4, 12, 11],
           [5, 12, 4],
           [1, 12, 5],
           [3, 12, 1],
           [7, 12, 3],
           [6, 12, 7]]],
         [[[3, 9, 1], [3, 4, 8], [3, 8, 9]]],
         [[[11, 7, 10], [4, 8, 3], [9, 3, 8], [3, 9, 1]],
          [[11, 4, 8], [7, 10, 3], [9, 3, 10], [3, 9, 1]],
          [[11, 8, 10],
           [9, 10, 8],
           [10, 9, 1],
           [10, 1, 7],
           [3, 7, 1],
           [7, 3, 4],
           [7, 4, 11],
           [8, 11, 4]],
          [[12, 8, 11],
           [12, 11, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 1],
           [12, 1, 3],
           [12, 3, 4],
           [12, 4, 8]],
          [[12, 9, 1],
           [12, 1, 3],
           [12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 8],
           [12, 8, 9]]],
         [[[3, 4, 8], [6, 3, 8], [6, 8, 10], [1, 3, 6]]],
         [[[8, 11, 4], [3, 6, 1], [7, 6, 3]],
          [[11, 4, 3],
           [7, 11, 3],
           [6, 11, 7],
           [8, 11, 6],
           [1, 8, 6],
           [8, 1, 4],
           [1, 3, 4]],
          [[6, 1, 8], [11, 6, 8], [7, 6, 11], [8, 1, 4], [3, 4, 1]]],
         [[[11, 1, 3], [11, 8, 5], [11, 5, 1]]],
         [[[8, 5, 1], [7, 8, 1], [7, 1, 3], [7, 10, 8]]],
         [[[9, 10, 6], [8, 5, 11], [1, 11, 5], [11, 1, 3]],
          [[9, 8, 5], [10, 6, 11], [1, 11, 6], [11, 1, 3]],
          [[9, 5, 6],
           [1, 6, 5],
           [6, 1, 3],
           [6, 3, 10],
           [11, 10, 3],
           [10, 11, 8],
           [10, 8, 9],
           [5, 9, 8]],
          [[12, 5, 9],
           [12, 9, 10],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 3],
           [12, 3, 11],
           [12, 11, 8],
           [12, 8, 5]],
          [[12, 1, 3],
           [12, 3, 11],
           [12, 11, 10],
           [12, 10, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 5],
           [12, 5, 1]]],
         [[[8, 5, 9], [6, 3, 7], [1, 3, 6]],
          [[5, 9, 6],
           [1, 5, 6],
           [3, 5, 1],
           [8, 5, 3],
           [7, 8, 3],
           [8, 7, 9],
           [7, 6, 9]],
          [[3, 7, 8], [5, 3, 8], [1, 3, 5], [8, 7, 9], [6, 9, 7]]],
         [[[1, 11, 9], [1, 3, 11]]],
         [[[3, 9, 1], [3, 7, 10], [3, 10, 9]]],
         [[[3, 11, 1], [10, 6, 1], [11, 10, 1]]],
         [[[6, 3, 7], [1, 3, 6]]],
         [[[5, 7, 4], [5, 1, 2], [5, 2, 7]]],
         [[[10, 11, 4], [1, 10, 4], [1, 4, 5], [2, 10, 1]]],
         [[[6, 9, 10], [1, 2, 5], [7, 5, 2], [5, 7, 4]],
          [[6, 1, 2], [9, 10, 5], [7, 5, 10], [5, 7, 4]],
          [[6, 2, 10],
           [7, 10, 2],
           [10, 7, 4],
           [10, 4, 9],
           [5, 9, 4],
           [9, 5, 1],
           [9, 1, 6],
           [2, 6, 1]],
          [[12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 4],
           [12, 4, 5],
           [12, 5, 1],
           [12, 1, 2]],
          [[12, 7, 4],
           [12, 4, 5],
           [12, 5, 9],
           [12, 9, 10],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 2],
           [12, 2, 7]]],
         [[[6, 1, 2], [11, 4, 9], [9, 4, 5]],
          [[9, 6, 1],
           [9, 1, 5],
           [5, 1, 4],
           [4, 1, 2],
           [4, 2, 11],
           [6, 11, 2],
           [6, 9, 11]],
          [[2, 11, 4], [2, 4, 1], [1, 4, 5], [6, 11, 2], [11, 6, 9]]],
         [[[1, 2, 7], [8, 1, 7], [8, 7, 4], [8, 9, 1]]],
         [[[8, 11, 4], [1, 2, 9], [9, 2, 10]],
          [[9, 8, 11],
           [9, 11, 10],
           [10, 11, 2],
           [2, 11, 4],
           [2, 4, 1],
           [8, 1, 4],
           [8, 9, 1]],
          [[4, 1, 2], [4, 2, 11], [11, 2, 10], [8, 1, 4], [1, 8, 9]]],
         [[[2, 6, 1], [4, 8, 7], [7, 8, 10]],
          [[7, 2, 6],
           [7, 6, 10],
           [10, 6, 8],
           [8, 6, 1],
           [8, 1, 4],
           [2, 4, 1],
           [2, 7, 4]],
          [[1, 4, 8], [1, 8, 6], [6, 8, 10], [2, 4, 1], [4, 2, 7]]],
         [[[6, 1, 2], [11, 4, 8]],
          [[1, 4, 8], [4, 1, 2], [2, 11, 4], [11, 2, 6], [6, 8, 11], [8, 1, 6]]],
         [[[11, 8, 7], [7, 8, 2], [8, 5, 2], [2, 5, 1]]],
         [[[10, 8, 2], [5, 1, 2], [8, 5, 2]]],
         [[[5, 9, 8], [2, 6, 1], [10, 7, 11]],
          [[11, 8, 5], [7, 11, 5], [10, 7, 5], [9, 10, 5], [2, 6, 1]],
          [[5, 1, 8], [1, 2, 8], [2, 6, 8], [6, 9, 8], [10, 7, 11]],
          [[2, 7, 11], [1, 2, 11], [10, 1, 11], [10, 6, 1], [5, 9, 8]],
          [[10, 12, 11],
           [6, 12, 10],
           [9, 12, 6],
           [8, 12, 9],
           [5, 12, 8],
           [1, 12, 5],
           [2, 12, 1],
           [7, 12, 2],
           [11, 12, 7]],
          [[6, 12, 10],
           [1, 12, 6],
           [2, 12, 1],
           [7, 12, 2],
           [11, 12, 7],
           [8, 12, 11],
           [5, 12, 8],
           [9, 12, 5],
           [10, 12, 9]],
          [[6, 12, 2],
           [9, 12, 6],
           [10, 12, 9],
           [7, 12, 10],
           [11, 12, 7],
           [8, 12, 11],
           [5, 12, 8],
           [1, 12, 5],
           [2, 12, 1]],
          [[10, 6, 9], [7, 11, 8], [1, 7, 8], [5, 1, 8], [2, 7, 1]],
          [[6, 2, 10],
           [2, 7, 10],
           [10, 7, 11],
           [9, 10, 11],
           [8, 9, 11],
           [5, 9, 8],
           [5, 1, 9],
           [1, 6, 9],
           [1, 2, 6]]],
         [[[8, 5, 9], [2, 6, 1]], [[8, 2, 9], [8, 5, 2], [5, 1, 2], [2, 6, 9]]],
         [[[1, 11, 9], [1, 2, 7], [1, 7, 11]]],
         [[[1, 10, 9], [2, 10, 1]]],
         [[[2, 6, 1], [10, 7, 11]], [[2, 11, 1], [11, 6, 1], [11, 10, 6], [2, 7, 11]]],
         [[[1, 2, 6]]],
         [[[6, 4, 5], [6, 2, 3], [6, 3, 4]]],
         [[[7, 10, 11], [2, 3, 6], [4, 6, 3], [6, 4, 5]],
          [[7, 2, 3], [10, 11, 6], [4, 6, 11], [6, 4, 5]],
          [[7, 3, 11],
           [4, 11, 3],
           [11, 4, 5],
           [11, 5, 10],
           [6, 10, 5],
           [10, 6, 2],
           [10, 2, 7],
           [3, 7, 2]],
          [[12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 5],
           [12, 5, 6],
           [12, 6, 2],
           [12, 2, 3]],
          [[12, 4, 5],
           [12, 5, 6],
           [12, 6, 10],
           [12, 10, 11],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 3],
           [12, 3, 4]]],
         [[[5, 9, 10], [3, 5, 10], [3, 10, 2], [3, 4, 5]]],
         [[[2, 3, 7], [11, 5, 9], [4, 5, 11]],
          [[3, 7, 11],
           [4, 3, 11],
           [5, 3, 4],
           [2, 3, 5],
           [9, 2, 5],
           [2, 9, 7],
           [9, 11, 7]],
          [[5, 9, 2], [3, 5, 2], [4, 5, 3], [2, 9, 7], [11, 7, 9]]],
         [[[3, 4, 2], [2, 4, 6], [4, 8, 6], [6, 8, 9]]],
         [[[8, 11, 4], [6, 10, 9], [7, 2, 3]],
          [[3, 4, 8], [2, 3, 8], [7, 2, 8], [11, 7, 8], [6, 10, 9]],
          [[8, 9, 4], [9, 6, 4], [6, 10, 4], [10, 11, 4], [7, 2, 3]],
          [[6, 2, 3], [9, 6, 3], [7, 9, 3], [7, 10, 9], [8, 11, 4]],
          [[7, 12, 3],
           [10, 12, 7],
           [11, 12, 10],
           [4, 12, 11],
           [8, 12, 4],
           [9, 12, 8],
           [6, 12, 9],
           [2, 12, 6],
           [3, 12, 2]],
          [[10, 12, 7],
           [9, 12, 10],
           [6, 12, 9],
           [2, 12, 6],
           [3, 12, 2],
           [4, 12, 3],
           [8, 12, 4],
           [11, 12, 8],
           [7, 12, 11]],
          [[10, 12, 6],
           [11, 12, 10],
           [7, 12, 11],
           [2, 12, 7],
           [3, 12, 2],
           [4, 12, 3],
           [8, 12, 4],
           [9, 12, 8],
           [6, 12, 9]],
          [[7, 10, 11], [2, 3, 4], [9, 2, 4], [8, 9, 4], [6, 2, 9]],
          [[10, 6, 7],
           [6, 2, 7],
           [7, 2, 3],
           [11, 7, 3],
           [4, 11, 3],
           [8, 11, 4],
           [8, 9, 11],
           [9, 10, 11],
           [9, 6, 10]]],
         [[[10, 2, 8], [3, 4, 8], [2, 3, 8]]],
         [[[11, 4, 8], [3, 7, 2]], [[11, 2, 8], [2, 4, 8], [2, 3, 4], [11, 7, 2]]],
         [[[6, 2, 3], [8, 6, 3], [8, 3, 11], [5, 6, 8]]],
         [[[3, 7, 2], [6, 8, 5], [10, 8, 6]],
          [[7, 2, 6],
           [10, 7, 6],
           [8, 7, 10],
           [3, 7, 8],
           [5, 3, 8],
           [3, 5, 2],
           [5, 6, 2]],
          [[8, 5, 3], [7, 8, 3], [10, 8, 7], [3, 5, 2], [6, 2, 5]]],
         [[[5, 9, 8], [11, 2, 3], [10, 2, 11]],
          [[9, 8, 11],
           [10, 9, 11],
           [2, 9, 10],
           [5, 9, 2],
           [3, 5, 2],
           [5, 3, 8],
           [3, 11, 8]],
          [[2, 3, 5], [9, 2, 5], [10, 2, 9], [5, 3, 8], [11, 8, 3]]],
         [[[2, 3, 7], [8, 5, 9]],
          [[8, 5, 3], [2, 3, 5], [5, 9, 2], [7, 2, 9], [9, 8, 7], [7, 3, 8]]],
         [[[9, 3, 11], [9, 6, 2], [9, 2, 3]]],
         [[[6, 10, 9], [7, 2, 3]], [[6, 3, 9], [3, 10, 9], [3, 7, 10], [6, 2, 3]]],
         [[[2, 3, 10], [10, 3, 11]]],
         [[[7, 2, 3]]],
         [[[4, 6, 7], [4, 5, 6]]],
         [[[5, 6, 4], [10, 11, 4], [6, 10, 4]]],
         [[[4, 5, 7], [9, 10, 7], [5, 9, 7]]],
         [[[5, 11, 4], [9, 11, 5]]],
         [[[7, 4, 6], [8, 9, 6], [4, 8, 6]]],
         [[[8, 11, 4], [10, 9, 6]], [[8, 6, 4], [6, 11, 4], [6, 10, 11], [8, 9, 6]]],
         [[[4, 10, 7], [8, 10, 4]]],
         [[[11, 4, 8]]],
         [[[7, 5, 6], [7, 11, 8], [7, 8, 5]]],
         [[[6, 10, 5], [5, 10, 8]]],
         [[[7, 11, 10], [5, 9, 8]], [[7, 5, 10], [7, 11, 5], [11, 8, 5], [5, 9, 10]]],
         [[[9, 8, 5]]],
         [[[7, 9, 6], [11, 9, 7]]],
         [[[10, 9, 6]]],
         [[[10, 7, 11]]],
         [[[]]]]
        MarchingCubes33Lookup.FaceTests = [[[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[4, 5, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[7, 4, 5, 6]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[2, 3, 7, 6]],
         [[]],
         [[]],
         [[4, 5, 6, 7]],
         [[2, 3, 7, 6]],
         [[]],
         [[7, 3, 0, 4]],
         [[]],
         [[2, 3, 7, 6], [3, 0, 4, 7], [6, 7, 4, 5]],
         [[]],
         [[7, 3, 0, 4]],
         [[]],
         [[7, 6, 2, 3], [4, 7, 3, 0]],
         [[]],
         [[]],
         [[6, 2, 3, 7]],
         [[]],
         [[]],
         [[6, 5, 1, 2]],
         [[3, 7, 6, 2], [7, 4, 5, 6], [2, 6, 5, 1]],
         [[]],
         [[]],
         [[]],
         [[6, 2, 3, 7]],
         [[7, 4, 5, 6]],
         [[]],
         [[1, 2, 6, 5]],
         [[6, 5, 1, 2], [7, 6, 2, 3]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[6, 5, 1, 2]],
         [[6, 7, 4, 5], [2, 6, 5, 1]],
         [[]],
         [[]],
         [[0, 4, 7, 3]],
         [[]],
         [[7, 3, 0, 4], [6, 7, 4, 5]],
         [[]],
         [[0, 3, 7, 4], [1, 2, 6, 5]],
         [[1, 5, 6, 2]],
         [[0, 3, 7, 4]],
         [[]],
         [[]],
         [[]],
         [[2, 6, 5, 1]],
         [[5, 1, 2, 6]],
         [[]],
         [[6, 7, 4, 5]],
         [[]],
         [[]],
         [[5, 4, 0, 1]],
         [[0, 1, 5, 4]],
         [[0, 1, 5, 4], [1, 2, 6, 5], [4, 5, 6, 7]],
         [[5, 4, 0, 1], [6, 5, 1, 2]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[0, 3, 2, 1]],
         [[2, 1, 0, 3]],
         [[7, 6, 2, 3], [6, 5, 1, 2], [3, 2, 1, 0]],
         [[2, 6, 5, 1], [3, 2, 1, 0]],
         [[0, 3, 2, 1]],
         [[0, 1, 2, 3], [4, 5, 6, 7]],
         [[2, 1, 0, 3], [6, 2, 3, 7]],
         [[0, 1, 2, 3]],
         [[5, 4, 0, 1], [4, 7, 3, 0], [1, 0, 3, 2]],
         [[0, 3, 2, 1], [4, 0, 1, 5]],
         [[0, 1, 2, 3],
          [0, 1, 5, 4],
          [1, 2, 6, 5],
          [2, 3, 7, 6],
          [3, 0, 4, 7],
          [4, 5, 6, 7]],
         [[2, 1, 5, 6], [1, 0, 4, 5], [3, 0, 1, 2]],
         [[0, 4, 7, 3], [1, 0, 3, 2]],
         [[2, 3, 0, 1]],
         [[2, 3, 0, 1], [3, 7, 4, 0], [6, 7, 3, 2]],
         [[2, 3, 0, 1]],
         [[]],
         [[3, 7, 6, 2]],
         [[]],
         [[]],
         [[]],
         [[6, 2, 3, 7], [5, 6, 7, 4]],
         [[]],
         [[]],
         [[5, 4, 0, 1]],
         [[6, 7, 3, 2], [5, 4, 0, 1]],
         [[5, 6, 7, 4], [1, 5, 4, 0]],
         [[0, 4, 5, 1]],
         [[]],
         [[3, 2, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[4, 7, 6, 5]],
         [[]],
         [[]],
         [[0, 1, 5, 4], [3, 0, 4, 7]],
         [[5, 1, 0, 4]],
         [[7, 4, 0, 3], [4, 5, 1, 0], [6, 5, 4, 7]],
         [[0, 4, 5, 1]],
         [[7, 4, 0, 3]],
         [[]],
         [[4, 0, 3, 7]],
         [[]],
         [[]],
         [[3, 0, 4, 7]],
         [[]],
         [[3, 0, 4, 7]],
         [[4, 0, 1, 5]],
         [[3, 0, 4, 7], [0, 1, 5, 4], [7, 4, 5, 6]],
         [[4, 0, 1, 5]],
         [[4, 7, 3, 0], [5, 4, 0, 1]],
         [[]],
         [[]],
         [[5, 6, 7, 4]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[7, 6, 2, 3]],
         [[]],
         [[1, 5, 4, 0]],
         [[4, 0, 1, 5], [7, 4, 5, 6]],
         [[2, 6, 7, 3], [1, 5, 4, 0]],
         [[1, 0, 4, 5]],
         [[]],
         [[]],
         [[7, 4, 5, 6], [3, 7, 6, 2]],
         [[]],
         [[]],
         [[]],
         [[6, 7, 3, 2]],
         [[]],
         [[3, 2, 1, 0]],
         [[4, 7, 3, 0], [7, 6, 2, 3], [0, 3, 2, 1]],
         [[1, 0, 3, 2]],
         [[3, 2, 1, 0], [7, 3, 0, 4]],
         [[6, 5, 1, 2], [5, 4, 0, 1], [2, 1, 0, 3]],
         [[3, 0, 1, 2],
          [3, 0, 4, 7],
          [0, 1, 5, 4],
          [1, 2, 6, 5],
          [2, 3, 7, 6],
          [7, 4, 5, 6]],
         [[1, 5, 4, 0], [2, 1, 0, 3]],
         [[2, 3, 0, 1], [3, 7, 4, 0], [1, 0, 4, 5]],
         [[3, 2, 1, 0]],
         [[3, 7, 6, 2], [0, 3, 2, 1]],
         [[5, 4, 7, 6], [1, 0, 3, 2]],
         [[1, 2, 3, 0]],
         [[1, 0, 3, 2], [5, 1, 2, 6]],
         [[7, 3, 2, 6], [3, 0, 1, 2], [6, 2, 1, 5]],
         [[0, 1, 2, 3]],
         [[3, 0, 1, 2]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[1, 2, 6, 5], [0, 1, 5, 4]],
         [[2, 1, 5, 6], [1, 0, 4, 5], [6, 5, 4, 7]],
         [[5, 1, 0, 4]],
         [[0, 4, 5, 1]],
         [[]],
         [[]],
         [[4, 7, 6, 5]],
         [[]],
         [[6, 2, 1, 5]],
         [[5, 6, 2, 1]],
         [[]],
         [[]],
         [[]],
         [[4, 7, 3, 0]],
         [[2, 6, 5, 1]],
         [[3, 7, 4, 0], [2, 6, 5, 1]],
         [[]],
         [[4, 5, 6, 7], [0, 4, 7, 3]],
         [[]],
         [[3, 7, 4, 0]],
         [[]],
         [[]],
         [[5, 1, 2, 6], [4, 5, 6, 7]],
         [[2, 1, 5, 6]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[2, 3, 7, 6], [1, 2, 6, 5]],
         [[6, 2, 1, 5]],
         [[]],
         [[5, 4, 7, 6]],
         [[3, 2, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[7, 6, 5, 4], [6, 2, 1, 5], [3, 2, 6, 7]],
         [[1, 5, 6, 2]],
         [[]],
         [[]],
         [[7, 3, 2, 6]],
         [[]],
         [[]],
         [[3, 0, 4, 7], [2, 3, 7, 6]],
         [[]],
         [[4, 0, 3, 7]],
         [[]],
         [[3, 7, 4, 0], [7, 6, 5, 4], [2, 6, 7, 3]],
         [[]],
         [[3, 7, 4, 0]],
         [[]],
         [[6, 7, 3, 2]],
         [[7, 6, 5, 4]],
         [[]],
         [[]],
         [[3, 2, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[6, 5, 4, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[4, 7, 6, 5]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]]]
        MarchingCubes33Lookup.Cases = [0,
         1,
         1,
         2,
         1,
         3,
         2,
         5,
         1,
         2,
         3,
         5,
         2,
         5,
         5,
         8,
         1,
         2,
         3,
         5,
         4,
         6,
         6,
         11,
         3,
         5,
         7,
         9,
         6,
         14,
         12,
         5,
         1,
         3,
         2,
         5,
         3,
         7,
         5,
         9,
         4,
         6,
         6,
         14,
         6,
         12,
         11,
         5,
         2,
         5,
         5,
         8,
         6,
         12,
         14,
         5,
         6,
         11,
         12,
         5,
         10,
         6,
         6,
         2,
         1,
         4,
         3,
         6,
         2,
         6,
         5,
         14,
         3,
         6,
         7,
         12,
         5,
         11,
         9,
         5,
         3,
         6,
         7,
         12,
         6,
         10,
         12,
         6,
         7,
         12,
         13,
         7,
         12,
         6,
         7,
         3,
         2,
         6,
         5,
         11,
         5,
         12,
         8,
         5,
         6,
         10,
         12,
         6,
         14,
         6,
         5,
         2,
         5,
         14,
         9,
         5,
         11,
         6,
         5,
         2,
         12,
         6,
         7,
         3,
         6,
         4,
         3,
         1,
         1,
         3,
         4,
         6,
         3,
         7,
         6,
         12,
         2,
         5,
         6,
         11,
         5,
         9,
         14,
         5,
         2,
         5,
         6,
         14,
         6,
         12,
         10,
         6,
         5,
         8,
         12,
         5,
         11,
         5,
         6,
         2,
         3,
         7,
         6,
         12,
         7,
         13,
         12,
         7,
         6,
         12,
         10,
         6,
         12,
         7,
         6,
         3,
         5,
         9,
         11,
         5,
         12,
         7,
         6,
         3,
         14,
         5,
         6,
         2,
         6,
         3,
         4,
         1,
         2,
         6,
         6,
         10,
         5,
         12,
         11,
         6,
         5,
         14,
         12,
         6,
         8,
         5,
         5,
         2,
         5,
         11,
         12,
         6,
         14,
         6,
         6,
         4,
         9,
         5,
         7,
         3,
         5,
         2,
         3,
         1,
         5,
         12,
         14,
         6,
         9,
         7,
         5,
         3,
         11,
         6,
         6,
         4,
         5,
         3,
         2,
         1,
         8,
         5,
         5,
         2,
         5,
         3,
         2,
         1,
         5,
         2,
         3,
         1,
         2,
         1,
         1,
         0]
        MarchingCubes33Lookup.Signs = [-1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1]
    elif method == 'original':
        MarchingCubesLookup.LookupTable = [
            [[]],
            [[7, 10, 11]],
            [[6, 9, 10]],
            [[6, 9, 7], [7, 9, 11]],
            [[5, 8, 9]],
            [[5, 8, 9], [7, 10, 11]],
            [[5, 8, 6], [6, 8, 10]],
            [[5, 7, 6], [5, 8, 11], [5, 11, 7]],
            [[11, 8, 4]],
            [[8, 7, 10], [4, 7, 8]],
            [[4, 11, 8], [6, 9, 10]],
            [[7, 6, 4], [9, 8, 4], [6, 9, 4]],
            [[4, 9, 5], [11, 9, 4]],
            [[7, 5, 4], [7, 10, 9], [7, 9, 5]],
            [[4, 6, 5], [4, 11, 10], [4, 10, 6]],
            [[4, 6, 5], [4, 7, 6]],
            [[7, 3, 2]],
            [[3, 2, 11], [11, 2, 10]],
            [[3, 2, 7], [9, 10, 6]],
            [[11, 3, 9], [2, 6, 9], [3, 2, 9]],
            [[2, 7, 3], [5, 8, 9]],
            [[5, 8, 9], [10, 3, 2], [11, 3, 10]],
            [[2, 7, 3], [5, 8, 6], [6, 8, 10]],
            [[3, 2, 6], [8, 3, 6], [8, 6, 5], [11, 3, 8]],
            [[2, 7, 3], [8, 4, 11]],
            [[10, 8, 2], [4, 3, 2], [8, 4, 2]],
            [[2, 7, 3], [4, 11, 8], [6, 9, 10]],
            [[2, 4, 3], [6, 4, 2], [6, 8, 4], [9, 8, 6]],
            [[7, 3, 2], [9, 5, 11], [11, 5, 4]],
            [[4, 3, 2], [4, 2, 9], [5, 4, 9], [9, 2, 10]],
            [[10, 4, 11], [6, 4, 10], [6, 5, 4], [3, 2, 7]],
            [[5, 4, 6], [3, 2, 6], [4, 3, 6]],
            [[6, 2, 1]],
            [[6, 2, 1], [7, 10, 11]],
            [[2, 9, 10], [1, 9, 2]],
            [[9, 11, 1], [7, 2, 1], [11, 7, 1]],
            [[2, 1, 6], [8, 9, 5]],
            [[8, 9, 5], [1, 6, 2], [11, 7, 10]],
            [[2, 8, 10], [2, 1, 5], [2, 5, 8]],
            [[5, 8, 1], [1, 8, 2], [8, 11, 2], [2, 11, 7]],
            [[1, 6, 2], [11, 8, 4]],
            [[6, 2, 1], [8, 4, 10], [10, 4, 7]],
            [[4, 11, 8], [9, 2, 1], [10, 2, 9]],
            [[9, 8, 4], [9, 4, 2], [1, 9, 2], [4, 7, 2]],
            [[1, 6, 2], [4, 11, 5], [5, 11, 9]],
            [[1, 7, 2], [5, 7, 1], [5, 4, 7], [10, 9, 6]],
            [[2, 1, 5], [11, 2, 5], [11, 5, 4], [10, 2, 11]],
            [[4, 7, 5], [2, 1, 5], [7, 2, 5]],
            [[7, 1, 6], [3, 1, 7]],
            [[1, 11, 3], [1, 6, 10], [1, 10, 11]],
            [[1, 9, 3], [10, 7, 3], [9, 10, 3]],
            [[11, 1, 9], [11, 3, 1]],
            [[9, 5, 8], [7, 3, 6], [6, 3, 1]],
            [[8, 1, 5], [11, 1, 8], [11, 3, 1], [6, 10, 9]],
            [[1, 5, 8], [1, 8, 7], [3, 1, 7], [7, 8, 10]],
            [[3, 1, 11], [5, 8, 11], [1, 5, 11]],
            [[8, 4, 11], [7, 1, 6], [3, 1, 7]],
            [[1, 6, 10], [1, 10, 4], [3, 1, 4], [4, 10, 8]],
            [[7, 9, 10], [3, 9, 7], [3, 1, 9], [8, 4, 11]],
            [[9, 3, 1], [9, 8, 4], [9, 4, 3]],
            [[5, 11, 9], [5, 4, 11], [6, 7, 3], [6, 3, 1]],
            [[9, 6, 10], [4, 3, 5], [5, 3, 1]],
            [[10, 7, 11], [4, 1, 5], [3, 1, 4]],
            [[1, 5, 3], [3, 5, 4]],
            [[0, 5, 1]],
            [[11, 7, 10], [5, 1, 0]],
            [[5, 1, 0], [6, 9, 10]],
            [[0, 5, 1], [6, 11, 7], [9, 11, 6]],
            [[1, 8, 9], [0, 8, 1]],
            [[10, 11, 7], [1, 0, 9], [9, 0, 8]],
            [[8, 10, 0], [6, 1, 0], [10, 6, 0]],
            [[6, 1, 0], [11, 6, 0], [11, 0, 8], [7, 6, 11]],
            [[1, 0, 5], [11, 8, 4]],
            [[0, 5, 1], [7, 10, 4], [4, 10, 8]],
            [[0, 5, 1], [6, 9, 10], [4, 11, 8]],
            [[0, 4, 1], [1, 4, 6], [4, 7, 6], [5, 9, 8]],
            [[1, 11, 9], [1, 0, 4], [1, 4, 11]],
            [[1, 0, 4], [10, 1, 4], [10, 4, 7], [9, 1, 10]],
            [[6, 1, 10], [10, 1, 11], [1, 0, 11], [11, 0, 4]],
            [[6, 4, 7], [6, 1, 0], [6, 0, 4]],
            [[5, 1, 0], [7, 3, 2]],
            [[5, 1, 0], [3, 10, 11], [2, 10, 3]],
            [[3, 2, 7], [10, 6, 9], [0, 5, 1]],
            [[6, 9, 2], [2, 9, 3], [9, 11, 3], [1, 0, 5]],
            [[3, 2, 7], [8, 9, 0], [0, 9, 1]],
            [[0, 9, 1], [0, 8, 9], [2, 10, 11], [2, 11, 3]],
            [[1, 0, 6], [6, 0, 10], [0, 8, 10], [2, 7, 3]],
            [[1, 2, 6], [8, 11, 0], [0, 11, 3]],
            [[1, 0, 5], [8, 4, 11], [2, 7, 3]],
            [[1, 8, 5], [2, 8, 1], [2, 10, 8], [4, 3, 0]],
            [[0, 5, 1], [5, 10, 6], [4, 11, 8], [2, 7, 3]],
            [[3, 0, 4], [6, 1, 2], [5, 9, 8]],
            [[4, 1, 0], [11, 1, 4], [11, 9, 1], [2, 7, 3]],
            [[4, 3, 0], [1, 10, 9], [2, 10, 1]],
            [[1, 2, 6], [10, 7, 11], [0, 4, 3]],
            [[4, 3, 0], [6, 1, 2]],
            [[0, 5, 2], [2, 5, 6]],
            [[11, 7, 10], [6, 0, 5], [2, 0, 6]],
            [[0, 10, 2], [0, 5, 9], [0, 9, 10]],
            [[11, 7, 2], [5, 11, 2], [5, 2, 0], [5, 9, 11]],
            [[0, 8, 2], [9, 6, 2], [8, 9, 2]],
            [[7, 8, 11], [2, 8, 7], [2, 0, 8], [9, 6, 10]],
            [[0, 10, 2], [0, 8, 10]],
            [[0, 8, 2], [11, 7, 2], [8, 11, 2]],
            [[8, 4, 11], [6, 2, 5], [5, 2, 0]],
            [[5, 6, 0], [6, 2, 0], [7, 10, 8], [4, 7, 8]],
            [[11, 0, 4], [10, 0, 11], [10, 2, 0], [5, 9, 8]],
            [[8, 5, 9], [7, 2, 4], [4, 2, 0]],
            [[9, 6, 2], [4, 9, 2], [4, 2, 0], [4, 11, 9]],
            [[9, 6, 10], [7, 0, 4], [2, 0, 7]],
            [[0, 10, 2], [0, 4, 11], [0, 11, 10]],
            [[0, 4, 2], [2, 4, 7]],
            [[6, 7, 5], [3, 0, 5], [7, 3, 5]],
            [[6, 10, 11], [0, 6, 11], [0, 11, 3], [0, 5, 6]],
            [[0, 5, 3], [3, 5, 7], [5, 9, 7], [7, 9, 10]],
            [[3, 9, 11], [3, 0, 5], [3, 5, 9]],
            [[8, 9, 6], [3, 8, 6], [3, 6, 7], [0, 8, 3]],
            [[10, 9, 6], [3, 0, 11], [11, 0, 8]],
            [[10, 0, 8], [10, 7, 3], [10, 3, 0]],
            [[8, 11, 0], [0, 11, 3]],
            [[0, 5, 3], [3, 5, 7], [5, 6, 7], [4, 11, 8]],
            [[0, 4, 3], [6, 10, 5], [5, 10, 8]],
            [[7, 11, 10], [0, 4, 3], [8, 5, 9]],
            [[3, 0, 4], [9, 8, 5]],
            [[4, 3, 0], [9, 6, 11], [11, 6, 7]],
            [[10, 9, 6], [3, 0, 4]],
            [[4, 3, 0], [7, 11, 10]],
            [[4, 3, 0]]]
    else:
        raise Exception('Unknown method "{:s}"'.format(method))
    edgeLookup = [
        [0, 1],  # Edge 0 - Between nodes 0 and 1
        [1, 2],  # Edge 1
        [2, 3],  # Edge 2
        [3, 0],  # Edge 3
        [0, 4],  # Edge 4
        [1, 5],  # Edge 5
        [2, 6],  # Edge 6
        [3, 7],  # Edge 7
        [4, 5],  # Edge 8
        [5, 6],  # Edge 9
        [6, 7],  # Edge 10
        [7, 4],  # Edge 11
        []       # Center
        ]
    arrayCoords = np.array(VoxelNodeCoords)
    for e in range(len(VoxelNodeConn)):
        vals = np.array([NodeValues[node] for node in VoxelNodeConn[e]])
        inside = [1 if v <= 0 else 0 for v in vals]
        i = int("".join(str(j) for j in inside), 2)
        if method == 'original':
            TriElems = MarchingCubesLookup(i)
        elif method == '33':
            TriElems = MarchingCubes33Lookup(i,vals)
        else:
            raise Exception('Invalid method')
    
        if len(TriElems) > 0:
            for t in TriElems:
                elem = []
                for n in t:
                    if n == 12:
                        newNode = np.mean([VoxelNodeCoords[node] for node in VoxelNodeConn[e]], axis=0)
                        elem.append(len(TriNodeCoords))
                        TriNodeCoords.append(newNode)
                    else:
                        node1 = VoxelNodeConn[e][edgeLookup[n][0]]
                        node2 = VoxelNodeConn[e][edgeLookup[n][1]]
                        coords1 = VoxelNodeCoords[node1]
                        coords2 = VoxelNodeCoords[node2]
                        v1 = NodeValues[node1]
                        v2 = NodeValues[node2]
                        if interpolation == 'midpoint' or v1 == v2:
                            newNode = [
                                (coords1[0] + coords2[0])/2,
                                (coords1[1] + coords2[1])/2,
                                (coords1[2] + coords2[2])/2
                                ]
                            elem.append(len(TriNodeCoords))
                            TriNodeCoords.append(newNode)
                        elif interpolation == 'linear':
                            newNode = [
                                coords1[0] + (0-v1)*(coords2[0]-coords1[0])/(v2-v1),
                                coords1[1] + (0-v1)*(coords2[1]-coords1[1])/(v2-v1),
                                coords1[2] + (0-v1)*(coords2[2]-coords1[2])/(v2-v1)
                                ]
                            if np.sign(v2) == np.sign(v1):
                                print('Marching cubes fuckup')
                                print(str(e) + str(np.sign(vals)) + str(edgeLookup[n]))
                            elem.append(len(TriNodeCoords))
                            TriNodeCoords.append(newNode)                            
                        else:
                            raise Exception('Invalid interpolation method')
                        if return_anchors:
                            if flip:
                                anchor = [node1,node2][np.argmax([v1,v2])] # Pick the point in positive domain
                            else:
                                anchor = [node1,node2][np.argmin([v1,v2])] # Pick the point in negative domain
                            Anchors.append(anchor)

                            if n == 0 or n == 2 or n == 8 or n == 10:
                                AnchorAxis.append(0)
                            elif n == 1 or n == 3 or n == 9 or n == 11:
                                AnchorAxis.append(1)    
                            elif n == 4 or n == 5 or n == 6 or n == 7:
                                AnchorAxis.append(2)
                            else:
                                AnchorAxis.append(-1)

                            mid = np.array([
                                (coords1[0] + coords2[0])/2,
                                (coords1[1] + coords2[1])/2,
                                (coords1[2] + coords2[2])/2
                                ])
                            if np.all(mid-NodeCoords[anchor] >= 0):
                                AnchorDir.append(1)
                            else:
                                AnchorDir.append(-1)


                if len(elem) > 0:
                    TriNodeConn.append(elem)  
                      
    TriNodeCoords,TriNodeConn,_,Idx = MeshUtils.DeleteDuplicateNodes(TriNodeCoords,TriNodeConn,return_idx=True)
    if interpolation=='linear':
        TriNodeCoords,TriNodeConn = MeshUtils.DeleteDegenerateElements(TriNodeCoords,TriNodeConn,strict=True)
    if return_anchors: 
        Anchors = np.array(Anchors)
        AnchorAxis = np.array(AnchorAxis)
        AnchorDir = np.array(AnchorDir)
        return TriNodeCoords, TriNodeConn, Anchors[Idx], AnchorAxis[Idx], AnchorDir[Idx]
    return TriNodeCoords, TriNodeConn

def ParchingCubes(VoxelNodeCoords,VoxelNodeConn,NodeValues,threshold=0,interpolation='linear',pool=None,method='33',flip=False):
    """
    ParchingCubes _summary_

    Parameters
    ----------
    VoxelNodeCoords : list
        List of node coordinates in a cubic/voxel mesh
    VoxelNodeConn : list
        List of nodal connectivities in a cubic/voxel mesh
    NodeValues : list
        List of node values (one value per node)
    threshold : float, optional
        Value of desired isosurface, by default 0
    interpolation : str, optional
        Interpolation method for positioning nodes, by default 'linear'.
        - 'linear' : will perform a linear interpolation between an two grid nodes to approximate place the new node at the threshold value
        - 'midpoint' : the new node will be placed at the midpoint between two grid nodes.
    method : str, optional
        _description_, by default '33'
    flip : bool, optional
        If true, will flip the orientation of the triangles that are produced, by default False.
        It's assumed that values below the threshold are 'inside' and values above the threshold
        are 'outside' of the mesh, if the opposite is the case, set flip = True.
    """    
    # method: 'original', '33'
    TriNodeCoords = []
    TriNodeConn = []
    if len(VoxelNodeCoords) == 0 or len(VoxelNodeConn) == 0:
        warnings.warn('Empty mesh given to ParchingCubes')
        return TriNodeCoords, TriNodeConn
        
    NodeValues = np.array([v-threshold for v in NodeValues]).astype('float64')
    if flip:
        NodeValues = -1*NodeValues
    
    if method == '33':
        MarchingCubes33Lookup.LookupTable = [[[[]]],
         [[[7, 10, 11]]],
         [[[9, 10, 6]]],
         [[[6, 9, 7], [7, 9, 11]]],
         [[[8, 9, 5]]],
         [[[5, 8, 9], [7, 10, 11]], [[5, 7, 9], [5, 8, 7], [8, 11, 7], [7, 10, 9]]],
         [[[5, 8, 6], [6, 8, 10]]],
         [[[5, 7, 6], [5, 8, 11], [5, 11, 7]]],
         [[[11, 8, 4]]],
         [[[8, 4, 10], [10, 4, 7]]],
         [[[4, 11, 8], [6, 9, 10]], [[4, 6, 8], [4, 11, 6], [11, 10, 6], [6, 9, 8]]],
         [[[6, 4, 7], [6, 9, 8], [6, 8, 4]]],
         [[[4, 11, 5], [5, 11, 9]]],
         [[[7, 5, 4], [7, 10, 9], [7, 9, 5]]],
         [[[4, 6, 5], [4, 11, 10], [4, 10, 6]]],
         [[[4, 6, 5], [4, 7, 6]]],
         [[[7, 3, 2]]],
         [[[10, 11, 2], [2, 11, 3]]],
         [[[3, 2, 7], [9, 10, 6]], [[3, 9, 7], [3, 2, 9], [2, 6, 9], [9, 10, 7]]],
         [[[3, 9, 11], [3, 2, 6], [3, 6, 9]]],
         [[[2, 7, 3], [5, 8, 9]],
          [[7, 8, 9], [8, 7, 3], [3, 5, 8], [5, 3, 2], [2, 9, 5], [9, 7, 2]]],
         [[[8, 9, 5], [3, 2, 11], [11, 2, 10]],
          [[11, 8, 9],
           [11, 9, 10],
           [10, 9, 2],
           [2, 9, 5],
           [2, 5, 3],
           [8, 3, 5],
           [8, 11, 3]],
          [[5, 3, 2], [5, 2, 9], [9, 2, 10], [8, 3, 5], [3, 8, 11]]],
         [[[2, 7, 3], [5, 8, 6], [6, 8, 10]],
          [[6, 2, 7],
           [6, 7, 10],
           [10, 7, 8],
           [8, 7, 3],
           [8, 3, 5],
           [2, 5, 3],
           [2, 6, 5]],
          [[3, 5, 8], [3, 8, 7], [7, 8, 10], [2, 5, 3], [5, 2, 6]]],
         [[[3, 2, 6], [8, 3, 6], [8, 6, 5], [11, 3, 8]]],
         [[[2, 7, 3], [8, 4, 11]], [[2, 8, 3], [2, 7, 8], [7, 11, 8], [8, 4, 3]]],
         [[[8, 2, 10], [8, 4, 3], [8, 3, 2]]],
         [[[2, 7, 3], [4, 11, 8], [6, 9, 10]],
          [[3, 2, 6], [3, 6, 9], [3, 9, 10], [3, 10, 7], [4, 11, 8]],
          [[2, 4, 3], [2, 8, 4], [2, 11, 8], [2, 7, 11], [6, 9, 10]],
          [[6, 9, 8], [6, 8, 4], [6, 4, 10], [4, 11, 10], [2, 7, 3]],
          [[6, 12, 10],
           [10, 12, 11],
           [11, 12, 7],
           [7, 12, 2],
           [2, 12, 3],
           [3, 12, 4],
           [4, 12, 8],
           [8, 12, 9],
           [9, 12, 6]],
          [[10, 12, 11],
           [11, 12, 4],
           [4, 12, 8],
           [8, 12, 9],
           [9, 12, 6],
           [6, 12, 2],
           [2, 12, 3],
           [3, 12, 7],
           [7, 12, 10]],
          [[8, 12, 11],
           [11, 12, 7],
           [7, 12, 10],
           [10, 12, 9],
           [9, 12, 6],
           [6, 12, 2],
           [2, 12, 3],
           [3, 12, 4],
           [4, 12, 8]],
          [[7, 11, 10], [2, 6, 9], [2, 9, 4], [2, 4, 3], [4, 9, 8]],
          [[10, 8, 11],
           [10, 9, 8],
           [6, 9, 10],
           [6, 10, 7],
           [6, 7, 2],
           [2, 7, 3],
           [7, 4, 3],
           [7, 11, 4],
           [11, 8, 4]]],
         [[[3, 2, 4], [4, 2, 8], [2, 6, 8], [8, 6, 9]]],
         [[[7, 3, 2], [9, 5, 11], [11, 5, 4]],
          [[11, 7, 3],
           [11, 3, 4],
           [4, 3, 5],
           [5, 3, 2],
           [5, 2, 9],
           [7, 9, 2],
           [7, 11, 9]],
          [[2, 9, 5], [2, 5, 3], [3, 5, 4], [7, 9, 2], [9, 7, 11]]],
         [[[4, 3, 2], [9, 4, 2], [9, 2, 10], [9, 5, 4]]],
         [[[7, 3, 2], [11, 10, 4], [6, 4, 10], [4, 6, 5]],
          [[7, 11, 10], [3, 2, 4], [6, 4, 2], [4, 6, 5]],
          [[7, 10, 2],
           [6, 2, 10],
           [2, 6, 5],
           [2, 5, 3],
           [4, 3, 5],
           [3, 4, 11],
           [3, 11, 7],
           [10, 7, 11]],
          [[12, 10, 7],
           [12, 7, 3],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 5],
           [12, 5, 4],
           [12, 4, 11],
           [12, 11, 10]],
          [[12, 6, 5],
           [12, 5, 4],
           [12, 4, 3],
           [12, 3, 2],
           [12, 2, 7],
           [12, 7, 11],
           [12, 11, 10],
           [12, 10, 6]]],
         [[[5, 4, 6], [3, 2, 6], [4, 3, 6]]],
         [[[2, 1, 6]]],
         [[[1, 6, 2], [11, 7, 10]], [[1, 11, 2], [1, 6, 11], [6, 10, 11], [11, 7, 2]]],
         [[[9, 10, 1], [1, 10, 2]]],
         [[[11, 1, 9], [11, 7, 2], [11, 2, 1]]],
         [[[8, 9, 5], [2, 1, 6]], [[8, 2, 5], [8, 9, 2], [9, 6, 2], [2, 1, 5]]],
         [[[7, 10, 11], [8, 9, 5], [2, 1, 6]],
          [[11, 7, 2], [11, 2, 1], [11, 1, 6], [11, 6, 10], [8, 9, 5]],
          [[7, 8, 11], [7, 5, 8], [7, 9, 5], [7, 10, 9], [2, 1, 6]],
          [[2, 1, 5], [2, 5, 8], [2, 8, 6], [8, 9, 6], [7, 10, 11]],
          [[2, 12, 6],
           [6, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 11],
           [11, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 2]],
          [[6, 12, 9],
           [9, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 10],
           [10, 12, 6]],
          [[5, 12, 9],
           [9, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 8],
           [8, 12, 5]],
          [[10, 9, 6], [7, 2, 1], [7, 1, 8], [7, 8, 11], [8, 1, 5]],
          [[6, 5, 9],
           [6, 1, 5],
           [2, 1, 6],
           [2, 6, 10],
           [2, 10, 7],
           [7, 10, 11],
           [10, 8, 11],
           [10, 9, 8],
           [9, 5, 8]]],
         [[[2, 8, 10], [2, 1, 5], [2, 5, 8]]],
         [[[2, 1, 7], [7, 1, 11], [1, 5, 11], [11, 5, 8]]],
         [[[2, 1, 6], [11, 8, 4]],
          [[1, 8, 4], [8, 1, 6], [6, 11, 8], [11, 6, 2], [2, 4, 11], [4, 1, 2]]],
         [[[6, 2, 1], [8, 4, 10], [10, 4, 7]],
          [[10, 6, 2],
           [10, 2, 7],
           [7, 2, 4],
           [4, 2, 1],
           [4, 1, 8],
           [6, 8, 1],
           [6, 10, 8]],
          [[1, 8, 4], [1, 4, 2], [2, 4, 7], [6, 8, 1], [8, 6, 10]]],
         [[[11, 8, 4], [2, 1, 10], [10, 1, 9]],
          [[10, 11, 8],
           [10, 8, 9],
           [9, 8, 1],
           [1, 8, 4],
           [1, 4, 2],
           [11, 2, 4],
           [11, 10, 2]],
          [[4, 2, 1], [4, 1, 8], [8, 1, 9], [11, 2, 4], [2, 11, 10]]],
         [[[7, 2, 1], [8, 7, 1], [8, 1, 9], [8, 4, 7]]],
         [[[1, 6, 2], [4, 11, 5], [5, 11, 9]],
          [[5, 1, 6],
           [5, 6, 9],
           [9, 6, 11],
           [11, 6, 2],
           [11, 2, 4],
           [1, 4, 2],
           [1, 5, 4]],
          [[2, 4, 11], [2, 11, 6], [6, 11, 9], [1, 4, 2], [4, 1, 5]]],
         [[[6, 2, 1], [10, 9, 7], [5, 7, 9], [7, 5, 4]],
          [[6, 10, 9], [2, 1, 7], [5, 7, 1], [7, 5, 4]],
          [[6, 9, 1],
           [5, 1, 9],
           [1, 5, 4],
           [1, 4, 2],
           [7, 2, 4],
           [2, 7, 10],
           [2, 10, 6],
           [9, 6, 10]],
          [[12, 9, 6],
           [12, 6, 2],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 4],
           [12, 4, 7],
           [12, 7, 10],
           [12, 10, 9]],
          [[12, 5, 4],
           [12, 4, 7],
           [12, 7, 2],
           [12, 2, 1],
           [12, 1, 6],
           [12, 6, 10],
           [12, 10, 9],
           [12, 9, 5]]],
         [[[2, 1, 5], [11, 2, 5], [11, 5, 4], [10, 2, 11]]],
         [[[4, 7, 5], [2, 1, 5], [7, 2, 5]]],
         [[[1, 6, 3], [3, 6, 7]]],
         [[[1, 11, 3], [1, 6, 10], [1, 10, 11]]],
         [[[9, 3, 1], [9, 10, 7], [9, 7, 3]]],
         [[[11, 1, 9], [11, 3, 1]]],
         [[[9, 5, 8], [7, 3, 6], [6, 3, 1]],
          [[6, 9, 5],
           [6, 5, 1],
           [1, 5, 3],
           [3, 5, 8],
           [3, 8, 7],
           [9, 7, 8],
           [9, 6, 7]],
          [[8, 7, 3], [8, 3, 5], [5, 3, 1], [9, 7, 8], [7, 9, 6]]],
         [[[9, 5, 8], [6, 10, 1], [11, 1, 10], [1, 11, 3]],
          [[9, 6, 10], [5, 8, 1], [11, 1, 8], [1, 11, 3]],
          [[9, 10, 8],
           [11, 8, 10],
           [8, 11, 3],
           [8, 3, 5],
           [1, 5, 3],
           [5, 1, 6],
           [5, 6, 9],
           [10, 9, 6]],
          [[12, 10, 9],
           [12, 9, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 3],
           [12, 3, 1],
           [12, 1, 6],
           [12, 6, 10]],
          [[12, 11, 3],
           [12, 3, 1],
           [12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 10],
           [12, 10, 11]]],
         [[[1, 5, 8], [7, 1, 8], [7, 8, 10], [7, 3, 1]]],
         [[[3, 1, 11], [5, 8, 11], [1, 5, 11]]],
         [[[4, 11, 8], [1, 6, 3], [3, 6, 7]],
          [[3, 4, 11],
           [3, 11, 7],
           [7, 11, 6],
           [6, 11, 8],
           [6, 8, 1],
           [4, 1, 8],
           [4, 3, 1]],
          [[8, 1, 6], [8, 6, 11], [11, 6, 7], [4, 1, 8], [1, 4, 3]]],
         [[[8, 4, 3], [6, 8, 3], [6, 3, 1], [10, 8, 6]]],
         [[[11, 8, 4], [10, 7, 9], [3, 9, 7], [9, 3, 1]],
          [[11, 10, 7], [8, 4, 9], [3, 9, 4], [9, 3, 1]],
          [[11, 7, 4],
           [3, 4, 7],
           [4, 3, 1],
           [4, 1, 8],
           [9, 8, 1],
           [8, 9, 10],
           [8, 10, 11],
           [7, 11, 10]],
          [[12, 7, 11],
           [12, 11, 8],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 1],
           [12, 1, 9],
           [12, 9, 10],
           [12, 10, 7]],
          [[12, 3, 1],
           [12, 1, 9],
           [12, 9, 8],
           [12, 8, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 7],
           [12, 7, 3]]],
         [[[1, 9, 3], [8, 4, 3], [9, 8, 3]]],
         [[[3, 6, 7], [3, 1, 6], [11, 9, 5], [11, 5, 4]],
          [[3, 5, 4], [3, 1, 5], [7, 9, 6], [7, 11, 9]],
          [[3, 1, 4],
           [4, 1, 5],
           [3, 4, 7],
           [7, 4, 11],
           [7, 11, 6],
           [11, 9, 6],
           [1, 6, 5],
           [6, 9, 5]],
          [[5, 12, 1],
           [1, 12, 3],
           [3, 12, 7],
           [7, 12, 6],
           [6, 12, 9],
           [9, 12, 11],
           [11, 12, 4],
           [4, 12, 5]],
          [[6, 12, 1],
           [7, 12, 6],
           [11, 12, 7],
           [9, 12, 11],
           [5, 12, 9],
           [4, 12, 5],
           [3, 12, 4],
           [1, 12, 3]]],
         [[[10, 9, 6], [1, 4, 3], [5, 4, 1]],
          [[9, 6, 1],
           [5, 9, 1],
           [4, 9, 5],
           [10, 9, 4],
           [3, 10, 4],
           [10, 3, 6],
           [3, 1, 6]],
          [[4, 3, 10], [9, 4, 10], [5, 4, 9], [10, 3, 6], [1, 6, 3]]],
         [[[10, 7, 11], [4, 1, 5], [3, 1, 4]],
          [[7, 11, 4],
           [3, 7, 4],
           [1, 7, 3],
           [10, 7, 1],
           [5, 10, 1],
           [10, 5, 11],
           [5, 4, 11]],
          [[1, 5, 10], [7, 1, 10], [3, 1, 7], [10, 5, 11], [4, 11, 5]]],
         [[[1, 4, 3], [5, 4, 1]]],
         [[[0, 5, 1]]],
         [[[7, 10, 11], [0, 5, 1]],
          [[10, 5, 1], [5, 10, 11], [11, 0, 5], [0, 11, 7], [7, 1, 0], [1, 10, 7]]],
         [[[10, 6, 9], [0, 5, 1]], [[10, 0, 9], [10, 6, 0], [6, 1, 0], [0, 5, 9]]],
         [[[5, 1, 0], [11, 7, 9], [9, 7, 6]],
          [[9, 5, 1],
           [9, 1, 6],
           [6, 1, 7],
           [7, 1, 0],
           [7, 0, 11],
           [5, 11, 0],
           [5, 9, 11]],
          [[0, 11, 7], [0, 7, 1], [1, 7, 6], [5, 11, 0], [11, 5, 9]]],
         [[[1, 0, 9], [9, 0, 8]]],
         [[[10, 11, 7], [1, 0, 9], [9, 0, 8]],
          [[9, 10, 11],
           [9, 11, 8],
           [8, 11, 0],
           [0, 11, 7],
           [0, 7, 1],
           [10, 1, 7],
           [10, 9, 1]],
          [[7, 1, 0], [7, 0, 11], [11, 0, 8], [10, 1, 7], [1, 10, 9]]],
         [[[10, 0, 8], [10, 6, 1], [10, 1, 0]]],
         [[[8, 11, 7], [1, 8, 7], [1, 7, 6], [1, 0, 8]]],
         [[[11, 8, 4], [1, 0, 5]], [[11, 1, 4], [11, 8, 1], [8, 5, 1], [1, 0, 4]]],
         [[[0, 5, 1], [7, 10, 4], [4, 10, 8]],
          [[4, 0, 5],
           [4, 5, 8],
           [8, 5, 10],
           [10, 5, 1],
           [10, 1, 7],
           [0, 7, 1],
           [0, 4, 7]],
          [[1, 7, 10], [1, 10, 5], [5, 10, 8], [0, 7, 1], [7, 0, 4]]],
         [[[0, 5, 1], [6, 9, 10], [4, 11, 8]],
          [[1, 0, 4], [1, 4, 11], [1, 11, 8], [1, 8, 5], [6, 9, 10]],
          [[0, 6, 1], [0, 10, 6], [0, 9, 10], [0, 5, 9], [4, 11, 8]],
          [[4, 11, 10], [4, 10, 6], [4, 6, 8], [6, 9, 8], [0, 5, 1]],
          [[4, 12, 8],
           [8, 12, 9],
           [9, 12, 5],
           [5, 12, 0],
           [0, 12, 1],
           [1, 12, 6],
           [6, 12, 10],
           [10, 12, 11],
           [11, 12, 4]],
          [[8, 12, 9],
           [9, 12, 6],
           [6, 12, 10],
           [10, 12, 11],
           [11, 12, 4],
           [4, 12, 0],
           [0, 12, 1],
           [1, 12, 5],
           [5, 12, 8]],
          [[10, 12, 9],
           [9, 12, 5],
           [5, 12, 8],
           [8, 12, 11],
           [11, 12, 4],
           [4, 12, 0],
           [0, 12, 1],
           [1, 12, 6],
           [6, 12, 10]],
          [[5, 9, 8], [0, 4, 11], [0, 11, 6], [0, 6, 1], [6, 11, 10]],
          [[8, 10, 9],
           [8, 11, 10],
           [4, 11, 8],
           [4, 8, 5],
           [4, 5, 0],
           [0, 5, 1],
           [5, 6, 1],
           [5, 9, 6],
           [9, 10, 6]]],
         [[[5, 1, 0], [9, 8, 6], [4, 6, 8], [6, 4, 7]],
          [[5, 9, 8], [1, 0, 6], [4, 6, 0], [6, 4, 7]],
          [[5, 8, 0],
           [4, 0, 8],
           [0, 4, 7],
           [0, 7, 1],
           [6, 1, 7],
           [1, 6, 9],
           [1, 9, 5],
           [8, 5, 9]],
          [[12, 8, 5],
           [12, 5, 1],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 7],
           [12, 7, 6],
           [12, 6, 9],
           [12, 9, 8]],
          [[12, 4, 7],
           [12, 7, 6],
           [12, 6, 1],
           [12, 1, 0],
           [12, 0, 5],
           [12, 5, 9],
           [12, 9, 8],
           [12, 8, 4]]],
         [[[1, 11, 9], [1, 0, 4], [1, 4, 11]]],
         [[[7, 10, 9], [0, 7, 9], [0, 9, 1], [4, 7, 0]]],
         [[[4, 11, 0], [0, 11, 1], [11, 10, 1], [1, 10, 6]]],
         [[[7, 6, 4], [1, 0, 4], [6, 1, 4]]],
         [[[7, 3, 2], [5, 1, 0]], [[7, 5, 2], [7, 3, 5], [3, 0, 5], [5, 1, 2]]],
         [[[1, 0, 5], [10, 11, 2], [2, 11, 3]],
          [[2, 1, 0],
           [2, 0, 3],
           [3, 0, 11],
           [11, 0, 5],
           [11, 5, 10],
           [1, 10, 5],
           [1, 2, 10]],
          [[5, 10, 11], [5, 11, 0], [0, 11, 3], [1, 10, 5], [10, 1, 2]]],
         [[[10, 6, 9], [5, 1, 0], [7, 3, 2]],
          [[9, 10, 7], [9, 7, 3], [9, 3, 2], [9, 2, 6], [5, 1, 0]],
          [[10, 5, 9], [10, 0, 5], [10, 1, 0], [10, 6, 1], [7, 3, 2]],
          [[7, 3, 0], [7, 0, 5], [7, 5, 2], [5, 1, 2], [10, 6, 9]],
          [[7, 12, 2],
           [2, 12, 1],
           [1, 12, 6],
           [6, 12, 10],
           [10, 12, 9],
           [9, 12, 5],
           [5, 12, 0],
           [0, 12, 3],
           [3, 12, 7]],
          [[2, 12, 1],
           [1, 12, 5],
           [5, 12, 0],
           [0, 12, 3],
           [3, 12, 7],
           [7, 12, 10],
           [10, 12, 9],
           [9, 12, 6],
           [6, 12, 2]],
          [[0, 12, 1],
           [1, 12, 6],
           [6, 12, 2],
           [2, 12, 3],
           [3, 12, 7],
           [7, 12, 10],
           [10, 12, 9],
           [9, 12, 5],
           [5, 12, 0]],
          [[6, 1, 2], [10, 7, 3], [10, 3, 5], [10, 5, 9], [5, 3, 0]],
          [[2, 0, 1],
           [2, 3, 0],
           [7, 3, 2],
           [7, 2, 6],
           [7, 6, 10],
           [10, 6, 9],
           [6, 5, 9],
           [6, 1, 5],
           [1, 0, 5]]],
         [[[1, 0, 5], [2, 6, 3], [9, 3, 6], [3, 9, 11]],
          [[1, 2, 6], [0, 5, 3], [9, 3, 5], [3, 9, 11]],
          [[1, 6, 5],
           [9, 5, 6],
           [5, 9, 11],
           [5, 11, 0],
           [3, 0, 11],
           [0, 3, 2],
           [0, 2, 1],
           [6, 1, 2]],
          [[12, 6, 1],
           [12, 1, 0],
           [12, 0, 5],
           [12, 5, 9],
           [12, 9, 11],
           [12, 11, 3],
           [12, 3, 2],
           [12, 2, 6]],
          [[12, 9, 11],
           [12, 11, 3],
           [12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 6],
           [12, 6, 9]]],
         [[[3, 2, 7], [8, 9, 0], [0, 9, 1]],
          [[0, 3, 2],
           [0, 2, 1],
           [1, 2, 9],
           [9, 2, 7],
           [9, 7, 8],
           [3, 8, 7],
           [3, 0, 8]],
          [[7, 8, 9], [7, 9, 2], [2, 9, 1], [3, 8, 7], [8, 3, 0]]],
         [[[0, 9, 1], [0, 8, 9], [2, 10, 11], [2, 11, 3]],
          [[0, 11, 3], [0, 8, 11], [1, 10, 9], [1, 2, 10]],
          [[0, 8, 3],
           [3, 8, 11],
           [0, 3, 1],
           [1, 3, 2],
           [1, 2, 9],
           [2, 10, 9],
           [8, 9, 11],
           [9, 10, 11]],
          [[11, 12, 8],
           [8, 12, 0],
           [0, 12, 1],
           [1, 12, 9],
           [9, 12, 10],
           [10, 12, 2],
           [2, 12, 3],
           [3, 12, 11]],
          [[9, 12, 8],
           [1, 12, 9],
           [2, 12, 1],
           [10, 12, 2],
           [11, 12, 10],
           [3, 12, 11],
           [0, 12, 3],
           [8, 12, 0]]],
         [[[2, 7, 3], [6, 1, 10], [0, 10, 1], [10, 0, 8]],
          [[2, 6, 1], [7, 3, 10], [0, 10, 3], [10, 0, 8]],
          [[2, 1, 3],
           [0, 3, 1],
           [3, 0, 8],
           [3, 8, 7],
           [10, 7, 8],
           [7, 10, 6],
           [7, 6, 2],
           [1, 2, 6]],
          [[12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 8],
           [12, 8, 10],
           [12, 10, 6],
           [12, 6, 1]],
          [[12, 0, 8],
           [12, 8, 10],
           [12, 10, 7],
           [12, 7, 3],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 1],
           [12, 1, 0]]],
         [[[6, 1, 2], [3, 8, 11], [0, 8, 3]],
          [[1, 2, 3],
           [0, 1, 3],
           [8, 1, 0],
           [6, 1, 8],
           [11, 6, 8],
           [6, 11, 2],
           [11, 3, 2]],
          [[8, 11, 6], [1, 8, 6], [0, 8, 1], [6, 11, 2], [3, 2, 11]]],
         [[[8, 4, 11], [7, 3, 2], [5, 1, 0]],
          [[11, 8, 5], [11, 5, 1], [11, 1, 0], [11, 0, 4], [7, 3, 2]],
          [[8, 7, 11], [8, 2, 7], [8, 3, 2], [8, 4, 3], [5, 1, 0]],
          [[5, 1, 2], [5, 2, 7], [5, 7, 0], [7, 3, 0], [8, 4, 11]],
          [[5, 12, 0],
           [0, 12, 3],
           [3, 12, 4],
           [4, 12, 8],
           [8, 12, 11],
           [11, 12, 7],
           [7, 12, 2],
           [2, 12, 1],
           [1, 12, 5]],
          [[0, 12, 3],
           [3, 12, 7],
           [7, 12, 2],
           [2, 12, 1],
           [1, 12, 5],
           [5, 12, 8],
           [8, 12, 11],
           [11, 12, 4],
           [4, 12, 0]],
          [[2, 12, 3],
           [3, 12, 4],
           [4, 12, 0],
           [0, 12, 1],
           [1, 12, 5],
           [5, 12, 8],
           [8, 12, 11],
           [11, 12, 7],
           [7, 12, 2]],
          [[4, 3, 0], [8, 5, 1], [8, 1, 7], [8, 7, 11], [7, 1, 2]],
          [[0, 2, 3],
           [0, 1, 2],
           [5, 1, 0],
           [5, 0, 4],
           [5, 4, 8],
           [8, 4, 11],
           [4, 7, 11],
           [4, 3, 7],
           [3, 2, 7]]],
         [[[0, 5, 1], [4, 3, 8], [2, 8, 3], [8, 2, 10]],
          [[0, 4, 3], [5, 1, 8], [2, 8, 1], [8, 2, 10]],
          [[0, 3, 1],
           [2, 1, 3],
           [1, 2, 10],
           [1, 10, 5],
           [8, 5, 10],
           [5, 8, 4],
           [5, 4, 0],
           [3, 0, 4]],
          [[12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 10],
           [12, 10, 8],
           [12, 8, 4],
           [12, 4, 3]],
          [[12, 2, 10],
           [12, 10, 8],
           [12, 8, 5],
           [12, 5, 1],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 3],
           [12, 3, 2]]],
         [[[0, 5, 1], [9, 10, 6], [4, 11, 8], [2, 7, 3]],
          [[0, 5, 1], [2, 7, 3], [4, 11, 6], [6, 11, 10], [6, 8, 4], [6, 9, 8]],
          [[4, 11, 8], [2, 7, 3], [0, 5, 9], [0, 9, 10], [0, 6, 1], [0, 10, 6]],
          [[4, 11, 8], [9, 10, 6], [3, 5, 7], [0, 5, 3], [1, 2, 5], [2, 7, 5]],
          [[2, 7, 3], [9, 10, 6], [5, 11, 8], [1, 11, 5], [0, 4, 11], [0, 11, 1]],
          [[6, 9, 10], [0, 5, 1], [2, 11, 8], [2, 7, 11], [2, 8, 4], [2, 4, 3]],
          [[0, 5, 1], [4, 11, 8], [9, 7, 3], [9, 10, 7], [9, 3, 2], [9, 2, 6]],
          [[11, 8, 4],
           [7, 3, 12],
           [10, 7, 12],
           [9, 10, 12],
           [5, 9, 12],
           [0, 5, 12],
           [1, 0, 12],
           [6, 1, 12],
           [2, 6, 12],
           [3, 2, 12]],
          [[7, 3, 2],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 9],
           [12, 9, 10]],
          [[11, 8, 4],
           [9, 10, 12],
           [5, 9, 12],
           [0, 5, 12],
           [3, 0, 12],
           [7, 3, 12],
           [2, 7, 12],
           [1, 2, 12],
           [6, 1, 12],
           [10, 6, 12]],
          [[7, 3, 2],
           [1, 0, 12],
           [6, 1, 12],
           [10, 6, 12],
           [11, 10, 12],
           [4, 11, 12],
           [8, 4, 12],
           [9, 8, 12],
           [5, 9, 12],
           [0, 5, 12]],
          [[5, 1, 0],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 11],
           [12, 11, 8]],
          [[11, 8, 4],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 6],
           [12, 6, 9]],
          [[1, 0, 5],
           [12, 3, 2],
           [12, 2, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 7],
           [12, 7, 3]],
          [[6, 9, 10],
           [5, 1, 12],
           [8, 5, 12],
           [11, 8, 12],
           [7, 11, 12],
           [2, 7, 12],
           [3, 2, 12],
           [4, 3, 12],
           [0, 4, 12],
           [1, 0, 12]],
          [[6, 9, 10],
           [11, 8, 12],
           [7, 11, 12],
           [2, 7, 12],
           [1, 2, 12],
           [5, 1, 12],
           [0, 5, 12],
           [3, 0, 12],
           [4, 3, 12],
           [8, 4, 12]],
          [[1, 0, 5],
           [3, 2, 12],
           [4, 3, 12],
           [8, 4, 12],
           [9, 8, 12],
           [6, 9, 12],
           [10, 6, 12],
           [11, 10, 12],
           [7, 11, 12],
           [2, 7, 12]],
          [[6, 9, 10],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 1],
           [12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 4],
           [12, 4, 11]],
          [[7, 3, 2],
           [12, 1, 0],
           [12, 0, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 5],
           [12, 5, 1]],
          [[7, 3, 12],
           [10, 7, 12],
           [11, 10, 12],
           [4, 11, 12],
           [8, 4, 12],
           [9, 8, 12],
           [5, 9, 12],
           [0, 5, 12],
           [1, 0, 12],
           [6, 1, 12],
           [2, 6, 12],
           [3, 2, 12]],
          [[12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 9],
           [12, 9, 10],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0]],
          [[12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 11],
           [12, 11, 8],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 0],
           [12, 0, 5],
           [12, 5, 1],
           [12, 1, 2]],
          [[5, 1, 12],
           [8, 5, 12],
           [9, 8, 12],
           [6, 9, 12],
           [10, 6, 12],
           [11, 10, 12],
           [7, 11, 12],
           [2, 7, 12],
           [3, 2, 12],
           [4, 3, 12],
           [0, 4, 12],
           [1, 0, 12]],
          [[4, 11, 8], [6, 1, 2], [3, 0, 7], [10, 7, 0], [5, 10, 0], [10, 5, 9]],
          [[7, 3, 2], [5, 9, 8], [4, 1, 0], [1, 4, 11], [1, 11, 6], [10, 6, 11]],
          [[5, 1, 0], [7, 11, 10], [6, 3, 2], [3, 6, 9], [3, 9, 4], [8, 4, 9]],
          [[6, 9, 10], [4, 3, 0], [1, 2, 5], [8, 5, 2], [7, 8, 2], [8, 7, 11]],
          [[6, 1, 2],
           [5, 9, 8],
           [0, 5, 8],
           [4, 0, 8],
           [0, 4, 3],
           [7, 3, 4],
           [11, 7, 4],
           [7, 11, 10],
           [8, 10, 11],
           [10, 8, 9]],
          [[5, 9, 8],
           [3, 0, 4],
           [3, 4, 11],
           [3, 11, 7],
           [10, 7, 11],
           [7, 10, 6],
           [7, 6, 2],
           [1, 2, 6],
           [2, 1, 3],
           [0, 3, 1]],
          [[7, 11, 10],
           [1, 2, 6],
           [1, 6, 9],
           [1, 9, 5],
           [8, 5, 9],
           [5, 8, 4],
           [5, 4, 0],
           [3, 0, 4],
           [0, 3, 1],
           [2, 1, 3]],
          [[4, 3, 0],
           [7, 11, 10],
           [2, 7, 10],
           [6, 2, 10],
           [2, 6, 1],
           [5, 1, 6],
           [9, 5, 6],
           [8, 5, 9],
           [10, 8, 9],
           [8, 10, 11]]],
         [[[8, 5, 9], [3, 0, 4], [1, 2, 6]],
          [[6, 9, 8], [2, 6, 8], [1, 2, 8], [5, 1, 8], [3, 0, 4]],
          [[8, 4, 9], [4, 3, 9], [3, 0, 9], [0, 5, 9], [1, 2, 6]],
          [[3, 2, 6], [4, 3, 6], [1, 4, 6], [1, 0, 4], [8, 5, 9]],
          [[1, 12, 6],
           [0, 12, 1],
           [5, 12, 0],
           [9, 12, 5],
           [8, 12, 9],
           [4, 12, 8],
           [3, 12, 4],
           [2, 12, 3],
           [6, 12, 2]],
          [[0, 12, 1],
           [4, 12, 0],
           [3, 12, 4],
           [2, 12, 3],
           [6, 12, 2],
           [9, 12, 6],
           [8, 12, 9],
           [5, 12, 8],
           [1, 12, 5]],
          [[0, 12, 3],
           [5, 12, 0],
           [1, 12, 5],
           [2, 12, 1],
           [6, 12, 2],
           [9, 12, 6],
           [8, 12, 9],
           [4, 12, 8],
           [3, 12, 4]],
          [[1, 0, 5], [2, 6, 9], [4, 2, 9], [8, 4, 9], [3, 2, 4]],
          [[0, 3, 1],
           [3, 2, 1],
           [1, 2, 6],
           [5, 1, 6],
           [9, 5, 6],
           [8, 5, 9],
           [8, 4, 5],
           [4, 0, 5],
           [4, 3, 0]]],
         [[[3, 2, 7], [0, 4, 1], [11, 1, 4], [1, 11, 9]],
          [[3, 0, 4], [2, 7, 1], [11, 1, 7], [1, 11, 9]],
          [[3, 4, 7],
           [11, 7, 4],
           [7, 11, 9],
           [7, 9, 2],
           [1, 2, 9],
           [2, 1, 0],
           [2, 0, 3],
           [4, 3, 0]],
          [[12, 4, 3],
           [12, 3, 2],
           [12, 2, 7],
           [12, 7, 11],
           [12, 11, 9],
           [12, 9, 1],
           [12, 1, 0],
           [12, 0, 4]],
          [[12, 11, 9],
           [12, 9, 1],
           [12, 1, 2],
           [12, 2, 7],
           [12, 7, 3],
           [12, 3, 0],
           [12, 0, 4],
           [12, 4, 11]]],
         [[[4, 3, 0], [1, 10, 9], [2, 10, 1]],
          [[3, 0, 1],
           [2, 3, 1],
           [10, 3, 2],
           [4, 3, 10],
           [9, 4, 10],
           [4, 9, 0],
           [9, 1, 0]],
          [[10, 9, 4], [3, 10, 4], [2, 10, 3], [4, 9, 0], [1, 0, 9]]],
         [[[4, 3, 0], [10, 7, 11], [2, 6, 1]],
          [[1, 0, 4], [6, 1, 4], [2, 6, 4], [3, 2, 4], [10, 7, 11]],
          [[4, 11, 0], [11, 10, 0], [10, 7, 0], [7, 3, 0], [2, 6, 1]],
          [[10, 6, 1], [11, 10, 1], [2, 11, 1], [2, 7, 11], [4, 3, 0]],
          [[2, 12, 1],
           [7, 12, 2],
           [3, 12, 7],
           [0, 12, 3],
           [4, 12, 0],
           [11, 12, 4],
           [10, 12, 11],
           [6, 12, 10],
           [1, 12, 6]],
          [[7, 12, 2],
           [11, 12, 7],
           [10, 12, 11],
           [6, 12, 10],
           [1, 12, 6],
           [0, 12, 1],
           [4, 12, 0],
           [3, 12, 4],
           [2, 12, 3]],
          [[7, 12, 10],
           [3, 12, 7],
           [2, 12, 3],
           [6, 12, 2],
           [1, 12, 6],
           [0, 12, 1],
           [4, 12, 0],
           [11, 12, 4],
           [10, 12, 11]],
          [[2, 7, 3], [6, 1, 0], [11, 6, 0], [4, 11, 0], [10, 6, 11]],
          [[7, 10, 2],
           [10, 6, 2],
           [2, 6, 1],
           [3, 2, 1],
           [0, 3, 1],
           [4, 3, 0],
           [4, 11, 3],
           [11, 7, 3],
           [11, 10, 7]]],
         [[[3, 0, 4], [1, 2, 6]], [[3, 6, 4], [6, 0, 4], [6, 1, 0], [3, 2, 6]]],
         [[[6, 2, 5], [5, 2, 0]]],
         [[[7, 10, 11], [0, 5, 2], [2, 5, 6]],
          [[2, 7, 10],
           [2, 10, 6],
           [6, 10, 5],
           [5, 10, 11],
           [5, 11, 0],
           [7, 0, 11],
           [7, 2, 0]],
          [[11, 0, 5], [11, 5, 10], [10, 5, 6], [7, 0, 11], [0, 7, 2]]],
         [[[0, 10, 2], [0, 5, 9], [0, 9, 10]]],
         [[[11, 7, 2], [5, 11, 2], [5, 2, 0], [9, 11, 5]]],
         [[[8, 2, 0], [8, 9, 6], [8, 6, 2]]],
         [[[10, 11, 7], [9, 6, 8], [2, 8, 6], [8, 2, 0]],
          [[10, 9, 6], [11, 7, 8], [2, 8, 7], [8, 2, 0]],
          [[10, 6, 7],
           [2, 7, 6],
           [7, 2, 0],
           [7, 0, 11],
           [8, 11, 0],
           [11, 8, 9],
           [11, 9, 10],
           [6, 10, 9]],
          [[12, 6, 10],
           [12, 10, 11],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 0],
           [12, 0, 8],
           [12, 8, 9],
           [12, 9, 6]],
          [[12, 2, 0],
           [12, 0, 8],
           [12, 8, 11],
           [12, 11, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 6],
           [12, 6, 2]]],
         [[[8, 2, 0], [8, 10, 2]]],
         [[[0, 8, 2], [11, 7, 2], [8, 11, 2]]],
         [[[8, 4, 11], [6, 2, 5], [5, 2, 0]],
          [[5, 8, 4],
           [5, 4, 0],
           [0, 4, 2],
           [2, 4, 11],
           [2, 11, 6],
           [8, 6, 11],
           [8, 5, 6]],
          [[11, 6, 2], [11, 2, 4], [4, 2, 0], [8, 6, 11], [6, 8, 5]]],
         [[[10, 4, 7], [10, 8, 4], [2, 0, 5], [2, 5, 6]],
          [[10, 5, 6], [10, 8, 5], [7, 0, 4], [7, 2, 0]],
          [[10, 8, 6],
           [6, 8, 5],
           [10, 6, 7],
           [7, 6, 2],
           [7, 2, 4],
           [2, 0, 4],
           [8, 4, 5],
           [4, 0, 5]],
          [[5, 12, 8],
           [8, 12, 10],
           [10, 12, 7],
           [7, 12, 4],
           [4, 12, 0],
           [0, 12, 2],
           [2, 12, 6],
           [6, 12, 5]],
          [[4, 12, 8],
           [7, 12, 4],
           [2, 12, 7],
           [0, 12, 2],
           [5, 12, 0],
           [6, 12, 5],
           [10, 12, 6],
           [8, 12, 10]]],
         [[[8, 4, 11], [5, 9, 0], [10, 0, 9], [0, 10, 2]],
          [[8, 5, 9], [4, 11, 0], [10, 0, 11], [0, 10, 2]],
          [[8, 9, 11],
           [10, 11, 9],
           [11, 10, 2],
           [11, 2, 4],
           [0, 4, 2],
           [4, 0, 5],
           [4, 5, 8],
           [9, 8, 5]],
          [[12, 9, 8],
           [12, 8, 4],
           [12, 4, 11],
           [12, 11, 10],
           [12, 10, 2],
           [12, 2, 0],
           [12, 0, 5],
           [12, 5, 9]],
          [[12, 10, 2],
           [12, 2, 0],
           [12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 9],
           [12, 9, 10]]],
         [[[9, 8, 5], [0, 7, 2], [4, 7, 0]],
          [[8, 5, 0],
           [4, 8, 0],
           [7, 8, 4],
           [9, 8, 7],
           [2, 9, 7],
           [9, 2, 5],
           [2, 0, 5]],
          [[7, 2, 9], [8, 7, 9], [4, 7, 8], [9, 2, 5], [0, 5, 2]]],
         [[[9, 6, 2], [4, 9, 2], [4, 2, 0], [4, 11, 9]]],
         [[[9, 6, 10], [7, 0, 4], [2, 0, 7]],
          [[6, 10, 7],
           [2, 6, 7],
           [0, 6, 2],
           [9, 6, 0],
           [4, 9, 0],
           [9, 4, 10],
           [4, 7, 10]],
          [[0, 4, 9], [6, 0, 9], [2, 0, 6], [9, 4, 10], [7, 10, 4]]],
         [[[0, 10, 2], [0, 4, 11], [0, 11, 10]]],
         [[[7, 2, 4], [4, 2, 0]]],
         [[[7, 5, 6], [7, 3, 0], [7, 0, 5]]],
         [[[6, 10, 11], [0, 6, 11], [0, 11, 3], [0, 5, 6]]],
         [[[0, 5, 3], [3, 5, 7], [5, 9, 7], [7, 9, 10]]],
         [[[11, 3, 9], [0, 5, 9], [3, 0, 9]]],
         [[[8, 9, 6], [3, 8, 6], [3, 6, 7], [0, 8, 3]]],
         [[[6, 10, 9], [8, 3, 0], [11, 3, 8]],
          [[10, 9, 8],
           [11, 10, 8],
           [3, 10, 11],
           [6, 10, 3],
           [0, 6, 3],
           [6, 0, 9],
           [0, 8, 9]],
          [[3, 0, 6], [10, 3, 6], [11, 3, 10], [6, 0, 9], [8, 9, 0]]],
         [[[8, 10, 0], [7, 3, 0], [10, 7, 0]]],
         [[[3, 0, 11], [11, 0, 8]]],
         [[[4, 11, 8], [3, 0, 7], [5, 7, 0], [7, 5, 6]],
          [[4, 3, 0], [11, 8, 7], [5, 7, 8], [7, 5, 6]],
          [[4, 0, 8],
           [5, 8, 0],
           [8, 5, 6],
           [8, 6, 11],
           [7, 11, 6],
           [11, 7, 3],
           [11, 3, 4],
           [0, 4, 3]],
          [[12, 0, 4],
           [12, 4, 11],
           [12, 11, 8],
           [12, 8, 5],
           [12, 5, 6],
           [12, 6, 7],
           [12, 7, 3],
           [12, 3, 0]],
          [[12, 5, 6],
           [12, 6, 7],
           [12, 7, 11],
           [12, 11, 8],
           [12, 8, 4],
           [12, 4, 3],
           [12, 3, 0],
           [12, 0, 5]]],
         [[[3, 0, 4], [8, 6, 10], [5, 6, 8]],
          [[0, 4, 8],
           [5, 0, 8],
           [6, 0, 5],
           [3, 0, 6],
           [10, 3, 6],
           [3, 10, 4],
           [10, 8, 4]],
          [[6, 10, 3], [0, 6, 3], [5, 6, 0], [3, 10, 4], [8, 4, 10]]],
         [[[0, 4, 3], [9, 8, 5], [11, 10, 7]],
          [[7, 3, 0], [10, 7, 0], [11, 10, 0], [4, 11, 0], [9, 8, 5]],
          [[0, 5, 3], [5, 9, 3], [9, 8, 3], [8, 4, 3], [11, 10, 7]],
          [[9, 10, 7], [5, 9, 7], [11, 5, 7], [11, 8, 5], [0, 4, 3]],
          [[11, 12, 7],
           [8, 12, 11],
           [4, 12, 8],
           [3, 12, 4],
           [0, 12, 3],
           [5, 12, 0],
           [9, 12, 5],
           [10, 12, 9],
           [7, 12, 10]],
          [[8, 12, 11],
           [5, 12, 8],
           [9, 12, 5],
           [10, 12, 9],
           [7, 12, 10],
           [3, 12, 7],
           [0, 12, 3],
           [4, 12, 0],
           [11, 12, 4]],
          [[8, 12, 9],
           [4, 12, 8],
           [11, 12, 4],
           [10, 12, 11],
           [7, 12, 10],
           [3, 12, 7],
           [0, 12, 3],
           [5, 12, 0],
           [9, 12, 5]],
          [[11, 8, 4], [10, 7, 3], [5, 10, 3], [0, 5, 3], [9, 10, 5]],
          [[8, 9, 11],
           [9, 10, 11],
           [11, 10, 7],
           [4, 11, 7],
           [3, 4, 7],
           [0, 4, 3],
           [0, 5, 4],
           [5, 8, 4],
           [5, 9, 8]]],
         [[[8, 5, 9], [0, 4, 3]], [[8, 3, 9], [3, 5, 9], [3, 0, 5], [8, 4, 3]]],
         [[[0, 4, 3], [7, 9, 6], [11, 9, 7]],
          [[4, 3, 7],
           [11, 4, 7],
           [9, 4, 11],
           [0, 4, 9],
           [6, 0, 9],
           [0, 6, 3],
           [6, 7, 3]],
          [[9, 6, 0], [4, 9, 0], [11, 9, 4], [0, 6, 3], [7, 3, 6]]],
         [[[6, 10, 9], [4, 3, 0]],
          [[4, 3, 10], [6, 10, 3], [3, 0, 6], [9, 6, 0], [0, 4, 9], [9, 10, 4]]],
         [[[0, 4, 3], [10, 7, 11]], [[0, 10, 3], [0, 4, 10], [4, 11, 10], [10, 7, 3]]],
         [[[3, 0, 4]]],
         [[[4, 0, 3]]],
         [[[0, 3, 4], [10, 11, 7]], [[0, 10, 4], [0, 3, 10], [3, 7, 10], [10, 11, 4]]],
         [[[4, 0, 3], [10, 6, 9]],
          [[0, 6, 9], [6, 0, 3], [3, 10, 6], [10, 3, 4], [4, 9, 10], [9, 0, 4]]],
         [[[3, 4, 0], [6, 9, 7], [7, 9, 11]],
          [[7, 3, 4],
           [7, 4, 11],
           [11, 4, 9],
           [9, 4, 0],
           [9, 0, 6],
           [3, 6, 0],
           [3, 7, 6]],
          [[0, 6, 9], [0, 9, 4], [4, 9, 11], [3, 6, 0], [6, 3, 7]]],
         [[[3, 4, 0], [9, 5, 8]], [[3, 9, 0], [3, 4, 9], [4, 8, 9], [9, 5, 0]]],
         [[[3, 4, 0], [5, 8, 9], [7, 10, 11]],
          [[0, 3, 7], [0, 7, 10], [0, 10, 11], [0, 11, 4], [5, 8, 9]],
          [[3, 5, 0], [3, 9, 5], [3, 8, 9], [3, 4, 8], [7, 10, 11]],
          [[7, 10, 9], [7, 9, 5], [7, 5, 11], [5, 8, 11], [3, 4, 0]],
          [[7, 12, 11],
           [11, 12, 8],
           [8, 12, 4],
           [4, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 7]],
          [[11, 12, 8],
           [8, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 4],
           [4, 12, 11]],
          [[9, 12, 8],
           [8, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 9]],
          [[4, 8, 11], [3, 7, 10], [3, 10, 5], [3, 5, 0], [5, 10, 9]],
          [[11, 9, 8],
           [11, 10, 9],
           [7, 10, 11],
           [7, 11, 4],
           [7, 4, 3],
           [3, 4, 0],
           [4, 5, 0],
           [4, 8, 5],
           [8, 9, 5]]],
         [[[4, 0, 3], [10, 6, 8], [8, 6, 5]],
          [[8, 4, 0],
           [8, 0, 5],
           [5, 0, 6],
           [6, 0, 3],
           [6, 3, 10],
           [4, 10, 3],
           [4, 8, 10]],
          [[3, 10, 6], [3, 6, 0], [0, 6, 5], [4, 10, 3], [10, 4, 8]]],
         [[[4, 0, 3], [8, 11, 5], [7, 5, 11], [5, 7, 6]],
          [[4, 8, 11], [0, 3, 5], [7, 5, 3], [5, 7, 6]],
          [[4, 11, 3],
           [7, 3, 11],
           [3, 7, 6],
           [3, 6, 0],
           [5, 0, 6],
           [0, 5, 8],
           [0, 8, 4],
           [11, 4, 8]],
          [[12, 11, 4],
           [12, 4, 0],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 6],
           [12, 6, 5],
           [12, 5, 8],
           [12, 8, 11]],
          [[12, 7, 6],
           [12, 6, 5],
           [12, 5, 0],
           [12, 0, 3],
           [12, 3, 4],
           [12, 4, 8],
           [12, 8, 11],
           [12, 11, 7]]],
         [[[0, 3, 8], [8, 3, 11]]],
         [[[0, 10, 8], [0, 3, 7], [0, 7, 10]]],
         [[[9, 10, 6], [0, 3, 8], [8, 3, 11]],
          [[8, 9, 10],
           [8, 10, 11],
           [11, 10, 3],
           [3, 10, 6],
           [3, 6, 0],
           [9, 0, 6],
           [9, 8, 0]],
          [[6, 0, 3], [6, 3, 10], [10, 3, 11], [9, 0, 6], [0, 9, 8]]],
         [[[6, 9, 8], [3, 6, 8], [3, 8, 0], [7, 6, 3]]],
         [[[9, 3, 11], [9, 5, 0], [9, 0, 3]]],
         [[[0, 3, 5], [5, 3, 9], [3, 7, 9], [9, 7, 10]]],
         [[[11, 10, 6], [0, 11, 6], [0, 6, 5], [0, 3, 11]]],
         [[[5, 7, 6], [5, 0, 3], [5, 3, 7]]],
         [[[2, 7, 0], [0, 7, 4]]],
         [[[10, 0, 2], [10, 11, 4], [10, 4, 0]]],
         [[[10, 6, 9], [4, 0, 7], [7, 0, 2]],
          [[7, 10, 6],
           [7, 6, 2],
           [2, 6, 0],
           [0, 6, 9],
           [0, 9, 4],
           [10, 4, 9],
           [10, 7, 4]],
          [[9, 4, 0], [9, 0, 6], [6, 0, 2], [10, 4, 9], [4, 10, 7]]],
         [[[11, 4, 0], [6, 11, 0], [6, 0, 2], [6, 9, 11]]],
         [[[5, 8, 9], [2, 7, 0], [0, 7, 4]],
          [[0, 5, 8],
           [0, 8, 4],
           [4, 8, 7],
           [7, 8, 9],
           [7, 9, 2],
           [5, 2, 9],
           [5, 0, 2]],
          [[9, 2, 7], [9, 7, 8], [8, 7, 4], [5, 2, 9], [2, 5, 0]]],
         [[[8, 9, 5], [11, 4, 10], [0, 10, 4], [10, 0, 2]],
          [[8, 11, 4], [9, 5, 10], [0, 10, 5], [10, 0, 2]],
          [[8, 4, 5],
           [0, 5, 4],
           [5, 0, 2],
           [5, 2, 9],
           [10, 9, 2],
           [9, 10, 11],
           [9, 11, 8],
           [4, 8, 11]],
          [[12, 4, 8],
           [12, 8, 9],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 2],
           [12, 2, 10],
           [12, 10, 11],
           [12, 11, 4]],
          [[12, 0, 2],
           [12, 2, 10],
           [12, 10, 9],
           [12, 9, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 4],
           [12, 4, 0]]],
         [[[6, 8, 10], [6, 5, 8], [7, 4, 0], [7, 0, 2]],
          [[6, 0, 2], [6, 5, 0], [10, 4, 8], [10, 7, 4]],
          [[6, 5, 2],
           [2, 5, 0],
           [6, 2, 10],
           [10, 2, 7],
           [10, 7, 8],
           [7, 4, 8],
           [5, 8, 0],
           [8, 4, 0]],
          [[0, 12, 5],
           [5, 12, 6],
           [6, 12, 10],
           [10, 12, 8],
           [8, 12, 4],
           [4, 12, 7],
           [7, 12, 2],
           [2, 12, 0]],
          [[8, 12, 5],
           [10, 12, 8],
           [7, 12, 10],
           [4, 12, 7],
           [0, 12, 4],
           [2, 12, 0],
           [6, 12, 2],
           [5, 12, 6]]],
         [[[11, 4, 8], [5, 2, 6], [0, 2, 5]],
          [[4, 8, 5],
           [0, 4, 5],
           [2, 4, 0],
           [11, 4, 2],
           [6, 11, 2],
           [11, 6, 8],
           [6, 5, 8]],
          [[2, 6, 11], [4, 2, 11], [0, 2, 4], [11, 6, 8], [5, 8, 6]]],
         [[[2, 8, 0], [2, 7, 11], [2, 11, 8]]],
         [[[10, 0, 2], [10, 8, 0]]],
         [[[10, 6, 9], [7, 11, 2], [8, 2, 11], [2, 8, 0]],
          [[10, 7, 11], [6, 9, 2], [8, 2, 9], [2, 8, 0]],
          [[10, 11, 9],
           [8, 9, 11],
           [9, 8, 0],
           [9, 0, 6],
           [2, 6, 0],
           [6, 2, 7],
           [6, 7, 10],
           [11, 10, 7]],
          [[12, 11, 10],
           [12, 10, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 0],
           [12, 0, 2],
           [12, 2, 7],
           [12, 7, 11]],
          [[12, 8, 0],
           [12, 0, 2],
           [12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 11],
           [12, 11, 8]]],
         [[[2, 8, 0], [2, 6, 9], [2, 9, 8]]],
         [[[9, 5, 0], [7, 9, 0], [7, 0, 2], [11, 9, 7]]],
         [[[2, 10, 0], [9, 5, 0], [10, 9, 0]]],
         [[[10, 7, 11], [5, 0, 6], [6, 0, 2]],
          [[6, 10, 7],
           [6, 7, 2],
           [2, 7, 0],
           [0, 7, 11],
           [0, 11, 5],
           [10, 5, 11],
           [10, 6, 5]],
          [[11, 5, 0], [11, 0, 7], [7, 0, 2], [10, 5, 11], [5, 10, 6]]],
         [[[2, 5, 0], [6, 5, 2]]],
         [[[6, 2, 1], [4, 0, 3]], [[6, 4, 1], [6, 2, 4], [2, 3, 4], [4, 0, 1]]],
         [[[11, 7, 10], [6, 2, 1], [4, 0, 3]],
          [[10, 11, 4], [10, 4, 0], [10, 0, 3], [10, 3, 7], [6, 2, 1]],
          [[11, 6, 10], [11, 1, 6], [11, 2, 1], [11, 7, 2], [4, 0, 3]],
          [[4, 0, 1], [4, 1, 6], [4, 6, 3], [6, 2, 3], [11, 7, 10]],
          [[4, 12, 3],
           [3, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 4]],
          [[3, 12, 2],
           [2, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 7],
           [7, 12, 3]],
          [[1, 12, 2],
           [2, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 6],
           [6, 12, 1]],
          [[7, 2, 3], [11, 4, 0], [11, 0, 6], [11, 6, 10], [6, 0, 1]],
          [[3, 1, 2],
           [3, 0, 1],
           [4, 0, 3],
           [4, 3, 7],
           [4, 7, 11],
           [11, 7, 10],
           [7, 6, 10],
           [7, 2, 6],
           [2, 1, 6]]],
         [[[0, 3, 4], [9, 10, 1], [1, 10, 2]],
          [[1, 0, 3],
           [1, 3, 2],
           [2, 3, 10],
           [10, 3, 4],
           [10, 4, 9],
           [0, 9, 4],
           [0, 1, 9]],
          [[4, 9, 10], [4, 10, 3], [3, 10, 2], [0, 9, 4], [9, 0, 1]]],
         [[[3, 4, 0], [7, 2, 11], [1, 11, 2], [11, 1, 9]],
          [[3, 7, 2], [4, 0, 11], [1, 11, 0], [11, 1, 9]],
          [[3, 2, 0],
           [1, 0, 2],
           [0, 1, 9],
           [0, 9, 4],
           [11, 4, 9],
           [4, 11, 7],
           [4, 7, 3],
           [2, 3, 7]],
          [[12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 9],
           [12, 9, 11],
           [12, 11, 7],
           [12, 7, 2]],
          [[12, 1, 9],
           [12, 9, 11],
           [12, 11, 4],
           [12, 4, 0],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 2],
           [12, 2, 1]]],
         [[[9, 5, 8], [4, 0, 3], [6, 2, 1]],
          [[8, 9, 6], [8, 6, 2], [8, 2, 1], [8, 1, 5], [4, 0, 3]],
          [[9, 4, 8], [9, 3, 4], [9, 0, 3], [9, 5, 0], [6, 2, 1]],
          [[6, 2, 3], [6, 3, 4], [6, 4, 1], [4, 0, 1], [9, 5, 8]],
          [[6, 12, 1],
           [1, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 8],
           [8, 12, 4],
           [4, 12, 3],
           [3, 12, 2],
           [2, 12, 6]],
          [[1, 12, 0],
           [0, 12, 4],
           [4, 12, 3],
           [3, 12, 2],
           [2, 12, 6],
           [6, 12, 9],
           [9, 12, 8],
           [8, 12, 5],
           [5, 12, 1]],
          [[3, 12, 0],
           [0, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 6],
           [6, 12, 9],
           [9, 12, 8],
           [8, 12, 4],
           [4, 12, 3]],
          [[5, 0, 1], [9, 6, 2], [9, 2, 4], [9, 4, 8], [4, 2, 3]],
          [[1, 3, 0],
           [1, 2, 3],
           [6, 2, 1],
           [6, 1, 5],
           [6, 5, 9],
           [9, 5, 8],
           [5, 4, 8],
           [5, 0, 4],
           [0, 3, 4]]],
         [[[3, 4, 0], [8, 9, 5], [7, 10, 11], [1, 6, 2]],
          [[3, 4, 0], [1, 6, 2], [7, 10, 5], [5, 10, 9], [5, 11, 7], [5, 8, 11]],
          [[7, 10, 11], [1, 6, 2], [3, 4, 8], [3, 8, 9], [3, 5, 0], [3, 9, 5]],
          [[7, 10, 11], [8, 9, 5], [2, 4, 6], [3, 4, 2], [0, 1, 4], [1, 6, 4]],
          [[1, 6, 2], [8, 9, 5], [4, 10, 11], [0, 10, 4], [3, 7, 10], [3, 10, 0]],
          [[5, 8, 9], [3, 4, 0], [1, 10, 11], [1, 6, 10], [1, 11, 7], [1, 7, 2]],
          [[3, 4, 0], [7, 10, 11], [8, 6, 2], [8, 9, 6], [8, 2, 1], [8, 1, 5]],
          [[10, 11, 7],
           [6, 2, 12],
           [9, 6, 12],
           [8, 9, 12],
           [4, 8, 12],
           [3, 4, 12],
           [0, 3, 12],
           [5, 0, 12],
           [1, 5, 12],
           [2, 1, 12]],
          [[6, 2, 1],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 8],
           [12, 8, 9]],
          [[10, 11, 7],
           [8, 9, 12],
           [4, 8, 12],
           [3, 4, 12],
           [2, 3, 12],
           [6, 2, 12],
           [1, 6, 12],
           [0, 1, 12],
           [5, 0, 12],
           [9, 5, 12]],
          [[6, 2, 1],
           [0, 3, 12],
           [5, 0, 12],
           [9, 5, 12],
           [10, 9, 12],
           [7, 10, 12],
           [11, 7, 12],
           [8, 11, 12],
           [4, 8, 12],
           [3, 4, 12]],
          [[4, 0, 3],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 10],
           [12, 10, 11]],
          [[10, 11, 7],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 5],
           [12, 5, 8]],
          [[0, 3, 4],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 6],
           [12, 6, 2]],
          [[5, 8, 9],
           [4, 0, 12],
           [11, 4, 12],
           [10, 11, 12],
           [6, 10, 12],
           [1, 6, 12],
           [2, 1, 12],
           [7, 2, 12],
           [3, 7, 12],
           [0, 3, 12]],
          [[5, 8, 9],
           [10, 11, 12],
           [6, 10, 12],
           [1, 6, 12],
           [0, 1, 12],
           [4, 0, 12],
           [3, 4, 12],
           [2, 3, 12],
           [7, 2, 12],
           [11, 7, 12]],
          [[0, 3, 4],
           [2, 1, 12],
           [7, 2, 12],
           [11, 7, 12],
           [8, 11, 12],
           [5, 8, 12],
           [9, 5, 12],
           [10, 9, 12],
           [6, 10, 12],
           [1, 6, 12]],
          [[5, 8, 9],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 7],
           [12, 7, 10]],
          [[6, 2, 1],
           [12, 0, 3],
           [12, 3, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 5],
           [12, 5, 8],
           [12, 8, 11],
           [12, 11, 4],
           [12, 4, 0]],
          [[6, 2, 12],
           [9, 6, 12],
           [10, 9, 12],
           [7, 10, 12],
           [11, 7, 12],
           [8, 11, 12],
           [4, 8, 12],
           [3, 4, 12],
           [0, 3, 12],
           [5, 0, 12],
           [1, 5, 12],
           [2, 1, 12]],
          [[12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 8],
           [12, 8, 9],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3]],
          [[12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 10],
           [12, 10, 11],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1]],
          [[4, 0, 12],
           [11, 4, 12],
           [8, 11, 12],
           [5, 8, 12],
           [9, 5, 12],
           [10, 9, 12],
           [6, 10, 12],
           [1, 6, 12],
           [2, 1, 12],
           [7, 2, 12],
           [3, 7, 12],
           [0, 3, 12]],
          [[7, 10, 11], [5, 0, 1], [2, 3, 6], [9, 6, 3], [4, 9, 3], [9, 4, 8]],
          [[6, 2, 1], [4, 8, 11], [7, 0, 3], [0, 7, 10], [0, 10, 5], [9, 5, 10]],
          [[4, 0, 3], [6, 10, 9], [5, 2, 1], [2, 5, 8], [2, 8, 7], [11, 7, 8]],
          [[5, 8, 9], [7, 2, 3], [0, 1, 4], [11, 4, 1], [6, 11, 1], [11, 6, 10]],
          [[5, 0, 1],
           [4, 8, 11],
           [3, 4, 11],
           [7, 3, 11],
           [3, 7, 2],
           [6, 2, 7],
           [10, 6, 7],
           [6, 10, 9],
           [11, 9, 10],
           [9, 11, 8]],
          [[4, 8, 11],
           [2, 3, 7],
           [2, 7, 10],
           [2, 10, 6],
           [9, 6, 10],
           [6, 9, 5],
           [6, 5, 1],
           [0, 1, 5],
           [1, 0, 2],
           [3, 2, 0]],
          [[6, 10, 9],
           [0, 1, 5],
           [0, 5, 8],
           [0, 8, 4],
           [11, 4, 8],
           [4, 11, 7],
           [4, 7, 3],
           [2, 3, 7],
           [3, 2, 0],
           [1, 0, 2]],
          [[7, 2, 3],
           [6, 10, 9],
           [1, 6, 9],
           [5, 1, 9],
           [1, 5, 0],
           [4, 0, 5],
           [8, 4, 5],
           [11, 4, 8],
           [9, 11, 8],
           [11, 9, 10]]],
         [[[0, 3, 4], [1, 5, 2], [8, 2, 5], [2, 8, 10]],
          [[0, 1, 5], [3, 4, 2], [8, 2, 4], [2, 8, 10]],
          [[0, 5, 4],
           [8, 4, 5],
           [4, 8, 10],
           [4, 10, 3],
           [2, 3, 10],
           [3, 2, 1],
           [3, 1, 0],
           [5, 0, 1]],
          [[12, 5, 0],
           [12, 0, 3],
           [12, 3, 4],
           [12, 4, 8],
           [12, 8, 10],
           [12, 10, 2],
           [12, 2, 1],
           [12, 1, 5]],
          [[12, 8, 10],
           [12, 10, 2],
           [12, 2, 3],
           [12, 3, 4],
           [12, 4, 0],
           [12, 0, 1],
           [12, 1, 5],
           [12, 5, 8]]],
         [[[2, 3, 7], [11, 4, 8], [1, 5, 0]],
          [[7, 2, 1], [7, 1, 5], [7, 5, 0], [7, 0, 3], [11, 4, 8]],
          [[2, 11, 7], [2, 8, 11], [2, 4, 8], [2, 3, 4], [1, 5, 0]],
          [[1, 5, 8], [1, 8, 11], [1, 11, 0], [11, 4, 0], [2, 3, 7]],
          [[1, 12, 0],
           [0, 12, 4],
           [4, 12, 3],
           [3, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 8],
           [8, 12, 5],
           [5, 12, 1]],
          [[0, 12, 4],
           [4, 12, 11],
           [11, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 3],
           [3, 12, 0]],
          [[8, 12, 4],
           [4, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 11],
           [11, 12, 8]],
          [[3, 4, 0], [2, 1, 5], [2, 5, 11], [2, 11, 7], [11, 5, 8]],
          [[0, 8, 4],
           [0, 5, 8],
           [1, 5, 0],
           [1, 0, 3],
           [1, 3, 2],
           [2, 3, 7],
           [3, 11, 7],
           [3, 4, 11],
           [4, 8, 11]]],
         [[[2, 1, 6], [11, 8, 3], [3, 8, 0]],
          [[3, 2, 1],
           [3, 1, 0],
           [0, 1, 8],
           [8, 1, 6],
           [8, 6, 11],
           [2, 11, 6],
           [2, 3, 11]],
          [[6, 11, 8], [6, 8, 1], [1, 8, 0], [2, 11, 6], [11, 2, 3]]],
         [[[2, 1, 6], [3, 7, 0], [10, 0, 7], [0, 10, 8]],
          [[2, 3, 7], [1, 6, 0], [10, 0, 6], [0, 10, 8]],
          [[2, 7, 6],
           [10, 6, 7],
           [6, 10, 8],
           [6, 8, 1],
           [0, 1, 8],
           [1, 0, 3],
           [1, 3, 2],
           [7, 2, 3]],
          [[12, 7, 2],
           [12, 2, 1],
           [12, 1, 6],
           [12, 6, 10],
           [12, 10, 8],
           [12, 8, 0],
           [12, 0, 3],
           [12, 3, 7]],
          [[12, 10, 8],
           [12, 8, 0],
           [12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 7],
           [12, 7, 10]]],
         [[[8, 3, 11], [8, 0, 3], [10, 2, 1], [10, 1, 9]],
          [[8, 1, 9], [8, 0, 1], [11, 2, 3], [11, 10, 2]],
          [[8, 0, 9],
           [9, 0, 1],
           [8, 9, 11],
           [11, 9, 10],
           [11, 10, 3],
           [10, 2, 3],
           [0, 3, 1],
           [3, 2, 1]],
          [[1, 12, 0],
           [0, 12, 8],
           [8, 12, 11],
           [11, 12, 3],
           [3, 12, 2],
           [2, 12, 10],
           [10, 12, 9],
           [9, 12, 1]],
          [[3, 12, 0],
           [11, 12, 3],
           [10, 12, 11],
           [2, 12, 10],
           [1, 12, 2],
           [9, 12, 1],
           [8, 12, 9],
           [0, 12, 8]]],
         [[[7, 2, 3], [0, 9, 8], [1, 9, 0]],
          [[2, 3, 0],
           [1, 2, 0],
           [9, 2, 1],
           [7, 2, 9],
           [8, 7, 9],
           [7, 8, 3],
           [8, 0, 3]],
          [[9, 8, 7], [2, 9, 7], [1, 9, 2], [7, 8, 3], [0, 3, 8]]],
         [[[1, 6, 2], [5, 0, 9], [3, 9, 0], [9, 3, 11]],
          [[1, 5, 0], [6, 2, 9], [3, 9, 2], [9, 3, 11]],
          [[1, 0, 2],
           [3, 2, 0],
           [2, 3, 11],
           [2, 11, 6],
           [9, 6, 11],
           [6, 9, 5],
           [6, 5, 1],
           [0, 1, 5]],
          [[12, 0, 1],
           [12, 1, 6],
           [12, 6, 2],
           [12, 2, 3],
           [12, 3, 11],
           [12, 11, 9],
           [12, 9, 5],
           [12, 5, 0]],
          [[12, 3, 11],
           [12, 11, 9],
           [12, 9, 6],
           [12, 6, 2],
           [12, 2, 1],
           [12, 1, 5],
           [12, 5, 0],
           [12, 0, 3]]],
         [[[7, 2, 3], [0, 1, 5], [10, 9, 6]],
          [[3, 7, 10], [3, 10, 9], [3, 9, 6], [3, 6, 2], [0, 1, 5]],
          [[7, 0, 3], [7, 5, 0], [7, 1, 5], [7, 2, 1], [10, 9, 6]],
          [[10, 9, 5], [10, 5, 0], [10, 0, 6], [0, 1, 6], [7, 2, 3]],
          [[10, 12, 6],
           [6, 12, 1],
           [1, 12, 2],
           [2, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 10]],
          [[6, 12, 1],
           [1, 12, 0],
           [0, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 2],
           [2, 12, 6]],
          [[5, 12, 1],
           [1, 12, 2],
           [2, 12, 6],
           [6, 12, 9],
           [9, 12, 10],
           [10, 12, 7],
           [7, 12, 3],
           [3, 12, 0],
           [0, 12, 5]],
          [[2, 1, 6], [7, 10, 9], [7, 9, 0], [7, 0, 3], [0, 9, 5]],
          [[6, 5, 1],
           [6, 9, 5],
           [10, 9, 6],
           [10, 6, 2],
           [10, 2, 7],
           [7, 2, 3],
           [2, 0, 3],
           [2, 1, 0],
           [1, 5, 0]]],
         [[[0, 1, 5], [11, 10, 3], [3, 10, 2]],
          [[3, 0, 1],
           [3, 1, 2],
           [2, 1, 10],
           [10, 1, 5],
           [10, 5, 11],
           [0, 11, 5],
           [0, 3, 11]],
          [[5, 11, 10], [5, 10, 1], [1, 10, 2], [0, 11, 5], [11, 0, 3]]],
         [[[0, 1, 5], [2, 3, 7]], [[0, 7, 5], [7, 1, 5], [7, 2, 1], [0, 3, 7]]],
         [[[4, 6, 7], [4, 0, 1], [4, 1, 6]]],
         [[[10, 11, 6], [6, 11, 1], [11, 4, 1], [1, 4, 0]]],
         [[[4, 0, 1], [10, 4, 1], [10, 1, 9], [7, 4, 10]]],
         [[[9, 11, 1], [4, 0, 1], [11, 4, 1]]],
         [[[5, 8, 9], [0, 1, 4], [6, 4, 1], [4, 6, 7]],
          [[5, 0, 1], [8, 9, 4], [6, 4, 9], [4, 6, 7]],
          [[5, 1, 9],
           [6, 9, 1],
           [9, 6, 7],
           [9, 7, 8],
           [4, 8, 7],
           [8, 4, 0],
           [8, 0, 5],
           [1, 5, 0]],
          [[12, 1, 5],
           [12, 5, 8],
           [12, 8, 9],
           [12, 9, 6],
           [12, 6, 7],
           [12, 7, 4],
           [12, 4, 0],
           [12, 0, 1]],
          [[12, 6, 7],
           [12, 7, 4],
           [12, 4, 8],
           [12, 8, 9],
           [12, 9, 5],
           [12, 5, 0],
           [12, 0, 1],
           [12, 1, 6]]],
         [[[1, 5, 0], [4, 8, 11], [6, 10, 9]],
          [[0, 1, 6], [0, 6, 10], [0, 10, 9], [0, 9, 5], [4, 8, 11]],
          [[1, 4, 0], [1, 11, 4], [1, 8, 11], [1, 5, 8], [6, 10, 9]],
          [[6, 10, 11], [6, 11, 4], [6, 4, 9], [4, 8, 9], [1, 5, 0]],
          [[6, 12, 9],
           [9, 12, 8],
           [8, 12, 5],
           [5, 12, 1],
           [1, 12, 0],
           [0, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 6]],
          [[9, 12, 8],
           [8, 12, 4],
           [4, 12, 11],
           [11, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 5],
           [5, 12, 9]],
          [[11, 12, 8],
           [8, 12, 5],
           [5, 12, 9],
           [9, 12, 10],
           [10, 12, 6],
           [6, 12, 1],
           [1, 12, 0],
           [0, 12, 4],
           [4, 12, 11]],
          [[5, 8, 9], [1, 6, 10], [1, 10, 4], [1, 4, 0], [4, 10, 11]],
          [[9, 11, 8],
           [9, 10, 11],
           [6, 10, 9],
           [6, 9, 5],
           [6, 5, 1],
           [1, 5, 0],
           [5, 4, 0],
           [5, 8, 4],
           [8, 11, 4]]],
         [[[5, 0, 1], [10, 7, 8], [8, 7, 4]],
          [[8, 5, 0],
           [8, 0, 4],
           [4, 0, 7],
           [7, 0, 1],
           [7, 1, 10],
           [5, 10, 1],
           [5, 8, 10]],
          [[1, 10, 7], [1, 7, 0], [0, 7, 4], [5, 10, 1], [10, 5, 8]]],
         [[[11, 4, 8], [1, 5, 0]], [[11, 1, 8], [11, 4, 1], [4, 0, 1], [1, 5, 8]]],
         [[[7, 11, 8], [1, 7, 8], [1, 8, 0], [1, 6, 7]]],
         [[[8, 0, 10], [1, 6, 10], [0, 1, 10]]],
         [[[11, 10, 7], [0, 1, 8], [8, 1, 9]],
          [[8, 11, 10],
           [8, 10, 9],
           [9, 10, 1],
           [1, 10, 7],
           [1, 7, 0],
           [11, 0, 7],
           [11, 8, 0]],
          [[7, 0, 1], [7, 1, 10], [10, 1, 9], [11, 0, 7], [0, 11, 8]]],
         [[[0, 1, 8], [8, 1, 9]]],
         [[[0, 1, 5], [9, 7, 11], [6, 7, 9]],
          [[1, 5, 9],
           [6, 1, 9],
           [7, 1, 6],
           [0, 1, 7],
           [11, 0, 7],
           [0, 11, 5],
           [11, 9, 5]],
          [[7, 11, 0], [1, 7, 0], [6, 7, 1], [0, 11, 5], [9, 5, 11]]],
         [[[10, 9, 6], [0, 1, 5]], [[10, 0, 6], [10, 9, 0], [9, 5, 0], [0, 1, 6]]],
         [[[5, 0, 1], [10, 7, 11]],
          [[0, 7, 11], [7, 0, 1], [1, 10, 7], [10, 1, 5], [5, 11, 10], [11, 0, 5]]],
         [[[5, 0, 1]]],
         [[[3, 4, 1], [1, 4, 5]]],
         [[[11, 7, 10], [5, 1, 4], [4, 1, 3]],
          [[4, 11, 7],
           [4, 7, 3],
           [3, 7, 1],
           [1, 7, 10],
           [1, 10, 5],
           [11, 5, 10],
           [11, 4, 5]],
          [[10, 5, 1], [10, 1, 7], [7, 1, 3], [11, 5, 10], [5, 11, 4]]],
         [[[6, 9, 10], [3, 4, 1], [1, 4, 5]],
          [[1, 6, 9],
           [1, 9, 5],
           [5, 9, 4],
           [4, 9, 10],
           [4, 10, 3],
           [6, 3, 10],
           [6, 1, 3]],
          [[10, 3, 4], [10, 4, 9], [9, 4, 5], [6, 3, 10], [3, 6, 1]]],
         [[[7, 9, 11], [7, 6, 9], [4, 5, 1], [4, 1, 3]],
          [[7, 1, 3], [7, 6, 1], [11, 5, 9], [11, 4, 5]],
          [[7, 6, 3],
           [3, 6, 1],
           [7, 3, 11],
           [11, 3, 4],
           [11, 4, 9],
           [4, 5, 9],
           [6, 9, 1],
           [9, 5, 1]],
          [[1, 12, 6],
           [6, 12, 7],
           [7, 12, 11],
           [11, 12, 9],
           [9, 12, 5],
           [5, 12, 4],
           [4, 12, 3],
           [3, 12, 1]],
          [[9, 12, 6],
           [11, 12, 9],
           [4, 12, 11],
           [5, 12, 4],
           [1, 12, 5],
           [3, 12, 1],
           [7, 12, 3],
           [6, 12, 7]]],
         [[[3, 9, 1], [3, 4, 8], [3, 8, 9]]],
         [[[11, 7, 10], [4, 8, 3], [9, 3, 8], [3, 9, 1]],
          [[11, 4, 8], [7, 10, 3], [9, 3, 10], [3, 9, 1]],
          [[11, 8, 10],
           [9, 10, 8],
           [10, 9, 1],
           [10, 1, 7],
           [3, 7, 1],
           [7, 3, 4],
           [7, 4, 11],
           [8, 11, 4]],
          [[12, 8, 11],
           [12, 11, 7],
           [12, 7, 10],
           [12, 10, 9],
           [12, 9, 1],
           [12, 1, 3],
           [12, 3, 4],
           [12, 4, 8]],
          [[12, 9, 1],
           [12, 1, 3],
           [12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 8],
           [12, 8, 9]]],
         [[[3, 4, 8], [6, 3, 8], [6, 8, 10], [1, 3, 6]]],
         [[[8, 11, 4], [3, 6, 1], [7, 6, 3]],
          [[11, 4, 3],
           [7, 11, 3],
           [6, 11, 7],
           [8, 11, 6],
           [1, 8, 6],
           [8, 1, 4],
           [1, 3, 4]],
          [[6, 1, 8], [11, 6, 8], [7, 6, 11], [8, 1, 4], [3, 4, 1]]],
         [[[11, 1, 3], [11, 8, 5], [11, 5, 1]]],
         [[[8, 5, 1], [7, 8, 1], [7, 1, 3], [7, 10, 8]]],
         [[[9, 10, 6], [8, 5, 11], [1, 11, 5], [11, 1, 3]],
          [[9, 8, 5], [10, 6, 11], [1, 11, 6], [11, 1, 3]],
          [[9, 5, 6],
           [1, 6, 5],
           [6, 1, 3],
           [6, 3, 10],
           [11, 10, 3],
           [10, 11, 8],
           [10, 8, 9],
           [5, 9, 8]],
          [[12, 5, 9],
           [12, 9, 10],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 3],
           [12, 3, 11],
           [12, 11, 8],
           [12, 8, 5]],
          [[12, 1, 3],
           [12, 3, 11],
           [12, 11, 10],
           [12, 10, 6],
           [12, 6, 9],
           [12, 9, 8],
           [12, 8, 5],
           [12, 5, 1]]],
         [[[8, 5, 9], [6, 3, 7], [1, 3, 6]],
          [[5, 9, 6],
           [1, 5, 6],
           [3, 5, 1],
           [8, 5, 3],
           [7, 8, 3],
           [8, 7, 9],
           [7, 6, 9]],
          [[3, 7, 8], [5, 3, 8], [1, 3, 5], [8, 7, 9], [6, 9, 7]]],
         [[[1, 11, 9], [1, 3, 11]]],
         [[[3, 9, 1], [3, 7, 10], [3, 10, 9]]],
         [[[3, 11, 1], [10, 6, 1], [11, 10, 1]]],
         [[[6, 3, 7], [1, 3, 6]]],
         [[[5, 7, 4], [5, 1, 2], [5, 2, 7]]],
         [[[10, 11, 4], [1, 10, 4], [1, 4, 5], [2, 10, 1]]],
         [[[6, 9, 10], [1, 2, 5], [7, 5, 2], [5, 7, 4]],
          [[6, 1, 2], [9, 10, 5], [7, 5, 10], [5, 7, 4]],
          [[6, 2, 10],
           [7, 10, 2],
           [10, 7, 4],
           [10, 4, 9],
           [5, 9, 4],
           [9, 5, 1],
           [9, 1, 6],
           [2, 6, 1]],
          [[12, 2, 6],
           [12, 6, 9],
           [12, 9, 10],
           [12, 10, 7],
           [12, 7, 4],
           [12, 4, 5],
           [12, 5, 1],
           [12, 1, 2]],
          [[12, 7, 4],
           [12, 4, 5],
           [12, 5, 9],
           [12, 9, 10],
           [12, 10, 6],
           [12, 6, 1],
           [12, 1, 2],
           [12, 2, 7]]],
         [[[6, 1, 2], [11, 4, 9], [9, 4, 5]],
          [[9, 6, 1],
           [9, 1, 5],
           [5, 1, 4],
           [4, 1, 2],
           [4, 2, 11],
           [6, 11, 2],
           [6, 9, 11]],
          [[2, 11, 4], [2, 4, 1], [1, 4, 5], [6, 11, 2], [11, 6, 9]]],
         [[[1, 2, 7], [8, 1, 7], [8, 7, 4], [8, 9, 1]]],
         [[[8, 11, 4], [1, 2, 9], [9, 2, 10]],
          [[9, 8, 11],
           [9, 11, 10],
           [10, 11, 2],
           [2, 11, 4],
           [2, 4, 1],
           [8, 1, 4],
           [8, 9, 1]],
          [[4, 1, 2], [4, 2, 11], [11, 2, 10], [8, 1, 4], [1, 8, 9]]],
         [[[2, 6, 1], [4, 8, 7], [7, 8, 10]],
          [[7, 2, 6],
           [7, 6, 10],
           [10, 6, 8],
           [8, 6, 1],
           [8, 1, 4],
           [2, 4, 1],
           [2, 7, 4]],
          [[1, 4, 8], [1, 8, 6], [6, 8, 10], [2, 4, 1], [4, 2, 7]]],
         [[[6, 1, 2], [11, 4, 8]],
          [[1, 4, 8], [4, 1, 2], [2, 11, 4], [11, 2, 6], [6, 8, 11], [8, 1, 6]]],
         [[[11, 8, 7], [7, 8, 2], [8, 5, 2], [2, 5, 1]]],
         [[[10, 8, 2], [5, 1, 2], [8, 5, 2]]],
         [[[5, 9, 8], [2, 6, 1], [10, 7, 11]],
          [[11, 8, 5], [7, 11, 5], [10, 7, 5], [9, 10, 5], [2, 6, 1]],
          [[5, 1, 8], [1, 2, 8], [2, 6, 8], [6, 9, 8], [10, 7, 11]],
          [[2, 7, 11], [1, 2, 11], [10, 1, 11], [10, 6, 1], [5, 9, 8]],
          [[10, 12, 11],
           [6, 12, 10],
           [9, 12, 6],
           [8, 12, 9],
           [5, 12, 8],
           [1, 12, 5],
           [2, 12, 1],
           [7, 12, 2],
           [11, 12, 7]],
          [[6, 12, 10],
           [1, 12, 6],
           [2, 12, 1],
           [7, 12, 2],
           [11, 12, 7],
           [8, 12, 11],
           [5, 12, 8],
           [9, 12, 5],
           [10, 12, 9]],
          [[6, 12, 2],
           [9, 12, 6],
           [10, 12, 9],
           [7, 12, 10],
           [11, 12, 7],
           [8, 12, 11],
           [5, 12, 8],
           [1, 12, 5],
           [2, 12, 1]],
          [[10, 6, 9], [7, 11, 8], [1, 7, 8], [5, 1, 8], [2, 7, 1]],
          [[6, 2, 10],
           [2, 7, 10],
           [10, 7, 11],
           [9, 10, 11],
           [8, 9, 11],
           [5, 9, 8],
           [5, 1, 9],
           [1, 6, 9],
           [1, 2, 6]]],
         [[[8, 5, 9], [2, 6, 1]], [[8, 2, 9], [8, 5, 2], [5, 1, 2], [2, 6, 9]]],
         [[[1, 11, 9], [1, 2, 7], [1, 7, 11]]],
         [[[1, 10, 9], [2, 10, 1]]],
         [[[2, 6, 1], [10, 7, 11]], [[2, 11, 1], [11, 6, 1], [11, 10, 6], [2, 7, 11]]],
         [[[1, 2, 6]]],
         [[[6, 4, 5], [6, 2, 3], [6, 3, 4]]],
         [[[7, 10, 11], [2, 3, 6], [4, 6, 3], [6, 4, 5]],
          [[7, 2, 3], [10, 11, 6], [4, 6, 11], [6, 4, 5]],
          [[7, 3, 11],
           [4, 11, 3],
           [11, 4, 5],
           [11, 5, 10],
           [6, 10, 5],
           [10, 6, 2],
           [10, 2, 7],
           [3, 7, 2]],
          [[12, 3, 7],
           [12, 7, 10],
           [12, 10, 11],
           [12, 11, 4],
           [12, 4, 5],
           [12, 5, 6],
           [12, 6, 2],
           [12, 2, 3]],
          [[12, 4, 5],
           [12, 5, 6],
           [12, 6, 10],
           [12, 10, 11],
           [12, 11, 7],
           [12, 7, 2],
           [12, 2, 3],
           [12, 3, 4]]],
         [[[5, 9, 10], [3, 5, 10], [3, 10, 2], [3, 4, 5]]],
         [[[2, 3, 7], [11, 5, 9], [4, 5, 11]],
          [[3, 7, 11],
           [4, 3, 11],
           [5, 3, 4],
           [2, 3, 5],
           [9, 2, 5],
           [2, 9, 7],
           [9, 11, 7]],
          [[5, 9, 2], [3, 5, 2], [4, 5, 3], [2, 9, 7], [11, 7, 9]]],
         [[[3, 4, 2], [2, 4, 6], [4, 8, 6], [6, 8, 9]]],
         [[[8, 11, 4], [6, 10, 9], [7, 2, 3]],
          [[3, 4, 8], [2, 3, 8], [7, 2, 8], [11, 7, 8], [6, 10, 9]],
          [[8, 9, 4], [9, 6, 4], [6, 10, 4], [10, 11, 4], [7, 2, 3]],
          [[6, 2, 3], [9, 6, 3], [7, 9, 3], [7, 10, 9], [8, 11, 4]],
          [[7, 12, 3],
           [10, 12, 7],
           [11, 12, 10],
           [4, 12, 11],
           [8, 12, 4],
           [9, 12, 8],
           [6, 12, 9],
           [2, 12, 6],
           [3, 12, 2]],
          [[10, 12, 7],
           [9, 12, 10],
           [6, 12, 9],
           [2, 12, 6],
           [3, 12, 2],
           [4, 12, 3],
           [8, 12, 4],
           [11, 12, 8],
           [7, 12, 11]],
          [[10, 12, 6],
           [11, 12, 10],
           [7, 12, 11],
           [2, 12, 7],
           [3, 12, 2],
           [4, 12, 3],
           [8, 12, 4],
           [9, 12, 8],
           [6, 12, 9]],
          [[7, 10, 11], [2, 3, 4], [9, 2, 4], [8, 9, 4], [6, 2, 9]],
          [[10, 6, 7],
           [6, 2, 7],
           [7, 2, 3],
           [11, 7, 3],
           [4, 11, 3],
           [8, 11, 4],
           [8, 9, 11],
           [9, 10, 11],
           [9, 6, 10]]],
         [[[10, 2, 8], [3, 4, 8], [2, 3, 8]]],
         [[[11, 4, 8], [3, 7, 2]], [[11, 2, 8], [2, 4, 8], [2, 3, 4], [11, 7, 2]]],
         [[[6, 2, 3], [8, 6, 3], [8, 3, 11], [5, 6, 8]]],
         [[[3, 7, 2], [6, 8, 5], [10, 8, 6]],
          [[7, 2, 6],
           [10, 7, 6],
           [8, 7, 10],
           [3, 7, 8],
           [5, 3, 8],
           [3, 5, 2],
           [5, 6, 2]],
          [[8, 5, 3], [7, 8, 3], [10, 8, 7], [3, 5, 2], [6, 2, 5]]],
         [[[5, 9, 8], [11, 2, 3], [10, 2, 11]],
          [[9, 8, 11],
           [10, 9, 11],
           [2, 9, 10],
           [5, 9, 2],
           [3, 5, 2],
           [5, 3, 8],
           [3, 11, 8]],
          [[2, 3, 5], [9, 2, 5], [10, 2, 9], [5, 3, 8], [11, 8, 3]]],
         [[[2, 3, 7], [8, 5, 9]],
          [[8, 5, 3], [2, 3, 5], [5, 9, 2], [7, 2, 9], [9, 8, 7], [7, 3, 8]]],
         [[[9, 3, 11], [9, 6, 2], [9, 2, 3]]],
         [[[6, 10, 9], [7, 2, 3]], [[6, 3, 9], [3, 10, 9], [3, 7, 10], [6, 2, 3]]],
         [[[2, 3, 10], [10, 3, 11]]],
         [[[7, 2, 3]]],
         [[[4, 6, 7], [4, 5, 6]]],
         [[[5, 6, 4], [10, 11, 4], [6, 10, 4]]],
         [[[4, 5, 7], [9, 10, 7], [5, 9, 7]]],
         [[[5, 11, 4], [9, 11, 5]]],
         [[[7, 4, 6], [8, 9, 6], [4, 8, 6]]],
         [[[8, 11, 4], [10, 9, 6]], [[8, 6, 4], [6, 11, 4], [6, 10, 11], [8, 9, 6]]],
         [[[4, 10, 7], [8, 10, 4]]],
         [[[11, 4, 8]]],
         [[[7, 5, 6], [7, 11, 8], [7, 8, 5]]],
         [[[6, 10, 5], [5, 10, 8]]],
         [[[7, 11, 10], [5, 9, 8]], [[7, 5, 10], [7, 11, 5], [11, 8, 5], [5, 9, 10]]],
         [[[9, 8, 5]]],
         [[[7, 9, 6], [11, 9, 7]]],
         [[[10, 9, 6]]],
         [[[10, 7, 11]]],
         [[[]]]]
        MarchingCubes33Lookup.FaceTests = [[[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[4, 5, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[7, 4, 5, 6]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[2, 3, 7, 6]],
         [[]],
         [[]],
         [[4, 5, 6, 7]],
         [[2, 3, 7, 6]],
         [[]],
         [[7, 3, 0, 4]],
         [[]],
         [[2, 3, 7, 6], [3, 0, 4, 7], [6, 7, 4, 5]],
         [[]],
         [[7, 3, 0, 4]],
         [[]],
         [[7, 6, 2, 3], [4, 7, 3, 0]],
         [[]],
         [[]],
         [[6, 2, 3, 7]],
         [[]],
         [[]],
         [[6, 5, 1, 2]],
         [[3, 7, 6, 2], [7, 4, 5, 6], [2, 6, 5, 1]],
         [[]],
         [[]],
         [[]],
         [[6, 2, 3, 7]],
         [[7, 4, 5, 6]],
         [[]],
         [[1, 2, 6, 5]],
         [[6, 5, 1, 2], [7, 6, 2, 3]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[6, 5, 1, 2]],
         [[6, 7, 4, 5], [2, 6, 5, 1]],
         [[]],
         [[]],
         [[0, 4, 7, 3]],
         [[]],
         [[7, 3, 0, 4], [6, 7, 4, 5]],
         [[]],
         [[0, 3, 7, 4], [1, 2, 6, 5]],
         [[1, 5, 6, 2]],
         [[0, 3, 7, 4]],
         [[]],
         [[]],
         [[]],
         [[2, 6, 5, 1]],
         [[5, 1, 2, 6]],
         [[]],
         [[6, 7, 4, 5]],
         [[]],
         [[]],
         [[5, 4, 0, 1]],
         [[0, 1, 5, 4]],
         [[0, 1, 5, 4], [1, 2, 6, 5], [4, 5, 6, 7]],
         [[5, 4, 0, 1], [6, 5, 1, 2]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[0, 3, 2, 1]],
         [[2, 1, 0, 3]],
         [[7, 6, 2, 3], [6, 5, 1, 2], [3, 2, 1, 0]],
         [[2, 6, 5, 1], [3, 2, 1, 0]],
         [[0, 3, 2, 1]],
         [[0, 1, 2, 3], [4, 5, 6, 7]],
         [[2, 1, 0, 3], [6, 2, 3, 7]],
         [[0, 1, 2, 3]],
         [[5, 4, 0, 1], [4, 7, 3, 0], [1, 0, 3, 2]],
         [[0, 3, 2, 1], [4, 0, 1, 5]],
         [[0, 1, 2, 3],
          [0, 1, 5, 4],
          [1, 2, 6, 5],
          [2, 3, 7, 6],
          [3, 0, 4, 7],
          [4, 5, 6, 7]],
         [[2, 1, 5, 6], [1, 0, 4, 5], [3, 0, 1, 2]],
         [[0, 4, 7, 3], [1, 0, 3, 2]],
         [[2, 3, 0, 1]],
         [[2, 3, 0, 1], [3, 7, 4, 0], [6, 7, 3, 2]],
         [[2, 3, 0, 1]],
         [[]],
         [[3, 7, 6, 2]],
         [[]],
         [[]],
         [[]],
         [[6, 2, 3, 7], [5, 6, 7, 4]],
         [[]],
         [[]],
         [[5, 4, 0, 1]],
         [[6, 7, 3, 2], [5, 4, 0, 1]],
         [[5, 6, 7, 4], [1, 5, 4, 0]],
         [[0, 4, 5, 1]],
         [[]],
         [[3, 2, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[4, 7, 6, 5]],
         [[]],
         [[]],
         [[0, 1, 5, 4], [3, 0, 4, 7]],
         [[5, 1, 0, 4]],
         [[7, 4, 0, 3], [4, 5, 1, 0], [6, 5, 4, 7]],
         [[0, 4, 5, 1]],
         [[7, 4, 0, 3]],
         [[]],
         [[4, 0, 3, 7]],
         [[]],
         [[]],
         [[3, 0, 4, 7]],
         [[]],
         [[3, 0, 4, 7]],
         [[4, 0, 1, 5]],
         [[3, 0, 4, 7], [0, 1, 5, 4], [7, 4, 5, 6]],
         [[4, 0, 1, 5]],
         [[4, 7, 3, 0], [5, 4, 0, 1]],
         [[]],
         [[]],
         [[5, 6, 7, 4]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[7, 6, 2, 3]],
         [[]],
         [[1, 5, 4, 0]],
         [[4, 0, 1, 5], [7, 4, 5, 6]],
         [[2, 6, 7, 3], [1, 5, 4, 0]],
         [[1, 0, 4, 5]],
         [[]],
         [[]],
         [[7, 4, 5, 6], [3, 7, 6, 2]],
         [[]],
         [[]],
         [[]],
         [[6, 7, 3, 2]],
         [[]],
         [[3, 2, 1, 0]],
         [[4, 7, 3, 0], [7, 6, 2, 3], [0, 3, 2, 1]],
         [[1, 0, 3, 2]],
         [[3, 2, 1, 0], [7, 3, 0, 4]],
         [[6, 5, 1, 2], [5, 4, 0, 1], [2, 1, 0, 3]],
         [[3, 0, 1, 2],
          [3, 0, 4, 7],
          [0, 1, 5, 4],
          [1, 2, 6, 5],
          [2, 3, 7, 6],
          [7, 4, 5, 6]],
         [[1, 5, 4, 0], [2, 1, 0, 3]],
         [[2, 3, 0, 1], [3, 7, 4, 0], [1, 0, 4, 5]],
         [[3, 2, 1, 0]],
         [[3, 7, 6, 2], [0, 3, 2, 1]],
         [[5, 4, 7, 6], [1, 0, 3, 2]],
         [[1, 2, 3, 0]],
         [[1, 0, 3, 2], [5, 1, 2, 6]],
         [[7, 3, 2, 6], [3, 0, 1, 2], [6, 2, 1, 5]],
         [[0, 1, 2, 3]],
         [[3, 0, 1, 2]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[1, 2, 6, 5], [0, 1, 5, 4]],
         [[2, 1, 5, 6], [1, 0, 4, 5], [6, 5, 4, 7]],
         [[5, 1, 0, 4]],
         [[0, 4, 5, 1]],
         [[]],
         [[]],
         [[4, 7, 6, 5]],
         [[]],
         [[6, 2, 1, 5]],
         [[5, 6, 2, 1]],
         [[]],
         [[]],
         [[]],
         [[4, 7, 3, 0]],
         [[2, 6, 5, 1]],
         [[3, 7, 4, 0], [2, 6, 5, 1]],
         [[]],
         [[4, 5, 6, 7], [0, 4, 7, 3]],
         [[]],
         [[3, 7, 4, 0]],
         [[]],
         [[]],
         [[5, 1, 2, 6], [4, 5, 6, 7]],
         [[2, 1, 5, 6]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[2, 3, 7, 6], [1, 2, 6, 5]],
         [[6, 2, 1, 5]],
         [[]],
         [[5, 4, 7, 6]],
         [[3, 2, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[7, 6, 5, 4], [6, 2, 1, 5], [3, 2, 6, 7]],
         [[1, 5, 6, 2]],
         [[]],
         [[]],
         [[7, 3, 2, 6]],
         [[]],
         [[]],
         [[3, 0, 4, 7], [2, 3, 7, 6]],
         [[]],
         [[4, 0, 3, 7]],
         [[]],
         [[3, 7, 4, 0], [7, 6, 5, 4], [2, 6, 7, 3]],
         [[]],
         [[3, 7, 4, 0]],
         [[]],
         [[6, 7, 3, 2]],
         [[7, 6, 5, 4]],
         [[]],
         [[]],
         [[3, 2, 6, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[6, 5, 4, 7]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[4, 7, 6, 5]],
         [[]],
         [[]],
         [[]],
         [[]],
         [[]]]
        MarchingCubes33Lookup.Cases = [0,
         1,
         1,
         2,
         1,
         3,
         2,
         5,
         1,
         2,
         3,
         5,
         2,
         5,
         5,
         8,
         1,
         2,
         3,
         5,
         4,
         6,
         6,
         11,
         3,
         5,
         7,
         9,
         6,
         14,
         12,
         5,
         1,
         3,
         2,
         5,
         3,
         7,
         5,
         9,
         4,
         6,
         6,
         14,
         6,
         12,
         11,
         5,
         2,
         5,
         5,
         8,
         6,
         12,
         14,
         5,
         6,
         11,
         12,
         5,
         10,
         6,
         6,
         2,
         1,
         4,
         3,
         6,
         2,
         6,
         5,
         14,
         3,
         6,
         7,
         12,
         5,
         11,
         9,
         5,
         3,
         6,
         7,
         12,
         6,
         10,
         12,
         6,
         7,
         12,
         13,
         7,
         12,
         6,
         7,
         3,
         2,
         6,
         5,
         11,
         5,
         12,
         8,
         5,
         6,
         10,
         12,
         6,
         14,
         6,
         5,
         2,
         5,
         14,
         9,
         5,
         11,
         6,
         5,
         2,
         12,
         6,
         7,
         3,
         6,
         4,
         3,
         1,
         1,
         3,
         4,
         6,
         3,
         7,
         6,
         12,
         2,
         5,
         6,
         11,
         5,
         9,
         14,
         5,
         2,
         5,
         6,
         14,
         6,
         12,
         10,
         6,
         5,
         8,
         12,
         5,
         11,
         5,
         6,
         2,
         3,
         7,
         6,
         12,
         7,
         13,
         12,
         7,
         6,
         12,
         10,
         6,
         12,
         7,
         6,
         3,
         5,
         9,
         11,
         5,
         12,
         7,
         6,
         3,
         14,
         5,
         6,
         2,
         6,
         3,
         4,
         1,
         2,
         6,
         6,
         10,
         5,
         12,
         11,
         6,
         5,
         14,
         12,
         6,
         8,
         5,
         5,
         2,
         5,
         11,
         12,
         6,
         14,
         6,
         6,
         4,
         9,
         5,
         7,
         3,
         5,
         2,
         3,
         1,
         5,
         12,
         14,
         6,
         9,
         7,
         5,
         3,
         11,
         6,
         6,
         4,
         5,
         3,
         2,
         1,
         8,
         5,
         5,
         2,
         5,
         3,
         2,
         1,
         5,
         2,
         3,
         1,
         2,
         1,
         1,
         0]
        MarchingCubes33Lookup.Signs = [-1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         -1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         -1,
         -1,
         1,
         -1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         -1] -1,
    elif method == 'original':
        MarchingCubesLookup.LookupTable = [
            [[]],
            [[7, 10, 11]],
            [[6, 9, 10]],
            [[6, 9, 7], [7, 9, 11]],
            [[5, 8, 9]],
            [[5, 8, 9], [7, 10, 11]],
            [[5, 8, 6], [6, 8, 10]],
            [[5, 7, 6], [5, 8, 11], [5, 11, 7]],
            [[11, 8, 4]],
            [[8, 7, 10], [4, 7, 8]],
            [[4, 11, 8], [6, 9, 10]],
            [[7, 6, 4], [9, 8, 4], [6, 9, 4]],
            [[4, 9, 5], [11, 9, 4]],
            [[7, 5, 4], [7, 10, 9], [7, 9, 5]],
            [[4, 6, 5], [4, 11, 10], [4, 10, 6]],
            [[4, 6, 5], [4, 7, 6]],
            [[7, 3, 2]],
            [[3, 2, 11], [11, 2, 10]],
            [[3, 2, 7], [9, 10, 6]],
            [[11, 3, 9], [2, 6, 9], [3, 2, 9]],
            [[2, 7, 3], [5, 8, 9]],
            [[5, 8, 9], [10, 3, 2], [11, 3, 10]],
            [[2, 7, 3], [5, 8, 6], [6, 8, 10]],
            [[3, 2, 6], [8, 3, 6], [8, 6, 5], [11, 3, 8]],
            [[2, 7, 3], [8, 4, 11]],
            [[10, 8, 2], [4, 3, 2], [8, 4, 2]],
            [[2, 7, 3], [4, 11, 8], [6, 9, 10]],
            [[2, 4, 3], [6, 4, 2], [6, 8, 4], [9, 8, 6]],
            [[7, 3, 2], [9, 5, 11], [11, 5, 4]],
            [[4, 3, 2], [4, 2, 9], [5, 4, 9], [9, 2, 10]],
            [[10, 4, 11], [6, 4, 10], [6, 5, 4], [3, 2, 7]],
            [[5, 4, 6], [3, 2, 6], [4, 3, 6]],
            [[6, 2, 1]],
            [[6, 2, 1], [7, 10, 11]],
            [[2, 9, 10], [1, 9, 2]],
            [[9, 11, 1], [7, 2, 1], [11, 7, 1]],
            [[2, 1, 6], [8, 9, 5]],
            [[8, 9, 5], [1, 6, 2], [11, 7, 10]],
            [[2, 8, 10], [2, 1, 5], [2, 5, 8]],
            [[5, 8, 1], [1, 8, 2], [8, 11, 2], [2, 11, 7]],
            [[1, 6, 2], [11, 8, 4]],
            [[6, 2, 1], [8, 4, 10], [10, 4, 7]],
            [[4, 11, 8], [9, 2, 1], [10, 2, 9]],
            [[9, 8, 4], [9, 4, 2], [1, 9, 2], [4, 7, 2]],
            [[1, 6, 2], [4, 11, 5], [5, 11, 9]],
            [[1, 7, 2], [5, 7, 1], [5, 4, 7], [10, 9, 6]],
            [[2, 1, 5], [11, 2, 5], [11, 5, 4], [10, 2, 11]],
            [[4, 7, 5], [2, 1, 5], [7, 2, 5]],
            [[7, 1, 6], [3, 1, 7]],
            [[1, 11, 3], [1, 6, 10], [1, 10, 11]],
            [[1, 9, 3], [10, 7, 3], [9, 10, 3]],
            [[11, 1, 9], [11, 3, 1]],
            [[9, 5, 8], [7, 3, 6], [6, 3, 1]],
            [[8, 1, 5], [11, 1, 8], [11, 3, 1], [6, 10, 9]],
            [[1, 5, 8], [1, 8, 7], [3, 1, 7], [7, 8, 10]],
            [[3, 1, 11], [5, 8, 11], [1, 5, 11]],
            [[8, 4, 11], [7, 1, 6], [3, 1, 7]],
            [[1, 6, 10], [1, 10, 4], [3, 1, 4], [4, 10, 8]],
            [[7, 9, 10], [3, 9, 7], [3, 1, 9], [8, 4, 11]],
            [[9, 3, 1], [9, 8, 4], [9, 4, 3]],
            [[5, 11, 9], [5, 4, 11], [6, 7, 3], [6, 3, 1]],
            [[9, 6, 10], [4, 3, 5], [5, 3, 1]],
            [[10, 7, 11], [4, 1, 5], [3, 1, 4]],
            [[1, 5, 3], [3, 5, 4]],
            [[0, 5, 1]],
            [[11, 7, 10], [5, 1, 0]],
            [[5, 1, 0], [6, 9, 10]],
            [[0, 5, 1], [6, 11, 7], [9, 11, 6]],
            [[1, 8, 9], [0, 8, 1]],
            [[10, 11, 7], [1, 0, 9], [9, 0, 8]],
            [[8, 10, 0], [6, 1, 0], [10, 6, 0]],
            [[6, 1, 0], [11, 6, 0], [11, 0, 8], [7, 6, 11]],
            [[1, 0, 5], [11, 8, 4]],
            [[0, 5, 1], [7, 10, 4], [4, 10, 8]],
            [[0, 5, 1], [6, 9, 10], [4, 11, 8]],
            [[0, 4, 1], [1, 4, 6], [4, 7, 6], [5, 9, 8]],
            [[1, 11, 9], [1, 0, 4], [1, 4, 11]],
            [[1, 0, 4], [10, 1, 4], [10, 4, 7], [9, 1, 10]],
            [[6, 1, 10], [10, 1, 11], [1, 0, 11], [11, 0, 4]],
            [[6, 4, 7], [6, 1, 0], [6, 0, 4]],
            [[5, 1, 0], [7, 3, 2]],
            [[5, 1, 0], [3, 10, 11], [2, 10, 3]],
            [[3, 2, 7], [10, 6, 9], [0, 5, 1]],
            [[6, 9, 2], [2, 9, 3], [9, 11, 3], [1, 0, 5]],
            [[3, 2, 7], [8, 9, 0], [0, 9, 1]],
            [[0, 9, 1], [0, 8, 9], [2, 10, 11], [2, 11, 3]],
            [[1, 0, 6], [6, 0, 10], [0, 8, 10], [2, 7, 3]],
            [[1, 2, 6], [8, 11, 0], [0, 11, 3]],
            [[1, 0, 5], [8, 4, 11], [2, 7, 3]],
            [[1, 8, 5], [2, 8, 1], [2, 10, 8], [4, 3, 0]],
            [[0, 5, 1], [5, 10, 6], [4, 11, 8], [2, 7, 3]],
            [[3, 0, 4], [6, 1, 2], [5, 9, 8]],
            [[4, 1, 0], [11, 1, 4], [11, 9, 1], [2, 7, 3]],
            [[4, 3, 0], [1, 10, 9], [2, 10, 1]],
            [[1, 2, 6], [10, 7, 11], [0, 4, 3]],
            [[4, 3, 0], [6, 1, 2]],
            [[0, 5, 2], [2, 5, 6]],
            [[11, 7, 10], [6, 0, 5], [2, 0, 6]],
            [[0, 10, 2], [0, 5, 9], [0, 9, 10]],
            [[11, 7, 2], [5, 11, 2], [5, 2, 0], [5, 9, 11]],
            [[0, 8, 2], [9, 6, 2], [8, 9, 2]],
            [[7, 8, 11], [2, 8, 7], [2, 0, 8], [9, 6, 10]],
            [[0, 10, 2], [0, 8, 10]],
            [[0, 8, 2], [11, 7, 2], [8, 11, 2]],
            [[8, 4, 11], [6, 2, 5], [5, 2, 0]],
            [[5, 6, 0], [6, 2, 0], [7, 10, 8], [4, 7, 8]],
            [[11, 0, 4], [10, 0, 11], [10, 2, 0], [5, 9, 8]],
            [[8, 5, 9], [7, 2, 4], [4, 2, 0]],
            [[9, 6, 2], [4, 9, 2], [4, 2, 0], [4, 11, 9]],
            [[9, 6, 10], [7, 0, 4], [2, 0, 7]],
            [[0, 10, 2], [0, 4, 11], [0, 11, 10]],
            [[0, 4, 2], [2, 4, 7]],
            [[6, 7, 5], [3, 0, 5], [7, 3, 5]],
            [[6, 10, 11], [0, 6, 11], [0, 11, 3], [0, 5, 6]],
            [[0, 5, 3], [3, 5, 7], [5, 9, 7], [7, 9, 10]],
            [[3, 9, 11], [3, 0, 5], [3, 5, 9]],
            [[8, 9, 6], [3, 8, 6], [3, 6, 7], [0, 8, 3]],
            [[10, 9, 6], [3, 0, 11], [11, 0, 8]],
            [[10, 0, 8], [10, 7, 3], [10, 3, 0]],
            [[8, 11, 0], [0, 11, 3]],
            [[0, 5, 3], [3, 5, 7], [5, 6, 7], [4, 11, 8]],
            [[0, 4, 3], [6, 10, 5], [5, 10, 8]],
            [[7, 11, 10], [0, 4, 3], [8, 5, 9]],
            [[3, 0, 4], [9, 8, 5]],
            [[4, 3, 0], [9, 6, 11], [11, 6, 7]],
            [[10, 9, 6], [3, 0, 4]],
            [[4, 3, 0], [7, 11, 10]],
            [[4, 3, 0]]]
    else:
        raise Exception('Unknown method "{:s}"'.format(method))
    edgeLookup = [
        [0, 1],  # Edge 0 - Between nodes 0 and 1
        [1, 2],  # Edge 1
        [2, 3],  # Edge 2
        [3, 0],  # Edge 3
        [0, 4],  # Edge 4
        [1, 5],  # Edge 5
        [2, 6],  # Edge 6
        [3, 7],  # Edge 7
        [4, 5],  # Edge 8
        [5, 6],  # Edge 9
        [6, 7],  # Edge 10
        [7, 4],  # Edge 11
        []       # Center
        ]
    def March(nodes, vals, interpolation):
        coords = []
        conn = []
        digits = ['0','1']
        inside = (vals<=0).astype(int)
        idx = int("".join(digits[j] for j in inside), 2)
        # idx = int("".join(x for x in inside.astype(str)),2)
        if method == 'original':
            TriElems = MarchingCubesLookup(idx)
        elif method == '33':
            TriElems = MarchingCubes33Lookup(idx,vals)
        else:
            raise Exception('Invalid method')

        for t in TriElems:
            elem = []
            for n in t:
                if n == 12:
                    # newNode = np.mean(nodes, axis=0)
                    newNode = np.average([node for i,node in enumerate(nodes) if inside[i]],
                                        weights=[val for i,val in enumerate(vals) if inside[i]], axis=0)
                    elem.append(len(coords))
                    coords.append(newNode)
                else:
                    # node1 = VoxelNodeConn[e][edgeLookup[n][0]]
                    # node2 = VoxelNodeConn[e][edgeLookup[n][1]]
                    coords1 = nodes[edgeLookup[n][0]]
                    coords2 = nodes[edgeLookup[n][1]]
                    v1 = vals[edgeLookup[n][0]]
                    v2 = vals[edgeLookup[n][1]]
                    if interpolation == 'midpoint' or v1 == v2:
                        newNode = [
                            (coords1[0] + coords2[0])/2,
                            (coords1[1] + coords2[1])/2,
                            (coords1[2] + coords2[2])/2
                            ]
                        elem.append(len(coords))
                        coords.append(newNode)
                    elif interpolation == 'linear':
                        newNode = [
                            coords1[0] + (0-v1)*(coords2[0]-coords1[0])/(v2-v1),
                            coords1[1] + (0-v1)*(coords2[1]-coords1[1])/(v2-v1),
                            coords1[2] + (0-v1)*(coords2[2]-coords1[2])/(v2-v1)
                            ]
                        if np.sign(v2) == np.sign(v1):
                            print('Marching cubes fuckup')
                            print(str(idx) + str(vals) + str(edgeLookup[n]))
                        elem.append(len(coords))
                        coords.append(newNode)
                    else:
                        raise Exception('Invalid interpolation method')
            if len(elem) > 0:
                conn.append(elem)  
        return (coords, conn)
    # Tri = pool(delayed(March)([VoxelNodeCoords[node] for node in elem], np.array([NodeValues[node] for node in elem]), interpolation) for elem in VoxelNodeConn)
    Coords = np.array(VoxelNodeCoords)
    Conn = np.array(VoxelNodeConn)
    Points = Coords[Conn]
    Vals = NodeValues[Conn]
    # Tri = [March(Coords[elem], NodeValues[elem], interpolation) for elem in VoxelNodeConn]
    Tri = [March(pts, Vals[i], interpolation) for i,pts in enumerate(Points)]
    for t in Tri:
        coords = t[0]
        conn = t[1]
        lcoords = len(TriNodeCoords)
        if len(coords) > 0:
            TriNodeCoords += coords
            TriNodeConn += [[node+lcoords for node in elem] for elem in conn]
    
    TriNodeCoords,TriNodeConn,_ = MeshUtils.DeleteDuplicateNodes(TriNodeCoords,TriNodeConn)
    if interpolation=='linear':
        TriNodeCoords,TriNodeConn = MeshUtils.DeleteDegenerateElements(TriNodeCoords,TriNodeConn)
    if type(TriNodeCoords) is np.ndarray: TriNodeCoords = TriNodeCoords.tolist()
    return TriNodeCoords, TriNodeConn

def MarchingCubesLookup(i):
    assert i < 256, 'There are only 256 possible states of the voxel, i must be less than 256'
    if i > 127:
        i = 128-(i-127)
        flip = True
    else:
        flip = False
    MarchingCubesLookup.LookupTable[i]
    # Flip
    if flip:
        TriElems = [[n for n in reversed(tri)] for tri in MarchingCubesLookup.LookupTable[i]]
    else:
        TriElems = MarchingCubesLookup.LookupTable[i]
    return TriElems

def MarchingCubes33Lookup(i,vals):
    
    assert i < 256, 'There are only 256 possible states of the voxel, i must be less than 256'
    # if i > 127:
    #     i = 128-(i-127)
    #     flip = True
    # else:
    #     flip = False
        
    
    # nodes :  [0 1 2 3 4 5 6 7]
    
    configs = MarchingCubes33Lookup.LookupTable[i]
    case = MarchingCubes33Lookup.Cases[i]
    FaceTest = MarchingCubes33Lookup.FaceTests[i]
    sign = MarchingCubes33Lookup.Signs[i]
    # Resolve Ambiguities
    vs = vals-1e-16
    if case == 0:
        config = configs[0]
        
    elif case == 1:
        config = configs[0]
        
    elif case == 2:
        config = configs[0]
    
    elif case == 3:
        # Case 3 Ambiguity
        if isConnected(FaceTest[0], sign*vs):
            # Nodes are not separated - Case 3.2
            config = configs[1]
        else:
            # Nodes are separated - Case 3.1
            config = configs[0]
            
    elif case == 4:
        # Case 4 Ambiguity
        if InternalConnection(sign*vs):
            # Nodes are not separated - Case 4.2
            config = configs[1]
        else: 
            # Nodes are separated - Case 4.1
            config = configs[0]
                    
    elif case == 5:
        config = configs[0]
        
    elif case == 6:
        # Case 6 Ambiguity
        if isConnected(FaceTest[0], sign*vs):
            # Nodes are connected - Case 6.2
            config = configs[2]  
        else:
            if InternalConnection(sign*vs):
                # Nodes of ambiguous face are joined inside the cube - Case 6.1.2
                config = configs[1]
            else:
                # Nodes of ambiguous face are completely separated - Case 6.1.1
                config = configs[0]
    
    elif case == 7:
        results = [isConnected(face,sign*vs) for face in FaceTest]
        passes = np.where(results)[0]
        if len(passes) == 0:
            # Case 7.1
            config = configs[0]
        elif len(passes) == 1:
            # Case 7.2
            if 0 in passes:
                # Case 7.2.1
                config = configs[1]
            elif 1 in passes:
                # Case 7.2.2
                config = configs[2]
            elif 2 in passes:
                # Case 7.2.3
                config = configs[3]
            else:
                print('problem 7.2')
        elif len(passes) == 2:
            # Case 7.3
            if 1 in passes and 2 in passes:
                # Case 7.3.1
                config = configs[4]
            elif 0 in passes and 2 in passes:
                # Case 7.3.2
                config = configs[5]
            elif 0 in passes and 1 in passes:
                # Case 7.3.3
                config = configs[6]
            else:
                print('problem 7.3')
        elif len(passes == 3):
            # Case 7.4
            if InternalConnection(-sign*vs):
                # Case 7.4.2
                config = configs[8]
            else:
                # Case 7.4.1
                config = configs[7]
        else:
            print('problem 7')
    
    elif case == 8:
        config = configs[0]
        
    elif case == 9:
        config = configs[0]
        
    elif case == 10:
        results = [isConnected(face,sign*vs) for face in FaceTest]
        passes = np.where(results)[0]
        
        if len(passes) == 0:
            
            if InternalConnection(-sign*vs):
                # Case 10.1.2
                config = configs[2]
            else:
                # Case 10.1.1 (No Internal Connection)
                config = configs[0]
        elif len(passes) == 1:
            # Case 10.2 
            # config = configs[3]
            if 1 in passes:
                # Case 10.2.1 Top Face Connected
                config = configs[3]
            else:
                # Case 10.2.2 Bottom Face Connected
                config = configs[4]
        elif len(passes) == 2:
            # Case 10.1.1 (Internal Connection)
            config = configs[1]
        else:
            print('problem 10')
    
    elif case == 11:
        config = configs[0]
    
    elif case == 12:
        results = [isConnected(face,sign*vs) for face in FaceTest]
        passes = np.where(results)[0]
        
        if len(passes) == 0:
            if InternalConnection(-sign*vs):
                # Case 12.1.2
                config = configs[2]
            else:
                # Case 12.1.1
                config = configs[0]
        elif len(passes) == 1:
            # Case 12.2 (Top Face Connected)
            if 0 in passes:
                # Case 12.2
                config = configs[3]
            elif 1 in passes:
                # Case 12.3
                config = configs[4]
            else:
                # Case 12.3
                warnings.warn('MC error - Case 12.3')
        elif len(passes) == 2:
            # Case 12.1.1
            config = configs[1]
        else:
            warnings.warn('MC error - Case 12')
 
    elif case == 13:
        results = [isConnected(face,sign*vs) for face in FaceTest]
        passes = np.where(results)[0]
        if len(passes) == 0:
            # Case 13.1
            config = configs[0]
        elif len(passes) == 1:
            if 5 in passes:
                # Case 13.2.1
                config = configs[1]
            elif 2 in passes:
                # Case 13.2.2
                config = configs[2]
            elif 0 in passes:
                # Case 13.2.3
                config = configs[3]
            elif 1 in passes:
                # Case 13.2.4
                config = configs[4]
            elif 4 in passes:
                # Case 13.2.5
                config = configs[5]
            elif 3 in passes:
                # Case 13.2.6
                config = configs[6]
            else:
                warnings.warn('MC error - Case 13.2')
        elif len(passes) == 2:
            if all([1,2] == passes):
                # Case 13.3.1
                config = configs[7]
            elif all([1,4] == passes):
                # Case 13.3.2
                config = configs[8]
            elif all([0,1] == passes):
                # Case 13.3.3
                config = configs[9]
            elif all([1,5] == passes):
                # Case 13.3.4
                config = configs[10]
            elif all([2,3] == passes):
                # Case 13.3.5
                config = configs[11]
            elif all([0,2] == passes):
                # Case 13.3.6
                config = configs[12]
            elif all([2,5] == passes):
                # Case 13.3.7
                config = configs[13]
            elif all([3,4] == passes):
                # Case 13.3.8
                config = configs[14]
            elif all([0,3] == passes):
                # Case 13.3.9
                config = configs[15]
            elif all([3,5] == passes):
                # Case 13.3.10
                config = configs[16]
            elif all([0,4] == passes):
                # Case 13.3.11
                config = configs[17]
            elif all([4,5] == passes):
                # Case 13.3.12
                config = configs[18]
            else:
                warnings.warn('MC error - Case 13.3')
        elif len(passes) == 3:
            if all([1,2,5] == passes):
                # Case 13.4.1
                config = configs[19]
            elif all([0,1,4] == passes):
                # Case 13.4.2
                config = configs[20]
            elif all([0,2,3] == passes):
                # Case 13.4.3
                config = configs[21]
            elif all([3,4,5] == passes):
                # Case 13.4.4
                config = configs[22]
            elif not InternalConnection(-vs,case13=True):
                if all([0,1,2] == passes):
                    # Case 13.5.1.1
                    config = configs[23]
                elif all([1,4,5] == passes):
                    # Case 13.5.1.2
                    config = configs[24]
                elif all([2,3,5] == passes):
                    # Case 13.5.1.3
                    config = configs[25]
                elif all([0,3,4] == passes):
                    # Case 13.5.1.4
                    config = configs[26]
                else:
                    warnings.warn('MC error - Case 13.5.1')
            else:
                if all([0,1,2] == passes):
                    # Case 13.5.2.1
                    config = configs[27]
                elif all([1,4,5] == passes):
                    # Case 13.5.2.2
                    config = configs[28]
                elif all([2,3,5] == passes):
                    # Case 13.5.2.3
                    config = configs[29]
                elif all([0,3,4] == passes):
                    # Case 13.5.2.4
                    config = configs[30]
                else:
                    warnings.warn('MC error - Case 13.5.2')
        else:
            warnings.warn('MC error - Case 13')
            config = configs[0]
        
    elif case == 14:
        config = configs[0]
    else:
        print('problem 15')
        config = configs[0]
                
    # Flip if necessary
    TriElems = config
    # if flip:
    #     TriElems = [[n for n in reversed(tri)] for tri in config]
    # else:
    #     try:
    #         TriElems = config
    #     except:
    #         print(i)
    #         print(vs)
            
    return TriElems

def isConnected(face, vals):
    facevals = vals[face].tolist()
    while facevals[0] < max(facevals):
        # Cycle the list until it starts with a positive (inside) value
        facevals += [facevals.pop(0)]
    [A,B,C,D] = facevals
    if A*C <= B*D:
        # Nodes are Separated
        return False
    else:
        return True

def InternalConnection(vals,case13=False):
    faces = [[0,1,2,3],[0,1,5,4],[1,2,6,5],[2,3,7,6],[3,0,4,7],[4,5,6,7]]
    face0vals = vals[faces[0]]    # Bottom Face
    face1vals = vals[faces[5]]    # Top Face      
    
    face0vals = vals[faces[0]].tolist()
    face1vals = vals[faces[5]].tolist()
    while face0vals[0] < 0:
        # Cycle the list until it starts with a positive (inside) value
        face0vals += [face0vals.pop(0)]
        face1vals += [face1vals.pop(0)]
    
    [A0, B0, C0, D0] = face0vals
    [A1, B1, C1, D1] = face1vals
    a = (A1 - A0)*(C1 - C0) - (B1 - B0)*(D1 - D0)
    if a >= 0:
        # Nodes are separated 
        connected = False
    else:
        b = C0*(A1 - A0) + A0*(C1 - C0) - D0*(B1 - B0) - B0*(D1 - D0)
        tmax = -b/(2*a)
        if (tmax <= 0) or (1 <= tmax):
            # Nodes are separated 
            connected = False
        else:            
            if case13:
                # At = A0 + (A1-A0)*tmax
                Bt = B0 + (B1-B0)*tmax
                Ct = C0 + (C1-C0)*tmax
                Dt = D0 + (D1-D0)*tmax
                c = A0*Ct - Bt*Dt
                if a*tmax**2 + b*tmax + c <= 0:
                    # Nodes are separated
                    connected = False
                else:
                    # Nodes are not separated
                    connected = True

            else:
                c = A0*C0 - B0*D0
                if a*tmax**2 + b*tmax + c <= 0:
                    # Nodes are separated
                    connected = False
                else:
                    # Nodes are not separated
                    connected = True
                
    return connected

#%%
def generateLookup33():
    # LookupTable, Cases, FaceTests = generateLookup33()
    import random
    def R1x(bits, k, sign):
        # 90 deg x-axis rotation (ccw)
        R1xnodes = np.array([4, 5, 1, 0, 7, 6, 2, 3])
        R1xedges = np.array([8, 5, 0, 4, 11, 9, 1, 3, 10, 6, 2, 7, 12])
        R1xbits = bits[R1xnodes]
        TriElems, Case, FaceTest, sign = lookup(R1xbits, sign, k=k, primary=False)
        R1xtris = [[[R1xedges[n] for n in tri] for tri in config] for config in TriElems]
        R1xface = [[R1xnodes[n] for n in face] for face in FaceTest]
        return R1xtris, Case, R1xface, sign

    def R1z(bits, k, sign):
        # 90 deg z-axis rotation (ccw)
        R1znodes = np.array([3, 0, 1, 2, 7, 4, 5, 6])
        R1zedges = np.array([3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10, 12])
        R1zbits = bits[R1znodes]
        TriElems, Case, FaceTest, sign = lookup(R1zbits, sign, k=k, primary=False)
        R1ztris = [[[R1zedges[n] for n in tri] for tri in config] for config in TriElems]
        R1zface = [[R1znodes[n] for n in face] for face in FaceTest]
        return R1ztris, Case, R1zface, sign

    def Mxy(bits, k, sign):
        # Mirror across XY plane
        Mxynodes = np.array([3,2,1,0,7,6,5,4])
        Mxyedges = np.array([2, 1, 0, 3, 7, 6, 5, 4, 10, 9, 8, 11, 12])
        Mxybits = bits[Mxynodes]
        TriElems, Case, FaceTest,sign = lookup(Mxybits, sign, k=k, primary=False)
        Mxytris = [[list(reversed([Mxyedges[n] for n in tri])) for tri in config] for config in TriElems]
        Mxyface = [list(reversed([Mxynodes[n] for n in face])) for face in FaceTest]
        return Mxytris, Case, Mxyface, sign
    
    def Re(bits, k, sign):
        # Bit reflection (switching 0s and 1s)
        Rebits = np.array([1 if bit == 0 else 0 for bit in bits])
        TriElems, Case, FaceTest, sign, = lookup(Rebits, sign, k=k, primary=False)
        Retris = [[list(reversed(tri)) for tri in config] for config in TriElems]
        Reface = [list(reversed(face)) for face in FaceTest]
        return Retris, Case, Reface, -sign
        
        
    def lookup(bits, sign, k=0, primary=True):
        i = int(''.join([str(bit) for bit in bits]),2)
        # if i > 127:
        #     i = 128-(i-127)
        #     TriElems, Case, bits, sign = Re(bits,k,sign)
        # print(i)
        if i == 0 or i == 255:
            # Case 0
            Case = 0
            TriElems  = [[[]]]
            FaceTest = [[]]
        elif i == 1:
            # Case 1
            Case = 1
            TriElems = [
                [[7, 10, 11]]
                ]
            FaceTest = [[]]
        elif i == 3:
            # Case 2
            Case = 2
            TriElems = [
                [[6, 9, 7], [7, 9, 11]]
                ]
            FaceTest = [[]]
        elif i == 5:
            # Case 3 - 5 : 0 0 0 0 0 1 0 1
            Case = 3
            TriElems = [
                [[5, 8, 9], [7, 10, 11]],                       # Case 3.1
                [[5, 7, 9], [5, 8, 7], [8, 11, 7], [7, 10 ,9]]  # Case 3.2
                ]        
            FaceTest = [
                [4, 5, 6, 7]
                ]
        elif i == 20:
            # Case 4 - 20 : 0 0 0 1 0 1 0 0
            Case = 4
            TriElems = [
                [[2, 7, 3], [5, 8, 9]],
                [[7, 8, 9], [8, 7, 3], [3, 5, 8], [5, 3, 2], [2, 9, 5], [9, 7, 2]]
                ]
            FaceTest = [[]]
        elif i == 7:
            # Case 5 - 7 : 0 0 0 0 0 1 1 1
            Case = 5
            TriElems = [
                [[5, 7, 6], [5, 8, 11], [5, 11, 7]]
                ]
            FaceTest = [[]]
        elif i == 22:
            # Case 6 - 22 : 0 0 0 1 0 1 1 0
            Case = 6
            TriElems = [
                [[2, 7, 3], [5, 8, 6], [6, 8, 10]],                                                 # Case 6.1.1
                [[6, 2, 7], [6, 7, 10], [10, 7, 8], [8, 7, 3], [8, 3, 5], [2, 5, 3], [2, 6, 5]],    # Case 6.1.2
                [[3, 5, 8], [3, 8, 7], [7, 8, 10], [2, 5, 3], [5, 2, 6]]                            # Case 6.2   
                # [[3, 2, 7], [8, 10, 5], [6, 5, 10]],
                # [[10, 12, 8], [12, 7, 8], [3, 8, 7], [8, 3, 5], [2, 5, 3], [5, 2, 12], [12, 6, 5], [10, 6, 12], [12, 2, 7]],
                # [[10, 7, 8], [3, 8, 7], [8, 3, 5], [2, 5, 3], [5, 2, 6]]
                ]
            FaceTest = [
                [2, 3, 7, 6]
                ]
        elif i == 74:
            # Case 7 - 74 : 0 1 0 0 1 0 1 0
            Case = 7
            TriElems = [
                [[0, 5, 1], [6, 9, 10], [4, 11, 8]],                            # Case 7.1   (No Nodes Connected)
                [[1, 0, 4], [1, 4, 11], [1, 11, 8], [1, 8, 5], [6, 9, 10]],     # Case 7.2.1 (Nodes 1 and 4 Connected)
                # [[6, 9, 8], [6, 8, 4], [6, 4, 10], [4, 11, 10], [2, 7, 3]],     # Case 7.2.1 (Nodes 1 and 4 Connected)  
                [[0, 6, 1], [0, 10, 6], [0, 9, 10], [0, 5, 9], [4, 11, 8]],     # Case 7.2.2 (Nodes 1 and 6 Connected)
                [[4, 11, 10], [4, 10, 6], [4, 6, 8], [6, 9, 8], [0, 5, 1]],      # Case 7.2.3 (Nodes 4 and 6 Connected)
                [[4, 12, 8], [8, 12, 9], [9, 12, 5], [5, 12, 0], [0, 12, 1], [1, 12, 6], [6, 12, 10], [10, 12, 11], [11, 12, 4]],    # Case 7.3.1 (Nodes 1, 6 and 6, 4 Connected)
                [[8, 12, 9], [9, 12, 6], [6, 12, 10], [10, 12, 11], [11, 12, 4], [4, 12, 0], [0, 12, 1], [1, 12, 5], [5, 12, 8]],    # Case 7.3.2 (Nodes 1, 4 and 4, 6 Connected)
                # [[12, 11, 8], [12, 8, 5], [12, 5, 9], [12, 9, 10], [12, 10, 6], [12, 6, 1], [12, 1, 0], [12, 0, 4], [12, 4, 8]],     # Case 7.3.3 (Nodes 4, 1 and 1, 6 Connected)      - Might be wrong        
                [[10, 12, 9], [9, 12, 5], [5, 12, 8], [8, 12, 11], [11, 12, 4], [4, 12, 0], [0, 12, 1], [1, 12, 6], [6, 12, 10]],       # Case 7.3.3 (Nodes 4, 1 and 1, 6 Connected)
                [[5, 9, 8], [0, 4, 11], [0, 11, 6], [0, 6, 1], [6, 11, 10]], # Case 7.4.1
                [[8, 10, 9], [8, 11, 10], [4, 11, 8], [4, 8, 5], [4, 5, 0], [0, 5, 1], [5, 6, 1], [5, 9, 6], [9, 10, 6]]    # Case 7.4.2
                
                # [[5, 1, 0], [6, 9, 10], [4, 11, 8]], # Case 7.1
                # [[6, 9, 10], [11, 0, 4], [0, 11, 1], [8, 1, 11], [1, 8, 5]], # Case 7.2.1
                # [[11, 8, 4], [5, 9, 0], [10, 0, 9], [0, 10, 1], [6, 1, 10]], # Case 7.2.2
                # [[5, 1, 0], [8, 6, 9], [6, 8, 4], [6, 4, 10], [11, 10, 4]],  # Case 7.2.3
                # [[12, 10, 6], [12, 6, 1], [12, 1, 0], [12, 0, 4], [12, 4, 11], [12, 11, 8], [12, 8, 5], [12, 5, 9], [12, 9, 10]],
                # [[12, 1, 0], [12, 0, 4], [12, 4, 11], [12, 11, 10], [12, 10, 6], [12, 6, 9], [12, 9, 8], [12, 8, 5], [12, 5, 1]],
                # [[1, 0, 12], [6, 1, 12], [10, 6, 12], [11, 10, 12], [4, 11, 12], [8, 4, 12], [9, 8, 12], [5, 9, 12], [0, 5, 12]],
                # [[11, 0, 4], [0, 11, 6], [10, 6, 11], [0, 6, 1], [5, 9, 8]],
                # [[5, 0, 4], [0, 5, 1], [6, 1, 5], [9, 6, 5], [6, 9, 10], [8, 10, 9], [10, 8, 11], [4, 11, 8], [5, 4, 8]]               
                ]
            FaceTest = [
                [0, 1, 5, 4],
                [1, 2, 6, 5],
                [4, 5, 6, 7]
                ]
        elif i == 15:
            # Case 8 - 15 : 0 0 0 0 1 1 1 1
            Case = 8
            TriElems = [
                [[4, 6, 5], [4, 7, 6]]
                ]
            FaceTest = [[]]
        elif i == 114:
            # Case 9 - 114 : 0 1 1 1 0 0 1 0
            Case = 9
            TriElems = [
                [[0, 5, 3], [3, 5, 7], [5, 9, 7], [7, 9, 10]]
                ]
            FaceTest = [[]]
        elif i == 85:
            # Case 10 - 85 : 0 1 0 1 0 1 0 1
            Case = 10
            TriElems = [
                [[0, 9, 1], [0, 8, 9], [2, 10, 11], [2, 11, 3]],    # Case 10.1.1 (No internal connection)
                [[0, 11, 3], [0, 8, 11], [1, 10, 9], [1, 2, 10]], # Case 10.1.1 (Internal connection)
                [[0, 8, 3], [3, 8, 11], [0, 3, 1], [1, 3, 2], [1, 2, 9], [2, 10, 9], [8, 9, 11], [9, 10, 11]],         # Case 10.1.2
                [[11, 12, 8], [8, 12, 0], [0, 12, 1], [1, 12, 9], [9, 12, 10], [10, 12, 2], [2, 12, 3], [3, 12, 11]],  # Case 10.2.1 (Top Face Connected)
                [[9, 12, 8], [1, 12, 9], [2, 12, 1], [10, 12, 2], [11, 12, 10], [3, 12, 11], [0, 12, 3], [8, 12, 0]]   # Case 10.2.2 (Bottom Face Connected)
                ]
            FaceTest = [
                [0, 1, 2, 3],
                [4, 5, 6, 7]
                ]
        elif i == 116:
            # Case 11
            Case = 11
            TriElems = [
                [[8, 9, 6],[3, 8, 6],[3, 6, 7],[0, 8, 3]]
                ]
            FaceTest = [[]]
        elif i == 120:
            # Case 12 - 120 : 0 1 1 1 1 0 0 0
            Case = 12
            TriElems = [
                # [[0, 5, 3], [3, 5, 7], [5, 6, 7], [4, 11, 8]],  # Case 12.1.1
                # [[6, 11, 8], [5, 8, 6], [0, 8, 5], [0, 4, 8], [0, 3, 4], [3, 11, 4], [3, 7, 11], [6, 11, 7]],       # Case 12.1.2
                # [[0, 4, 12], [4, 11, 8], [8, 12, 11], [5, 12, 8], [5, 6, 12], [6, 7, 12], [3, 12, 7], [0, 12, 3]],  # Case 12.2
                # [[0, 12, 3], [3, 12, 4], [4, 12, 8], [8, 12, 11], [11, 12, 7], [7, 12, 6], [6, 12, 5], [5, 12, 0]]  # Case 12.3
                [[4, 11, 8], [3, 0, 7], [5, 7, 0], [7, 5, 6]],                                                      # Case 12.1.1
                [[4, 3, 0], [11, 8, 7], [5, 7, 8], [7, 5, 6]],                                                      # Case 12.1.1r (reversed)
                # [[4, 5, 8], [5, 4, 0], [3, 0, 4], [11, 3, 4], [3, 11, 10], [9, 10, 11], [8, 9, 11], [9, 8, 5]],     # Case 12.1.2
                [[4, 0, 8], [5, 8, 0], [8, 5, 6], [8, 6, 11], [7, 11, 6], [11, 7, 3], [11, 3, 4], [0, 4, 3]],       # Case 12.1.2 
                [[12, 0, 4], [12, 4, 11], [12, 11, 8], [12, 8, 5], [12, 5, 6], [12, 6, 7], [12, 7, 3], [12, 3, 0]], # Case 12.2 
                [[12, 5, 6], [12, 6, 7], [12, 7, 11], [12, 11, 8], [12, 8, 4], [12, 4, 3], [12, 3, 0], [12, 0, 5]]  # Case 12.3       
                ]
            FaceTest = [
                [0, 1, 5, 4],
                [3, 0, 4, 7]
                ]
        elif i == 90:
            # Case 13 - 90 : 0 1 0 1 1 0 1 0
            Case = 13
            TriElems = [                
                [[0, 5, 1],[9, 10, 6],[4, 11, 8],[2, 7, 3]],            # Case 13.1                
                [[0, 5, 1], [2, 7, 3], [4, 11, 6], [6, 11, 10], [6, 8, 4], [6, 9, 8]],  # Case 13.2.1 Face 5 (Nodes 4 and 6 Connected)
                [[4, 11, 8], [2, 7, 3], [0, 5, 9], [0, 9, 10], [0, 6, 1], [0, 10, 6]],  # Case 13.2.2 Face 2 (Nodes 1 and 6 Connected)
                [[4, 11, 8], [9, 10, 6], [3, 5, 7], [0, 5, 3], [1, 2, 5], [2, 7, 5]],   # Case 13.2.3 Face 0 (Nodes 1 and 3 Connected)
                [[2, 7, 3], [9, 10, 6], [5, 11, 8], [1, 11, 5], [0, 4, 11], [0, 11, 1]],# Case 13.2.4 Face 1 (Nodes 1 and 4 Connected)
                [[6, 9, 10], [0, 5, 1], [2, 11, 8], [2, 7, 11], [2, 8, 4], [2, 4, 3]],  # Case 13.2.5 Face 4 (Nodes 3 and 4 Connected)
                [[0, 5, 1], [4, 11, 8], [9, 7, 3], [9, 10, 7], [9, 3, 2], [9, 2, 6]],   # Case 13.2.6 Face 3 (Nodes 3 and 6 Connected)
                [[11, 8, 4], [7, 3, 12], [10, 7, 12], [9, 10, 12], [5, 9, 12], [0, 5, 12], [1, 0, 12], [6, 1, 12], [2, 6, 12], [3, 2, 12]], # Case 13.3.1 Faces 1, 2 
                [[7, 3, 2], [12, 10, 6], [12, 6, 1], [12, 1, 0], [12, 0, 4], [12, 4, 11], [12, 11, 8], [12, 8, 5], [12, 5, 9], [12, 9, 10]], # Case 13.3.2 Faces 1, 4 
                [[11, 8, 4], [9, 10, 12], [5, 9, 12], [0, 5, 12], [3, 0, 12], [7, 3, 12], [2, 7, 12], [1, 2, 12], [6, 1, 12], [10, 6, 12]], # Case 13.3.3 Faces 1, 0 
                [[7, 3, 2], [1, 0, 12], [6, 1, 12], [10, 6, 12], [11, 10, 12], [4, 11, 12], [8, 4, 12], [9, 8, 12], [5, 9, 12], [0, 5, 12]], # Case 13.3.4 Faces 1, 5
                [[5, 1, 0], [12, 8, 4], [12, 4, 3], [12, 3, 2], [12, 2, 6], [12, 6, 9], [12, 9, 10], [12, 10, 7], [12, 7, 11], [12, 11, 8]], # Case 13.3.5 Faces 2, 3
                [[11, 8, 4], [12, 9, 10], [12, 10, 7], [12, 7, 3], [12, 3, 0], [12, 0, 5], [12, 5, 1], [12, 1, 2], [12, 2, 6], [12, 6, 9]], # Case 13.3.6 Faces 2, 0
                [[1, 0, 5], [12, 3, 2], [12, 2, 6], [12, 6, 9], [12, 9, 8], [12, 8, 4], [12, 4, 11], [12, 11, 10], [12, 10, 7], [12, 7, 3]], # Case 13.3.7 Faces 2, 5
                [[6, 9, 10], [5, 1, 12], [8, 5, 12], [11, 8, 12], [7, 11, 12], [2, 7, 12], [3, 2, 12], [4, 3, 12], [0, 4, 12], [1, 0, 12]], # Case 13.3.8 Faces 3, 4
                [[6, 9, 10], [11, 8, 12], [7, 11, 12], [2, 7, 12], [1, 2, 12], [5, 1, 12], [0, 5, 12], [3, 0, 12], [4, 3, 12], [8, 4, 12]], # Case 13.3.9 Faces 3, 0
                [[1, 0, 5], [3, 2, 12], [4, 3, 12], [8, 4, 12], [9, 8, 12], [6, 9, 12], [10, 6, 12], [11, 10, 12], [7, 11, 12], [2, 7, 12]], # Case 13.3.10 Faces 3, 5
                [[6, 9, 10], [12, 11, 8], [12, 8, 5], [12, 5, 1], [12, 1, 2], [12, 2, 7], [12, 7, 3], [12, 3, 0], [12, 0, 4], [12, 4, 11]], # Case 13.3.11 Faces 4, 0
                [[7, 3, 2], [12, 1, 0], [12, 0, 4], [12, 4, 11], [12, 11, 10], [12, 10, 6], [12, 6, 9], [12, 9, 8], [12, 8, 5], [12, 5, 1]], # Case 13.3.12 Faces 4, 5
                [[7, 3, 12], [10, 7, 12], [11, 10, 12], [4, 11, 12], [8, 4, 12], [9, 8, 12], [5, 9, 12], [0, 5, 12], [1, 0, 12], [6, 1, 12], [2, 6, 12], [3, 2, 12]], # Case 13.4.1 Faces 1, 2, 5 
                [[12, 0, 4], [12, 4, 11], [12, 11, 8], [12, 8, 5], [12, 5, 9], [12, 9, 10], [12, 10, 6], [12, 6, 1], [12, 1, 2], [12, 2, 7], [12, 7, 3], [12, 3, 0]], # Case 13.4.2 Faces 1, 4, 0
                [[12, 2, 6], [12, 6, 9], [12, 9, 10], [12, 10, 7], [12, 7, 11], [12, 11, 8], [12, 8, 4], [12, 4, 3], [12, 3, 0], [12, 0, 5], [12, 5, 1], [12, 1, 2]], # Case 13.4.3 Faces 2, 3, 0
                [[5, 1, 12], [8, 5, 12], [9, 8, 12], [6, 9, 12], [10, 6, 12], [11, 10, 12], [7, 11, 12], [2, 7, 12], [3, 2, 12], [4, 3, 12], [0, 4, 12], [1, 0, 12]], # Case 13.4.4 Faces 3, 4, 5
                [[4, 11, 8], [6, 1, 2], [3, 0, 7], [10, 7, 0], [5, 10, 0], [10, 5, 9]], # Case 13.5.1.1 Faces 1, 2, 0
                [[7, 3, 2], [5, 9, 8], [4, 1, 0], [1, 4, 11], [1, 11, 6], [10, 6, 11]], # Case 13.5.1.2 Faces 1, 4, 5
                [[5, 1, 0], [7, 11, 10], [6, 3, 2], [3, 6, 9], [3, 9, 4], [8, 4, 9]], # Case 13.5.1.3 Faces 2, 3, 5
                [[6, 9, 10], [4, 3, 0], [1, 2, 5], [8, 5, 2], [7, 8, 2], [8, 7, 11]], # Case 13.5.1.4 Faces 3, 4, 0
                [[6, 1, 2], [5, 9, 8], [0, 5, 8], [4, 0, 8], [0, 4, 3], [7, 3, 4], [11, 7, 4], [7, 11, 10], [8, 10, 11], [10, 8, 9]], # Case 13.5.2.1 Faces 1, 2, 0
                [[5, 9, 8], [3, 0, 4], [3, 4, 11], [3, 11, 7], [10, 7, 11], [7, 10, 6], [7, 6, 2], [1, 2, 6], [2, 1, 3], [0, 3, 1]], # Case 13.5.2.2 Faces 1, 4, 5
                [[7, 11, 10], [1, 2, 6], [1, 6, 9], [1, 9, 5], [8, 5, 9], [5, 8, 4], [5, 4, 0], [3, 0, 4], [0, 3, 1], [2, 1, 3]], # Case 13.5.2.3 Faces 2, 3, 5
                [[4, 3, 0], [7, 11, 10], [2, 7, 10], [6, 2, 10], [2, 6, 1], [5, 1, 6], [9, 5, 6], [8, 5, 9], [10, 8, 9], [8, 10, 11]], # Case 13.5.2.4 Faces 3, 4, 0
                ]
            FaceTest = [
                [0, 1, 2, 3],
                [0, 1, 5, 4],
                [1, 2, 6, 5],
                [2, 3, 7, 6],
                [3, 0, 4, 7],
                [4, 5, 6, 7]
                ]
        elif i == 113: 
            # Case 14 - 113 : 0 1 1 1 0 0 0 1
            Case = 14
            TriElems = [
                [[6,10,11],[0,6,11],[0,11,3],[0,5,6]]
                ]
            FaceTest = [[]]
        else:
            if primary: 
                thinking = True                
                while thinking == True:
                    TriElems, Case, FaceTest, sign = random.choice([R1x, R1z])(bits, 0, sign)
                    if Case != False:
                        thinking = False
            else:
                k += 1
                if k > 1000:
                    raise Exception('oops')
                if sum(bits) > 4:
                    TriElems, Case, FaceTest, sign = random.choice([R1x, R1z, Mxy, Re])(bits, k, sign)  
                else:
                    TriElems, Case, FaceTest, sign = random.choice([R1x, R1z])(bits, k, sign)  
            
            # Perform a random transformation and try again
            
            # if canFail:
            #     return [], False
            # thinking = True
            # k = 0
            # while thinking:
            #     k += 1
            #     TriElems, Case, bits = random.choice([R1x, R1z, Mxy, Re])(bits)
            #     if Case != False:
            #         thinking = False
            #     if k == 1000:
            #         print('merp')
        return TriElems, Case, FaceTest, sign
        
    LookupTable = [[] for i in range(256)]
    FaceTests = [[] for i in range(256)]
    Cases = [0 for i in range(256)]
    Signs = [0 for i in range(256)]
    for i in range(256):
        # print(i)
        bits = np.array([int(b) for b in list('{:08b}'.format(i))])
        # print(bits)
        LookupTable[i], Cases[i], FaceTests[i], Signs[i] = lookup(bits,-1)
    # i = 26
    # bits = np.array([int(b) for b in list('{:08b}'.format(i))])
    # lookuptable[i],Case[i] = lookup(bits)
    return LookupTable, Cases, FaceTests, Signs

def generateLookup():
    # LookupTable, Cases = generateLookup()
    import random
    def R1x(bits, k):
        # 90 deg x-axis rotation (ccw)
        R1xnodes = np.array([4, 5, 1, 0, 7, 6, 2, 3])
        R1xedges = np.array([8, 5, 0, 4, 11, 9, 1, 3, 10, 6, 2, 7, 12])
        R1xbits = bits[R1xnodes]
        TriElems, Case = lookup(R1xbits, k=k, primary=False)
        R1xtris = [[R1xedges[n] for n in tri] for tri in TriElems]
        return R1xtris, Case

    def R1z(bits, k):
        # 90 deg z-axis rotation (ccw)
        R1znodes = np.array([3, 0, 1, 2, 7, 4, 5, 6])
        R1zedges = np.array([3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10, 12])
        R1zbits = bits[R1znodes]
        TriElems, Case = lookup(R1zbits, k=k, primary=False)
        R1ztris = [[R1zedges[n] for n in tri] for tri in TriElems]
        return R1ztris, Case

    def Mxy(bits, k):
        # Mirror across XY plane
        Mxynodes = np.array([3,2,1,0,7,6,5,4])
        Mxyedges = np.array([2, 1, 0, 3, 7, 6, 5, 4, 10, 9, 8, 11, 12])
        Mxybits = bits[Mxynodes]
        TriElems, Case = lookup(Mxybits, k=k, primary=False)
        Mxytris = [list(reversed([Mxyedges[n] for n in tri])) for tri in TriElems]
        return Mxytris, Case
    
    def Re(bits, k):
        # Bit reflection (switching 0s and 1s)
        Rebits = np.array([1 if bit == 0 else 0 for bit in bits])
        TriElems, Case = lookup(Rebits, k=k, primary=False)
        Retris = [list(reversed(tri)) for tri in TriElems]
        return Retris, Case
        
        
    def lookup(bits, k=0, primary=True):
        i = int(''.join([str(bit) for bit in bits]),2)
        # print(i)
        # if i > 127:
        #     TriElems, Case, Rebits = Re(bits)
        if i == 0:
            # Case 0
            Case = 0
            TriElems  = [[]]
        elif i == 1:
            # Case 1
            Case = 1
            TriElems = [[7, 10, 11]]
                
        elif i == 3:
            # Case 2
            Case = 2
            TriElems = [[6, 9, 7], [7, 9, 11]]
                
        elif i == 5:
            # Case 3 - 5 : 0 0 0 0 0 1 0 1
            Case = 3
            TriElems = [[5, 8, 9], [7, 10, 11]]          
                       
        elif i == 20:
            # Case 4 - 20 : 0 0 0 1 0 1 0 0
            Case = 4
            TriElems = [[2, 7, 3], [5, 8, 9]]
                
        elif i == 7:
            # Case 5 - 7 : 0 0 0 0 0 1 1 1
            Case = 5
            TriElems = [[5, 7, 6], [5, 8, 11], [5, 11, 7]]
                
        elif i == 22:
            # Case 6 - 22 : 0 0 0 1 0 1 1 0
            Case = 6
            TriElems = [[2, 7, 3], [5, 8, 6], [6, 8, 10]]
                
        elif i == 74:
            # Case 7 - 74 : 0 1 0 0 1 0 1 0
            Case = 7
            TriElems = [[0, 5, 1], [6, 9, 10], [4, 11, 8]]
                
        elif i == 15:
            # Case 8 - 15 : 0 0 0 0 1 1 1 1
            Case = 8
            TriElems = [[4, 6, 5], [4, 7, 6]]
                
        elif i == 114:
            # Case 9 - 114 : 0 1 1 1 0 0 1 0
            Case = 9
            TriElems = [[0, 5, 3], [3, 5, 7], [5, 9, 7], [7, 9, 10]]
                
        elif i == 85:
            # Case 10 - 85 : 0 1 0 1 0 1 0 1
            Case = 10
            TriElems = [[0, 9, 1], [0, 8, 9], [2, 10, 11], [2, 11, 3]]    
                
        elif i == 116:
            # Case 11
            Case = 11
            TriElems = [[8, 9, 6],[3, 8, 6],[3, 6, 7],[0, 8, 3]]
                
        elif i == 120:
            # Case 12 - 120 : 0 1 1 1 1 0 0 0
            Case = 12
            TriElems = [[0, 5, 3], [3, 5, 7], [5, 6, 7], [4, 11, 8]]
                
        elif i == 90:
            # Case 13 - 90 : 0 1 0 1 1 0 1 0
            Case = 13
            TriElems = [[0, 5, 1], [5, 10, 6], [4, 11, 8], [2, 7, 3]]
                
        elif i == 113: 
            # Case 14 - 113 : 0 1 1 1 0 0 0 1
            Case = 14
            TriElems = [[6,10,11], [0,6,11], [0,11,3], [0,5,6]]
                
        else:
            if primary: 
                thinking = True
                while thinking == True:
                    TriElems, Case = random.choice([R1x, R1z, Mxy, Re])(bits, 0)
                    if Case != False:
                        thinking = False
            else:
                k += 1
                if k > 50:
                    return [], False
                TriElems, Case = random.choice([R1x, R1z, Mxy, Re])(bits, k)            
            
        return TriElems, Case
        
    LookupTable = [[] for i in range(256)]
    Cases = [0 for i in range(256)]
    for i in range(256):
        print(i)
        bits = np.array([int(b) for b in list('{:08b}'.format(i))])
        LookupTable[i], Cases[i] = lookup(bits)
    # i = 26
    # bits = np.array([int(b) for b in list('{:08b}'.format(i))])
    # lookuptab